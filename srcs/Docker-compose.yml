version: '3'
services:
  # Database Part
  postgres:
    image: postgres:13
    container_name: postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5431:5431"
    networks:
      - local_net
    volumes:
      - ./requirements/db:/var/lib/postgresql/data
    restart: always

  # Back-end Part
  Backend:
    build:
      context: requirements/Backend/
      dockerfile: Dockerfile
      args:
        - POSTGRES_USER=${POSTGRES_USER}
        - DATABASE_HOST=${DATABASE_HOST}
    env_file:
      - ./requirements/Backend/src/.env

    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DATABASE_HOST}:5432/${POSTGRES_DB}?schema=public"
    image: backend
    container_name: backend
    ports:
      - "3000:3000"
      - "5555:5555"
    networks:
      - local_net
    volumes:
      - ./requirements/Backend/src:/app
    depends_on:
      - postgres
    restart: always

  # Front-end Part
  Frontend:
    build:
      context: requirements/frontend
      dockerfile: Dockerfile
    image: frontend
    container_name: frontend
    ports: 
      - "5173:5173"
    networks:
      - local_net
    volumes: 
      - ./requirements/frontend:/app
    restart: always
    depends_on:
      - Backend

  adminer:
    image: adminer
    container_name: adminer
    networks:
      - local_net
    ports:
      - 8080:8080
    restart: always

networks:
  local_net:
    driver: bridge