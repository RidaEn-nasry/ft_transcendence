
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.11.0
 * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
 */
Prisma.prismaVersion = {
  client: "4.11.0",
  engine: "8fde8fef4033376662cad983758335009d522acb"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AchievementsAssignementScalarFieldEnum = makeEnum({
  achievement_id: 'achievement_id',
  player_id: 'player_id'
});

exports.Prisma.AchievementsScalarFieldEnum = makeEnum({
  achievement_id: 'achievement_id',
  name: 'name',
  description: 'description'
});

exports.Prisma.BannedUsersScalarFieldEnum = makeEnum({
  channel_id: 'channel_id',
  user_id: 'user_id',
  reason: 'reason'
});

exports.Prisma.BlockTabScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  blockedUser_id: 'blockedUser_id'
});

exports.Prisma.ChannelScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  dateCreated: 'dateCreated',
  chann_type: 'chann_type',
  owner_id: 'owner_id',
  password: 'password',
  limit_members: 'limit_members'
});

exports.Prisma.ChannelsJoinTabScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  channel_id: 'channel_id',
  channel_name: 'channel_name',
  role: 'role'
});

exports.Prisma.FriendsTabScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  friendUser_id: 'friendUser_id'
});

exports.Prisma.GameHistoryTabScalarFieldEnum = makeEnum({
  game_id: 'game_id',
  user_id: 'user_id'
});

exports.Prisma.GameScalarFieldEnum = makeEnum({
  id: 'id',
  dateCreated: 'dateCreated',
  gameStatus: 'gameStatus',
  player1_id: 'player1_id',
  player2_id: 'player2_id',
  player1_pts: 'player1_pts',
  player2_pts: 'player2_pts'
});

exports.Prisma.InviteDataScalarFieldEnum = makeEnum({
  invite_id: 'invite_id'
});

exports.Prisma.MembersTabScalarFieldEnum = makeEnum({
  channel_id: 'channel_id',
  user_id: 'user_id',
  role: 'role'
});

exports.Prisma.MessageScalarFieldEnum = makeEnum({
  id: 'id',
  dateCreated: 'dateCreated',
  sender_id: 'sender_id',
  receiver_id: 'receiver_id',
  channel_id: 'channel_id',
  content: 'content',
  seen: 'seen'
});

exports.Prisma.NotificationScalarFieldEnum = makeEnum({
  notification_id: 'notification_id',
  user_id: 'user_id'
});

exports.Prisma.PlayerAchievementsScalarFieldEnum = makeEnum({
  player_id: 'player_id',
  achievement_id: 'achievement_id'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.RankingDataScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  wins: 'wins',
  loses: 'loses',
  draws: 'draws',
  level: 'level',
  rank: 'rank'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  login: 'login',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  password: 'password',
  dateJoined: 'dateJoined',
  updated: 'updated',
  avatar: 'avatar',
  status: 'status'
});
exports.ChanRoles = makeEnum({
  Admin: 'Admin',
  Owner: 'Owner',
  Member: 'Member'
});

exports.ChanType = makeEnum({
  Public: 'Public',
  Private: 'Private',
  Secret: 'Secret'
});

exports.GameStatus = makeEnum({
  OnGoing: 'OnGoing',
  Finished: 'Finished'
});

exports.Rank = makeEnum({
  Novice: 'Novice',
  Intermediate: 'Intermediate',
  Advanced: 'Advanced',
  Master: 'Master'
});

exports.Status = makeEnum({
  Online: 'Online',
  Offline: 'Offline',
  Idle: 'Idle',
  DoNotDisturb: 'DoNotDisturb',
  InGame: 'InGame'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  FriendsTab: 'FriendsTab',
  BlockTab: 'BlockTab',
  ChannelsJoinTab: 'ChannelsJoinTab',
  RankingData: 'RankingData',
  Channel: 'Channel',
  MembersTab: 'MembersTab',
  BannedUsers: 'BannedUsers',
  Message: 'Message',
  Notification: 'Notification',
  InviteData: 'InviteData',
  Game: 'Game',
  PlayerAchievements: 'PlayerAchievements',
  Achievements: 'Achievements',
  AchievementsAssignement: 'AchievementsAssignement',
  GameHistoryTab: 'GameHistoryTab'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
