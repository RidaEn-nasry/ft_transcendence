
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id: string
  login: string
  email: string
  firstName: string
  lastName: string
  dateJoined: Date
  updated: Date
  avatar: string
  status: Status
  tfa: boolean
  otp_verified: boolean
  otp_base32: string | null
  realStatus: boolean
}

/**
 * Model FriendshipInvites
 * 
 */
export type FriendshipInvites = {
  sender_id: string
  receiver_id: string
  status: InviteStatus
  createdAt: Date
}

/**
 * Model FriendsTab
 * 
 */
export type FriendsTab = {
  user_id: string
  friendUser_id: string
}

/**
 * Model PrivateMessage
 * 
 */
export type PrivateMessage = {
  id: string
  dateCreated: Date
  content: string
  seen: boolean
  chatRoom_id: string
  sender_id: string
  receiver_id: string
}

/**
 * Model PrivateChatRoom
 * 
 */
export type PrivateChatRoom = {
  id: string
  sender_id: string
  receiver_id: string
  lastUpdatedTime: Date
  blocked: boolean
}

/**
 * Model BlockTab
 * 
 */
export type BlockTab = {
  user_id: string
  blockedUser_id: string
  uuid: string
}

/**
 * Model ChannelsJoinTab
 * 
 */
export type ChannelsJoinTab = {
  user_id: string
  channel_id: string
  channel_name: string
  role: ChanRoles
}

/**
 * Model Channel
 * 
 */
export type Channel = {
  id: string
  name: string
  dateCreated: Date
  chann_type: ChanType
  owner_id: string
  password: string | null
  limit_members: number
}

/**
 * Model MembersTab
 * 
 */
export type MembersTab = {
  channel_id: string
  member_id: string
}

/**
 * Model BannedMembers
 * 
 */
export type BannedMembers = {
  channel_id: string
  banned_id: string
  status: MemeberStatusTime | null
  status_end_time: Date | null
}

/**
 * Model AdminMembers
 * 
 */
export type AdminMembers = {
  channel_id: string
  admin_id: string
}

/**
 * Model kickedMembers
 * 
 */
export type kickedMembers = {
  channel_id: string
  kicked_id: string
}

/**
 * Model MutedMembers
 * 
 */
export type MutedMembers = {
  channel_id: string
  muted_id: string
  status: MemeberStatusTime | null
  status_end_time: Date | null
}

/**
 * Model Message
 * 
 */
export type Message = {
  id: string
  dateCreated: Date
  sender_id: string
  receiver_id: string
  content: string
  seen: boolean
}

/**
 * Model Notification
 * 
 */
export type Notification = {
  notification_id: string
  user_id: string
}

/**
 * Model Game
 * 
 */
export type Game = {
  id: string
  dateCreated: Date
  gameStatus: GameStatus
  player1_id: string
  player2_id: string
  player1_pts: number
  player2_pts: number
}

/**
 * Model GameInvites
 * 
 */
export type GameInvites = {
  sender_id: string
  receiver_id: string
  status: InviteStatus
  validUntil: Date
}

/**
 * Model RankingData
 * 
 */
export type RankingData = {
  user_id: string
  games: number
  wins: number
  loses: number
  draws: number
  xp: number
  winning_streak: number
  losing_streak: number
  points: number
  rank: Rank
}

/**
 * Model Achievements
 * 
 */
export type Achievements = {
  achievement_id: number
  name: string
  description: string
  image: string
}

/**
 * Model AchievementsAssignement
 * 
 */
export type AchievementsAssignement = {
  achievement_id: number
  player_id: string
}

/**
 * Model GameHistoryTab
 * 
 */
export type GameHistoryTab = {
  game_id: string
  user_id: string
}


/**
 * Enums
 */

export const ChanRoles: {
  Admin: 'Admin',
  Owner: 'Owner',
  Member: 'Member'
};

export type ChanRoles = (typeof ChanRoles)[keyof typeof ChanRoles]


export const ChanType: {
  Public: 'Public',
  Private: 'Private',
  Secret: 'Secret'
};

export type ChanType = (typeof ChanType)[keyof typeof ChanType]


export const GameStatus: {
  OnGoing: 'OnGoing',
  Finished: 'Finished'
};

export type GameStatus = (typeof GameStatus)[keyof typeof GameStatus]


export const InviteStatus: {
  Pending: 'Pending',
  Accepted: 'Accepted',
  Rejected: 'Rejected'
};

export type InviteStatus = (typeof InviteStatus)[keyof typeof InviteStatus]


export const MemeberStatusTime: {
  Permanent: 'Permanent',
  Temporary: 'Temporary'
};

export type MemeberStatusTime = (typeof MemeberStatusTime)[keyof typeof MemeberStatusTime]


export const Rank: {
  Novice: 'Novice',
  Veteran: 'Veteran',
  Rif_Rebellion: 'Rif_Rebellion',
  Master: 'Master',
  Sahara_Tuareg: 'Sahara_Tuareg'
};

export type Rank = (typeof Rank)[keyof typeof Rank]


export const Status: {
  Online: 'Online',
  Offline: 'Offline',
  Idle: 'Idle',
  DoNotDisturb: 'DoNotDisturb',
  InGame: 'InGame'
};

export type Status = (typeof Status)[keyof typeof Status]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.friendshipInvites`: Exposes CRUD operations for the **FriendshipInvites** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FriendshipInvites
    * const friendshipInvites = await prisma.friendshipInvites.findMany()
    * ```
    */
  get friendshipInvites(): Prisma.FriendshipInvitesDelegate<GlobalReject>;

  /**
   * `prisma.friendsTab`: Exposes CRUD operations for the **FriendsTab** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FriendsTabs
    * const friendsTabs = await prisma.friendsTab.findMany()
    * ```
    */
  get friendsTab(): Prisma.FriendsTabDelegate<GlobalReject>;

  /**
   * `prisma.privateMessage`: Exposes CRUD operations for the **PrivateMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PrivateMessages
    * const privateMessages = await prisma.privateMessage.findMany()
    * ```
    */
  get privateMessage(): Prisma.PrivateMessageDelegate<GlobalReject>;

  /**
   * `prisma.privateChatRoom`: Exposes CRUD operations for the **PrivateChatRoom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PrivateChatRooms
    * const privateChatRooms = await prisma.privateChatRoom.findMany()
    * ```
    */
  get privateChatRoom(): Prisma.PrivateChatRoomDelegate<GlobalReject>;

  /**
   * `prisma.blockTab`: Exposes CRUD operations for the **BlockTab** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BlockTabs
    * const blockTabs = await prisma.blockTab.findMany()
    * ```
    */
  get blockTab(): Prisma.BlockTabDelegate<GlobalReject>;

  /**
   * `prisma.channelsJoinTab`: Exposes CRUD operations for the **ChannelsJoinTab** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChannelsJoinTabs
    * const channelsJoinTabs = await prisma.channelsJoinTab.findMany()
    * ```
    */
  get channelsJoinTab(): Prisma.ChannelsJoinTabDelegate<GlobalReject>;

  /**
   * `prisma.channel`: Exposes CRUD operations for the **Channel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Channels
    * const channels = await prisma.channel.findMany()
    * ```
    */
  get channel(): Prisma.ChannelDelegate<GlobalReject>;

  /**
   * `prisma.membersTab`: Exposes CRUD operations for the **MembersTab** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MembersTabs
    * const membersTabs = await prisma.membersTab.findMany()
    * ```
    */
  get membersTab(): Prisma.MembersTabDelegate<GlobalReject>;

  /**
   * `prisma.bannedMembers`: Exposes CRUD operations for the **BannedMembers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BannedMembers
    * const bannedMembers = await prisma.bannedMembers.findMany()
    * ```
    */
  get bannedMembers(): Prisma.BannedMembersDelegate<GlobalReject>;

  /**
   * `prisma.adminMembers`: Exposes CRUD operations for the **AdminMembers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminMembers
    * const adminMembers = await prisma.adminMembers.findMany()
    * ```
    */
  get adminMembers(): Prisma.AdminMembersDelegate<GlobalReject>;

  /**
   * `prisma.kickedMembers`: Exposes CRUD operations for the **kickedMembers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KickedMembers
    * const kickedMembers = await prisma.kickedMembers.findMany()
    * ```
    */
  get kickedMembers(): Prisma.kickedMembersDelegate<GlobalReject>;

  /**
   * `prisma.mutedMembers`: Exposes CRUD operations for the **MutedMembers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MutedMembers
    * const mutedMembers = await prisma.mutedMembers.findMany()
    * ```
    */
  get mutedMembers(): Prisma.MutedMembersDelegate<GlobalReject>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<GlobalReject>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<GlobalReject>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<GlobalReject>;

  /**
   * `prisma.gameInvites`: Exposes CRUD operations for the **GameInvites** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameInvites
    * const gameInvites = await prisma.gameInvites.findMany()
    * ```
    */
  get gameInvites(): Prisma.GameInvitesDelegate<GlobalReject>;

  /**
   * `prisma.rankingData`: Exposes CRUD operations for the **RankingData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RankingData
    * const rankingData = await prisma.rankingData.findMany()
    * ```
    */
  get rankingData(): Prisma.RankingDataDelegate<GlobalReject>;

  /**
   * `prisma.achievements`: Exposes CRUD operations for the **Achievements** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Achievements
    * const achievements = await prisma.achievements.findMany()
    * ```
    */
  get achievements(): Prisma.AchievementsDelegate<GlobalReject>;

  /**
   * `prisma.achievementsAssignement`: Exposes CRUD operations for the **AchievementsAssignement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AchievementsAssignements
    * const achievementsAssignements = await prisma.achievementsAssignement.findMany()
    * ```
    */
  get achievementsAssignement(): Prisma.AchievementsAssignementDelegate<GlobalReject>;

  /**
   * `prisma.gameHistoryTab`: Exposes CRUD operations for the **GameHistoryTab** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameHistoryTabs
    * const gameHistoryTabs = await prisma.gameHistoryTab.findMany()
    * ```
    */
  get gameHistoryTab(): Prisma.GameHistoryTabDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    FriendshipInvites: 'FriendshipInvites',
    FriendsTab: 'FriendsTab',
    PrivateMessage: 'PrivateMessage',
    PrivateChatRoom: 'PrivateChatRoom',
    BlockTab: 'BlockTab',
    ChannelsJoinTab: 'ChannelsJoinTab',
    Channel: 'Channel',
    MembersTab: 'MembersTab',
    BannedMembers: 'BannedMembers',
    AdminMembers: 'AdminMembers',
    kickedMembers: 'kickedMembers',
    MutedMembers: 'MutedMembers',
    Message: 'Message',
    Notification: 'Notification',
    Game: 'Game',
    GameInvites: 'GameInvites',
    RankingData: 'RankingData',
    Achievements: 'Achievements',
    AchievementsAssignement: 'AchievementsAssignement',
    GameHistoryTab: 'GameHistoryTab'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    friends: number
    blockedUsers: number
    channelsJoined: number
    gameHistory: number
    rankingData: number
    notification: number
    frendshipInvites: number
    gameInvites: number
    MsgSender: number
    MsgReceiver: number
    privateChatRoomSender: number
    privateChatRoomReceiver: number
  }

  export type UserCountOutputTypeSelect = {
    friends?: boolean
    blockedUsers?: boolean
    channelsJoined?: boolean
    gameHistory?: boolean
    rankingData?: boolean
    notification?: boolean
    frendshipInvites?: boolean
    gameInvites?: boolean
    MsgSender?: boolean
    MsgReceiver?: boolean
    privateChatRoomSender?: boolean
    privateChatRoomReceiver?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type PrivateChatRoomCountOutputType
   */


  export type PrivateChatRoomCountOutputType = {
    messages: number
  }

  export type PrivateChatRoomCountOutputTypeSelect = {
    messages?: boolean
  }

  export type PrivateChatRoomCountOutputTypeGetPayload<S extends boolean | null | undefined | PrivateChatRoomCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PrivateChatRoomCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PrivateChatRoomCountOutputTypeArgs)
    ? PrivateChatRoomCountOutputType 
    : S extends { select: any } & (PrivateChatRoomCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof PrivateChatRoomCountOutputType ? PrivateChatRoomCountOutputType[P] : never
  } 
      : PrivateChatRoomCountOutputType




  // Custom InputTypes

  /**
   * PrivateChatRoomCountOutputType without action
   */
  export type PrivateChatRoomCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PrivateChatRoomCountOutputType
     */
    select?: PrivateChatRoomCountOutputTypeSelect | null
  }



  /**
   * Count Type ChannelCountOutputType
   */


  export type ChannelCountOutputType = {
    members: number
    messages: number
    bannedUsers: number
    adminstrators: number
    mutedMembers: number
    kickedMembers: number
  }

  export type ChannelCountOutputTypeSelect = {
    members?: boolean
    messages?: boolean
    bannedUsers?: boolean
    adminstrators?: boolean
    mutedMembers?: boolean
    kickedMembers?: boolean
  }

  export type ChannelCountOutputTypeGetPayload<S extends boolean | null | undefined | ChannelCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ChannelCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ChannelCountOutputTypeArgs)
    ? ChannelCountOutputType 
    : S extends { select: any } & (ChannelCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ChannelCountOutputType ? ChannelCountOutputType[P] : never
  } 
      : ChannelCountOutputType




  // Custom InputTypes

  /**
   * ChannelCountOutputType without action
   */
  export type ChannelCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ChannelCountOutputType
     */
    select?: ChannelCountOutputTypeSelect | null
  }



  /**
   * Count Type GameCountOutputType
   */


  export type GameCountOutputType = {
    gameHistory: number
  }

  export type GameCountOutputTypeSelect = {
    gameHistory?: boolean
  }

  export type GameCountOutputTypeGetPayload<S extends boolean | null | undefined | GameCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? GameCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (GameCountOutputTypeArgs)
    ? GameCountOutputType 
    : S extends { select: any } & (GameCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof GameCountOutputType ? GameCountOutputType[P] : never
  } 
      : GameCountOutputType




  // Custom InputTypes

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     */
    select?: GameCountOutputTypeSelect | null
  }



  /**
   * Count Type RankingDataCountOutputType
   */


  export type RankingDataCountOutputType = {
    achievements_assignement: number
  }

  export type RankingDataCountOutputTypeSelect = {
    achievements_assignement?: boolean
  }

  export type RankingDataCountOutputTypeGetPayload<S extends boolean | null | undefined | RankingDataCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? RankingDataCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (RankingDataCountOutputTypeArgs)
    ? RankingDataCountOutputType 
    : S extends { select: any } & (RankingDataCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof RankingDataCountOutputType ? RankingDataCountOutputType[P] : never
  } 
      : RankingDataCountOutputType




  // Custom InputTypes

  /**
   * RankingDataCountOutputType without action
   */
  export type RankingDataCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RankingDataCountOutputType
     */
    select?: RankingDataCountOutputTypeSelect | null
  }



  /**
   * Count Type AchievementsCountOutputType
   */


  export type AchievementsCountOutputType = {
    achievements_assignement: number
  }

  export type AchievementsCountOutputTypeSelect = {
    achievements_assignement?: boolean
  }

  export type AchievementsCountOutputTypeGetPayload<S extends boolean | null | undefined | AchievementsCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AchievementsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (AchievementsCountOutputTypeArgs)
    ? AchievementsCountOutputType 
    : S extends { select: any } & (AchievementsCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof AchievementsCountOutputType ? AchievementsCountOutputType[P] : never
  } 
      : AchievementsCountOutputType




  // Custom InputTypes

  /**
   * AchievementsCountOutputType without action
   */
  export type AchievementsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AchievementsCountOutputType
     */
    select?: AchievementsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    login: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    dateJoined: Date | null
    updated: Date | null
    avatar: string | null
    status: Status | null
    tfa: boolean | null
    otp_verified: boolean | null
    otp_base32: string | null
    realStatus: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    login: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    dateJoined: Date | null
    updated: Date | null
    avatar: string | null
    status: Status | null
    tfa: boolean | null
    otp_verified: boolean | null
    otp_base32: string | null
    realStatus: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    login: number
    email: number
    firstName: number
    lastName: number
    dateJoined: number
    updated: number
    avatar: number
    status: number
    tfa: number
    otp_verified: number
    otp_base32: number
    realStatus: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    login?: true
    email?: true
    firstName?: true
    lastName?: true
    dateJoined?: true
    updated?: true
    avatar?: true
    status?: true
    tfa?: true
    otp_verified?: true
    otp_base32?: true
    realStatus?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    login?: true
    email?: true
    firstName?: true
    lastName?: true
    dateJoined?: true
    updated?: true
    avatar?: true
    status?: true
    tfa?: true
    otp_verified?: true
    otp_base32?: true
    realStatus?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    login?: true
    email?: true
    firstName?: true
    lastName?: true
    dateJoined?: true
    updated?: true
    avatar?: true
    status?: true
    tfa?: true
    otp_verified?: true
    otp_base32?: true
    realStatus?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined: Date
    updated: Date
    avatar: string
    status: Status
    tfa: boolean
    otp_verified: boolean
    otp_base32: string | null
    realStatus: boolean
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    login?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    dateJoined?: boolean
    updated?: boolean
    avatar?: boolean
    status?: boolean
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: boolean
    realStatus?: boolean
    friends?: boolean | User$friendsArgs
    blockedUsers?: boolean | User$blockedUsersArgs
    channelsJoined?: boolean | User$channelsJoinedArgs
    gameHistory?: boolean | User$gameHistoryArgs
    rankingData?: boolean | User$rankingDataArgs
    notification?: boolean | User$notificationArgs
    frendshipInvites?: boolean | User$frendshipInvitesArgs
    gameInvites?: boolean | User$gameInvitesArgs
    MsgSender?: boolean | User$MsgSenderArgs
    MsgReceiver?: boolean | User$MsgReceiverArgs
    privateChatRoomSender?: boolean | User$privateChatRoomSenderArgs
    privateChatRoomReceiver?: boolean | User$privateChatRoomReceiverArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    friends?: boolean | User$friendsArgs
    blockedUsers?: boolean | User$blockedUsersArgs
    channelsJoined?: boolean | User$channelsJoinedArgs
    gameHistory?: boolean | User$gameHistoryArgs
    rankingData?: boolean | User$rankingDataArgs
    notification?: boolean | User$notificationArgs
    frendshipInvites?: boolean | User$frendshipInvitesArgs
    gameInvites?: boolean | User$gameInvitesArgs
    MsgSender?: boolean | User$MsgSenderArgs
    MsgReceiver?: boolean | User$MsgReceiverArgs
    privateChatRoomSender?: boolean | User$privateChatRoomSenderArgs
    privateChatRoomReceiver?: boolean | User$privateChatRoomReceiverArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'friends' ? Array < FriendsTabGetPayload<S['include'][P]>>  :
        P extends 'blockedUsers' ? Array < BlockTabGetPayload<S['include'][P]>>  :
        P extends 'channelsJoined' ? Array < ChannelsJoinTabGetPayload<S['include'][P]>>  :
        P extends 'gameHistory' ? Array < GameHistoryTabGetPayload<S['include'][P]>>  :
        P extends 'rankingData' ? Array < RankingDataGetPayload<S['include'][P]>>  :
        P extends 'notification' ? Array < NotificationGetPayload<S['include'][P]>>  :
        P extends 'frendshipInvites' ? Array < FriendshipInvitesGetPayload<S['include'][P]>>  :
        P extends 'gameInvites' ? Array < GameInvitesGetPayload<S['include'][P]>>  :
        P extends 'MsgSender' ? Array < PrivateMessageGetPayload<S['include'][P]>>  :
        P extends 'MsgReceiver' ? Array < PrivateMessageGetPayload<S['include'][P]>>  :
        P extends 'privateChatRoomSender' ? Array < PrivateChatRoomGetPayload<S['include'][P]>>  :
        P extends 'privateChatRoomReceiver' ? Array < PrivateChatRoomGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'friends' ? Array < FriendsTabGetPayload<S['select'][P]>>  :
        P extends 'blockedUsers' ? Array < BlockTabGetPayload<S['select'][P]>>  :
        P extends 'channelsJoined' ? Array < ChannelsJoinTabGetPayload<S['select'][P]>>  :
        P extends 'gameHistory' ? Array < GameHistoryTabGetPayload<S['select'][P]>>  :
        P extends 'rankingData' ? Array < RankingDataGetPayload<S['select'][P]>>  :
        P extends 'notification' ? Array < NotificationGetPayload<S['select'][P]>>  :
        P extends 'frendshipInvites' ? Array < FriendshipInvitesGetPayload<S['select'][P]>>  :
        P extends 'gameInvites' ? Array < GameInvitesGetPayload<S['select'][P]>>  :
        P extends 'MsgSender' ? Array < PrivateMessageGetPayload<S['select'][P]>>  :
        P extends 'MsgReceiver' ? Array < PrivateMessageGetPayload<S['select'][P]>>  :
        P extends 'privateChatRoomSender' ? Array < PrivateChatRoomGetPayload<S['select'][P]>>  :
        P extends 'privateChatRoomReceiver' ? Array < PrivateChatRoomGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    friends<T extends User$friendsArgs= {}>(args?: Subset<T, User$friendsArgs>): Prisma.PrismaPromise<Array<FriendsTabGetPayload<T>>| Null>;

    blockedUsers<T extends User$blockedUsersArgs= {}>(args?: Subset<T, User$blockedUsersArgs>): Prisma.PrismaPromise<Array<BlockTabGetPayload<T>>| Null>;

    channelsJoined<T extends User$channelsJoinedArgs= {}>(args?: Subset<T, User$channelsJoinedArgs>): Prisma.PrismaPromise<Array<ChannelsJoinTabGetPayload<T>>| Null>;

    gameHistory<T extends User$gameHistoryArgs= {}>(args?: Subset<T, User$gameHistoryArgs>): Prisma.PrismaPromise<Array<GameHistoryTabGetPayload<T>>| Null>;

    rankingData<T extends User$rankingDataArgs= {}>(args?: Subset<T, User$rankingDataArgs>): Prisma.PrismaPromise<Array<RankingDataGetPayload<T>>| Null>;

    notification<T extends User$notificationArgs= {}>(args?: Subset<T, User$notificationArgs>): Prisma.PrismaPromise<Array<NotificationGetPayload<T>>| Null>;

    frendshipInvites<T extends User$frendshipInvitesArgs= {}>(args?: Subset<T, User$frendshipInvitesArgs>): Prisma.PrismaPromise<Array<FriendshipInvitesGetPayload<T>>| Null>;

    gameInvites<T extends User$gameInvitesArgs= {}>(args?: Subset<T, User$gameInvitesArgs>): Prisma.PrismaPromise<Array<GameInvitesGetPayload<T>>| Null>;

    MsgSender<T extends User$MsgSenderArgs= {}>(args?: Subset<T, User$MsgSenderArgs>): Prisma.PrismaPromise<Array<PrivateMessageGetPayload<T>>| Null>;

    MsgReceiver<T extends User$MsgReceiverArgs= {}>(args?: Subset<T, User$MsgReceiverArgs>): Prisma.PrismaPromise<Array<PrivateMessageGetPayload<T>>| Null>;

    privateChatRoomSender<T extends User$privateChatRoomSenderArgs= {}>(args?: Subset<T, User$privateChatRoomSenderArgs>): Prisma.PrismaPromise<Array<PrivateChatRoomGetPayload<T>>| Null>;

    privateChatRoomReceiver<T extends User$privateChatRoomReceiverArgs= {}>(args?: Subset<T, User$privateChatRoomReceiverArgs>): Prisma.PrismaPromise<Array<PrivateChatRoomGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.friends
   */
  export type User$friendsArgs = {
    /**
     * Select specific fields to fetch from the FriendsTab
     */
    select?: FriendsTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsTabInclude | null
    where?: FriendsTabWhereInput
    orderBy?: Enumerable<FriendsTabOrderByWithRelationInput>
    cursor?: FriendsTabWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FriendsTabScalarFieldEnum>
  }


  /**
   * User.blockedUsers
   */
  export type User$blockedUsersArgs = {
    /**
     * Select specific fields to fetch from the BlockTab
     */
    select?: BlockTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockTabInclude | null
    where?: BlockTabWhereInput
    orderBy?: Enumerable<BlockTabOrderByWithRelationInput>
    cursor?: BlockTabWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BlockTabScalarFieldEnum>
  }


  /**
   * User.channelsJoined
   */
  export type User$channelsJoinedArgs = {
    /**
     * Select specific fields to fetch from the ChannelsJoinTab
     */
    select?: ChannelsJoinTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsJoinTabInclude | null
    where?: ChannelsJoinTabWhereInput
    orderBy?: Enumerable<ChannelsJoinTabOrderByWithRelationInput>
    cursor?: ChannelsJoinTabWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChannelsJoinTabScalarFieldEnum>
  }


  /**
   * User.gameHistory
   */
  export type User$gameHistoryArgs = {
    /**
     * Select specific fields to fetch from the GameHistoryTab
     */
    select?: GameHistoryTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameHistoryTabInclude | null
    where?: GameHistoryTabWhereInput
    orderBy?: Enumerable<GameHistoryTabOrderByWithRelationInput>
    cursor?: GameHistoryTabWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GameHistoryTabScalarFieldEnum>
  }


  /**
   * User.rankingData
   */
  export type User$rankingDataArgs = {
    /**
     * Select specific fields to fetch from the RankingData
     */
    select?: RankingDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankingDataInclude | null
    where?: RankingDataWhereInput
    orderBy?: Enumerable<RankingDataOrderByWithRelationInput>
    cursor?: RankingDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RankingDataScalarFieldEnum>
  }


  /**
   * User.notification
   */
  export type User$notificationArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    where?: NotificationWhereInput
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }


  /**
   * User.frendshipInvites
   */
  export type User$frendshipInvitesArgs = {
    /**
     * Select specific fields to fetch from the FriendshipInvites
     */
    select?: FriendshipInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInvitesInclude | null
    where?: FriendshipInvitesWhereInput
    orderBy?: Enumerable<FriendshipInvitesOrderByWithRelationInput>
    cursor?: FriendshipInvitesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FriendshipInvitesScalarFieldEnum>
  }


  /**
   * User.gameInvites
   */
  export type User$gameInvitesArgs = {
    /**
     * Select specific fields to fetch from the GameInvites
     */
    select?: GameInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInvitesInclude | null
    where?: GameInvitesWhereInput
    orderBy?: Enumerable<GameInvitesOrderByWithRelationInput>
    cursor?: GameInvitesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GameInvitesScalarFieldEnum>
  }


  /**
   * User.MsgSender
   */
  export type User$MsgSenderArgs = {
    /**
     * Select specific fields to fetch from the PrivateMessage
     */
    select?: PrivateMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateMessageInclude | null
    where?: PrivateMessageWhereInput
    orderBy?: Enumerable<PrivateMessageOrderByWithRelationInput>
    cursor?: PrivateMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PrivateMessageScalarFieldEnum>
  }


  /**
   * User.MsgReceiver
   */
  export type User$MsgReceiverArgs = {
    /**
     * Select specific fields to fetch from the PrivateMessage
     */
    select?: PrivateMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateMessageInclude | null
    where?: PrivateMessageWhereInput
    orderBy?: Enumerable<PrivateMessageOrderByWithRelationInput>
    cursor?: PrivateMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PrivateMessageScalarFieldEnum>
  }


  /**
   * User.privateChatRoomSender
   */
  export type User$privateChatRoomSenderArgs = {
    /**
     * Select specific fields to fetch from the PrivateChatRoom
     */
    select?: PrivateChatRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateChatRoomInclude | null
    where?: PrivateChatRoomWhereInput
    orderBy?: Enumerable<PrivateChatRoomOrderByWithRelationInput>
    cursor?: PrivateChatRoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PrivateChatRoomScalarFieldEnum>
  }


  /**
   * User.privateChatRoomReceiver
   */
  export type User$privateChatRoomReceiverArgs = {
    /**
     * Select specific fields to fetch from the PrivateChatRoom
     */
    select?: PrivateChatRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateChatRoomInclude | null
    where?: PrivateChatRoomWhereInput
    orderBy?: Enumerable<PrivateChatRoomOrderByWithRelationInput>
    cursor?: PrivateChatRoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PrivateChatRoomScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model FriendshipInvites
   */


  export type AggregateFriendshipInvites = {
    _count: FriendshipInvitesCountAggregateOutputType | null
    _min: FriendshipInvitesMinAggregateOutputType | null
    _max: FriendshipInvitesMaxAggregateOutputType | null
  }

  export type FriendshipInvitesMinAggregateOutputType = {
    sender_id: string | null
    receiver_id: string | null
    status: InviteStatus | null
    createdAt: Date | null
  }

  export type FriendshipInvitesMaxAggregateOutputType = {
    sender_id: string | null
    receiver_id: string | null
    status: InviteStatus | null
    createdAt: Date | null
  }

  export type FriendshipInvitesCountAggregateOutputType = {
    sender_id: number
    receiver_id: number
    status: number
    createdAt: number
    _all: number
  }


  export type FriendshipInvitesMinAggregateInputType = {
    sender_id?: true
    receiver_id?: true
    status?: true
    createdAt?: true
  }

  export type FriendshipInvitesMaxAggregateInputType = {
    sender_id?: true
    receiver_id?: true
    status?: true
    createdAt?: true
  }

  export type FriendshipInvitesCountAggregateInputType = {
    sender_id?: true
    receiver_id?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type FriendshipInvitesAggregateArgs = {
    /**
     * Filter which FriendshipInvites to aggregate.
     */
    where?: FriendshipInvitesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FriendshipInvites to fetch.
     */
    orderBy?: Enumerable<FriendshipInvitesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FriendshipInvitesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FriendshipInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FriendshipInvites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FriendshipInvites
    **/
    _count?: true | FriendshipInvitesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FriendshipInvitesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FriendshipInvitesMaxAggregateInputType
  }

  export type GetFriendshipInvitesAggregateType<T extends FriendshipInvitesAggregateArgs> = {
        [P in keyof T & keyof AggregateFriendshipInvites]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFriendshipInvites[P]>
      : GetScalarType<T[P], AggregateFriendshipInvites[P]>
  }




  export type FriendshipInvitesGroupByArgs = {
    where?: FriendshipInvitesWhereInput
    orderBy?: Enumerable<FriendshipInvitesOrderByWithAggregationInput>
    by: FriendshipInvitesScalarFieldEnum[]
    having?: FriendshipInvitesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FriendshipInvitesCountAggregateInputType | true
    _min?: FriendshipInvitesMinAggregateInputType
    _max?: FriendshipInvitesMaxAggregateInputType
  }


  export type FriendshipInvitesGroupByOutputType = {
    sender_id: string
    receiver_id: string
    status: InviteStatus
    createdAt: Date
    _count: FriendshipInvitesCountAggregateOutputType | null
    _min: FriendshipInvitesMinAggregateOutputType | null
    _max: FriendshipInvitesMaxAggregateOutputType | null
  }

  type GetFriendshipInvitesGroupByPayload<T extends FriendshipInvitesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FriendshipInvitesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FriendshipInvitesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FriendshipInvitesGroupByOutputType[P]>
            : GetScalarType<T[P], FriendshipInvitesGroupByOutputType[P]>
        }
      >
    >


  export type FriendshipInvitesSelect = {
    sender_id?: boolean
    receiver_id?: boolean
    status?: boolean
    createdAt?: boolean
    sender?: boolean | UserArgs
  }


  export type FriendshipInvitesInclude = {
    sender?: boolean | UserArgs
  }

  export type FriendshipInvitesGetPayload<S extends boolean | null | undefined | FriendshipInvitesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FriendshipInvites :
    S extends undefined ? never :
    S extends { include: any } & (FriendshipInvitesArgs | FriendshipInvitesFindManyArgs)
    ? FriendshipInvites  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'sender' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FriendshipInvitesArgs | FriendshipInvitesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'sender' ? UserGetPayload<S['select'][P]> :  P extends keyof FriendshipInvites ? FriendshipInvites[P] : never
  } 
      : FriendshipInvites


  type FriendshipInvitesCountArgs = 
    Omit<FriendshipInvitesFindManyArgs, 'select' | 'include'> & {
      select?: FriendshipInvitesCountAggregateInputType | true
    }

  export interface FriendshipInvitesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FriendshipInvites that matches the filter.
     * @param {FriendshipInvitesFindUniqueArgs} args - Arguments to find a FriendshipInvites
     * @example
     * // Get one FriendshipInvites
     * const friendshipInvites = await prisma.friendshipInvites.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FriendshipInvitesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FriendshipInvitesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FriendshipInvites'> extends True ? Prisma__FriendshipInvitesClient<FriendshipInvitesGetPayload<T>> : Prisma__FriendshipInvitesClient<FriendshipInvitesGetPayload<T> | null, null>

    /**
     * Find one FriendshipInvites that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FriendshipInvitesFindUniqueOrThrowArgs} args - Arguments to find a FriendshipInvites
     * @example
     * // Get one FriendshipInvites
     * const friendshipInvites = await prisma.friendshipInvites.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FriendshipInvitesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FriendshipInvitesFindUniqueOrThrowArgs>
    ): Prisma__FriendshipInvitesClient<FriendshipInvitesGetPayload<T>>

    /**
     * Find the first FriendshipInvites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipInvitesFindFirstArgs} args - Arguments to find a FriendshipInvites
     * @example
     * // Get one FriendshipInvites
     * const friendshipInvites = await prisma.friendshipInvites.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FriendshipInvitesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FriendshipInvitesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FriendshipInvites'> extends True ? Prisma__FriendshipInvitesClient<FriendshipInvitesGetPayload<T>> : Prisma__FriendshipInvitesClient<FriendshipInvitesGetPayload<T> | null, null>

    /**
     * Find the first FriendshipInvites that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipInvitesFindFirstOrThrowArgs} args - Arguments to find a FriendshipInvites
     * @example
     * // Get one FriendshipInvites
     * const friendshipInvites = await prisma.friendshipInvites.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FriendshipInvitesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FriendshipInvitesFindFirstOrThrowArgs>
    ): Prisma__FriendshipInvitesClient<FriendshipInvitesGetPayload<T>>

    /**
     * Find zero or more FriendshipInvites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipInvitesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FriendshipInvites
     * const friendshipInvites = await prisma.friendshipInvites.findMany()
     * 
     * // Get first 10 FriendshipInvites
     * const friendshipInvites = await prisma.friendshipInvites.findMany({ take: 10 })
     * 
     * // Only select the `sender_id`
     * const friendshipInvitesWithSender_idOnly = await prisma.friendshipInvites.findMany({ select: { sender_id: true } })
     * 
    **/
    findMany<T extends FriendshipInvitesFindManyArgs>(
      args?: SelectSubset<T, FriendshipInvitesFindManyArgs>
    ): Prisma.PrismaPromise<Array<FriendshipInvitesGetPayload<T>>>

    /**
     * Create a FriendshipInvites.
     * @param {FriendshipInvitesCreateArgs} args - Arguments to create a FriendshipInvites.
     * @example
     * // Create one FriendshipInvites
     * const FriendshipInvites = await prisma.friendshipInvites.create({
     *   data: {
     *     // ... data to create a FriendshipInvites
     *   }
     * })
     * 
    **/
    create<T extends FriendshipInvitesCreateArgs>(
      args: SelectSubset<T, FriendshipInvitesCreateArgs>
    ): Prisma__FriendshipInvitesClient<FriendshipInvitesGetPayload<T>>

    /**
     * Create many FriendshipInvites.
     *     @param {FriendshipInvitesCreateManyArgs} args - Arguments to create many FriendshipInvites.
     *     @example
     *     // Create many FriendshipInvites
     *     const friendshipInvites = await prisma.friendshipInvites.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FriendshipInvitesCreateManyArgs>(
      args?: SelectSubset<T, FriendshipInvitesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FriendshipInvites.
     * @param {FriendshipInvitesDeleteArgs} args - Arguments to delete one FriendshipInvites.
     * @example
     * // Delete one FriendshipInvites
     * const FriendshipInvites = await prisma.friendshipInvites.delete({
     *   where: {
     *     // ... filter to delete one FriendshipInvites
     *   }
     * })
     * 
    **/
    delete<T extends FriendshipInvitesDeleteArgs>(
      args: SelectSubset<T, FriendshipInvitesDeleteArgs>
    ): Prisma__FriendshipInvitesClient<FriendshipInvitesGetPayload<T>>

    /**
     * Update one FriendshipInvites.
     * @param {FriendshipInvitesUpdateArgs} args - Arguments to update one FriendshipInvites.
     * @example
     * // Update one FriendshipInvites
     * const friendshipInvites = await prisma.friendshipInvites.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FriendshipInvitesUpdateArgs>(
      args: SelectSubset<T, FriendshipInvitesUpdateArgs>
    ): Prisma__FriendshipInvitesClient<FriendshipInvitesGetPayload<T>>

    /**
     * Delete zero or more FriendshipInvites.
     * @param {FriendshipInvitesDeleteManyArgs} args - Arguments to filter FriendshipInvites to delete.
     * @example
     * // Delete a few FriendshipInvites
     * const { count } = await prisma.friendshipInvites.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FriendshipInvitesDeleteManyArgs>(
      args?: SelectSubset<T, FriendshipInvitesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FriendshipInvites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipInvitesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FriendshipInvites
     * const friendshipInvites = await prisma.friendshipInvites.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FriendshipInvitesUpdateManyArgs>(
      args: SelectSubset<T, FriendshipInvitesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FriendshipInvites.
     * @param {FriendshipInvitesUpsertArgs} args - Arguments to update or create a FriendshipInvites.
     * @example
     * // Update or create a FriendshipInvites
     * const friendshipInvites = await prisma.friendshipInvites.upsert({
     *   create: {
     *     // ... data to create a FriendshipInvites
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FriendshipInvites we want to update
     *   }
     * })
    **/
    upsert<T extends FriendshipInvitesUpsertArgs>(
      args: SelectSubset<T, FriendshipInvitesUpsertArgs>
    ): Prisma__FriendshipInvitesClient<FriendshipInvitesGetPayload<T>>

    /**
     * Count the number of FriendshipInvites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipInvitesCountArgs} args - Arguments to filter FriendshipInvites to count.
     * @example
     * // Count the number of FriendshipInvites
     * const count = await prisma.friendshipInvites.count({
     *   where: {
     *     // ... the filter for the FriendshipInvites we want to count
     *   }
     * })
    **/
    count<T extends FriendshipInvitesCountArgs>(
      args?: Subset<T, FriendshipInvitesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FriendshipInvitesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FriendshipInvites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipInvitesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FriendshipInvitesAggregateArgs>(args: Subset<T, FriendshipInvitesAggregateArgs>): Prisma.PrismaPromise<GetFriendshipInvitesAggregateType<T>>

    /**
     * Group by FriendshipInvites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipInvitesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FriendshipInvitesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FriendshipInvitesGroupByArgs['orderBy'] }
        : { orderBy?: FriendshipInvitesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FriendshipInvitesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFriendshipInvitesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FriendshipInvites.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FriendshipInvitesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    sender<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FriendshipInvites base type for findUnique actions
   */
  export type FriendshipInvitesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FriendshipInvites
     */
    select?: FriendshipInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInvitesInclude | null
    /**
     * Filter, which FriendshipInvites to fetch.
     */
    where: FriendshipInvitesWhereUniqueInput
  }

  /**
   * FriendshipInvites findUnique
   */
  export interface FriendshipInvitesFindUniqueArgs extends FriendshipInvitesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FriendshipInvites findUniqueOrThrow
   */
  export type FriendshipInvitesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FriendshipInvites
     */
    select?: FriendshipInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInvitesInclude | null
    /**
     * Filter, which FriendshipInvites to fetch.
     */
    where: FriendshipInvitesWhereUniqueInput
  }


  /**
   * FriendshipInvites base type for findFirst actions
   */
  export type FriendshipInvitesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FriendshipInvites
     */
    select?: FriendshipInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInvitesInclude | null
    /**
     * Filter, which FriendshipInvites to fetch.
     */
    where?: FriendshipInvitesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FriendshipInvites to fetch.
     */
    orderBy?: Enumerable<FriendshipInvitesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FriendshipInvites.
     */
    cursor?: FriendshipInvitesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FriendshipInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FriendshipInvites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FriendshipInvites.
     */
    distinct?: Enumerable<FriendshipInvitesScalarFieldEnum>
  }

  /**
   * FriendshipInvites findFirst
   */
  export interface FriendshipInvitesFindFirstArgs extends FriendshipInvitesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FriendshipInvites findFirstOrThrow
   */
  export type FriendshipInvitesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FriendshipInvites
     */
    select?: FriendshipInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInvitesInclude | null
    /**
     * Filter, which FriendshipInvites to fetch.
     */
    where?: FriendshipInvitesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FriendshipInvites to fetch.
     */
    orderBy?: Enumerable<FriendshipInvitesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FriendshipInvites.
     */
    cursor?: FriendshipInvitesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FriendshipInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FriendshipInvites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FriendshipInvites.
     */
    distinct?: Enumerable<FriendshipInvitesScalarFieldEnum>
  }


  /**
   * FriendshipInvites findMany
   */
  export type FriendshipInvitesFindManyArgs = {
    /**
     * Select specific fields to fetch from the FriendshipInvites
     */
    select?: FriendshipInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInvitesInclude | null
    /**
     * Filter, which FriendshipInvites to fetch.
     */
    where?: FriendshipInvitesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FriendshipInvites to fetch.
     */
    orderBy?: Enumerable<FriendshipInvitesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FriendshipInvites.
     */
    cursor?: FriendshipInvitesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FriendshipInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FriendshipInvites.
     */
    skip?: number
    distinct?: Enumerable<FriendshipInvitesScalarFieldEnum>
  }


  /**
   * FriendshipInvites create
   */
  export type FriendshipInvitesCreateArgs = {
    /**
     * Select specific fields to fetch from the FriendshipInvites
     */
    select?: FriendshipInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInvitesInclude | null
    /**
     * The data needed to create a FriendshipInvites.
     */
    data: XOR<FriendshipInvitesCreateInput, FriendshipInvitesUncheckedCreateInput>
  }


  /**
   * FriendshipInvites createMany
   */
  export type FriendshipInvitesCreateManyArgs = {
    /**
     * The data used to create many FriendshipInvites.
     */
    data: Enumerable<FriendshipInvitesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FriendshipInvites update
   */
  export type FriendshipInvitesUpdateArgs = {
    /**
     * Select specific fields to fetch from the FriendshipInvites
     */
    select?: FriendshipInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInvitesInclude | null
    /**
     * The data needed to update a FriendshipInvites.
     */
    data: XOR<FriendshipInvitesUpdateInput, FriendshipInvitesUncheckedUpdateInput>
    /**
     * Choose, which FriendshipInvites to update.
     */
    where: FriendshipInvitesWhereUniqueInput
  }


  /**
   * FriendshipInvites updateMany
   */
  export type FriendshipInvitesUpdateManyArgs = {
    /**
     * The data used to update FriendshipInvites.
     */
    data: XOR<FriendshipInvitesUpdateManyMutationInput, FriendshipInvitesUncheckedUpdateManyInput>
    /**
     * Filter which FriendshipInvites to update
     */
    where?: FriendshipInvitesWhereInput
  }


  /**
   * FriendshipInvites upsert
   */
  export type FriendshipInvitesUpsertArgs = {
    /**
     * Select specific fields to fetch from the FriendshipInvites
     */
    select?: FriendshipInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInvitesInclude | null
    /**
     * The filter to search for the FriendshipInvites to update in case it exists.
     */
    where: FriendshipInvitesWhereUniqueInput
    /**
     * In case the FriendshipInvites found by the `where` argument doesn't exist, create a new FriendshipInvites with this data.
     */
    create: XOR<FriendshipInvitesCreateInput, FriendshipInvitesUncheckedCreateInput>
    /**
     * In case the FriendshipInvites was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FriendshipInvitesUpdateInput, FriendshipInvitesUncheckedUpdateInput>
  }


  /**
   * FriendshipInvites delete
   */
  export type FriendshipInvitesDeleteArgs = {
    /**
     * Select specific fields to fetch from the FriendshipInvites
     */
    select?: FriendshipInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInvitesInclude | null
    /**
     * Filter which FriendshipInvites to delete.
     */
    where: FriendshipInvitesWhereUniqueInput
  }


  /**
   * FriendshipInvites deleteMany
   */
  export type FriendshipInvitesDeleteManyArgs = {
    /**
     * Filter which FriendshipInvites to delete
     */
    where?: FriendshipInvitesWhereInput
  }


  /**
   * FriendshipInvites without action
   */
  export type FriendshipInvitesArgs = {
    /**
     * Select specific fields to fetch from the FriendshipInvites
     */
    select?: FriendshipInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInvitesInclude | null
  }



  /**
   * Model FriendsTab
   */


  export type AggregateFriendsTab = {
    _count: FriendsTabCountAggregateOutputType | null
    _min: FriendsTabMinAggregateOutputType | null
    _max: FriendsTabMaxAggregateOutputType | null
  }

  export type FriendsTabMinAggregateOutputType = {
    user_id: string | null
    friendUser_id: string | null
  }

  export type FriendsTabMaxAggregateOutputType = {
    user_id: string | null
    friendUser_id: string | null
  }

  export type FriendsTabCountAggregateOutputType = {
    user_id: number
    friendUser_id: number
    _all: number
  }


  export type FriendsTabMinAggregateInputType = {
    user_id?: true
    friendUser_id?: true
  }

  export type FriendsTabMaxAggregateInputType = {
    user_id?: true
    friendUser_id?: true
  }

  export type FriendsTabCountAggregateInputType = {
    user_id?: true
    friendUser_id?: true
    _all?: true
  }

  export type FriendsTabAggregateArgs = {
    /**
     * Filter which FriendsTab to aggregate.
     */
    where?: FriendsTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FriendsTabs to fetch.
     */
    orderBy?: Enumerable<FriendsTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FriendsTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FriendsTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FriendsTabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FriendsTabs
    **/
    _count?: true | FriendsTabCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FriendsTabMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FriendsTabMaxAggregateInputType
  }

  export type GetFriendsTabAggregateType<T extends FriendsTabAggregateArgs> = {
        [P in keyof T & keyof AggregateFriendsTab]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFriendsTab[P]>
      : GetScalarType<T[P], AggregateFriendsTab[P]>
  }




  export type FriendsTabGroupByArgs = {
    where?: FriendsTabWhereInput
    orderBy?: Enumerable<FriendsTabOrderByWithAggregationInput>
    by: FriendsTabScalarFieldEnum[]
    having?: FriendsTabScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FriendsTabCountAggregateInputType | true
    _min?: FriendsTabMinAggregateInputType
    _max?: FriendsTabMaxAggregateInputType
  }


  export type FriendsTabGroupByOutputType = {
    user_id: string
    friendUser_id: string
    _count: FriendsTabCountAggregateOutputType | null
    _min: FriendsTabMinAggregateOutputType | null
    _max: FriendsTabMaxAggregateOutputType | null
  }

  type GetFriendsTabGroupByPayload<T extends FriendsTabGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FriendsTabGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FriendsTabGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FriendsTabGroupByOutputType[P]>
            : GetScalarType<T[P], FriendsTabGroupByOutputType[P]>
        }
      >
    >


  export type FriendsTabSelect = {
    user_id?: boolean
    friendUser_id?: boolean
    user?: boolean | UserArgs
  }


  export type FriendsTabInclude = {
    user?: boolean | UserArgs
  }

  export type FriendsTabGetPayload<S extends boolean | null | undefined | FriendsTabArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FriendsTab :
    S extends undefined ? never :
    S extends { include: any } & (FriendsTabArgs | FriendsTabFindManyArgs)
    ? FriendsTab  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FriendsTabArgs | FriendsTabFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof FriendsTab ? FriendsTab[P] : never
  } 
      : FriendsTab


  type FriendsTabCountArgs = 
    Omit<FriendsTabFindManyArgs, 'select' | 'include'> & {
      select?: FriendsTabCountAggregateInputType | true
    }

  export interface FriendsTabDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FriendsTab that matches the filter.
     * @param {FriendsTabFindUniqueArgs} args - Arguments to find a FriendsTab
     * @example
     * // Get one FriendsTab
     * const friendsTab = await prisma.friendsTab.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FriendsTabFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FriendsTabFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FriendsTab'> extends True ? Prisma__FriendsTabClient<FriendsTabGetPayload<T>> : Prisma__FriendsTabClient<FriendsTabGetPayload<T> | null, null>

    /**
     * Find one FriendsTab that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FriendsTabFindUniqueOrThrowArgs} args - Arguments to find a FriendsTab
     * @example
     * // Get one FriendsTab
     * const friendsTab = await prisma.friendsTab.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FriendsTabFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FriendsTabFindUniqueOrThrowArgs>
    ): Prisma__FriendsTabClient<FriendsTabGetPayload<T>>

    /**
     * Find the first FriendsTab that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsTabFindFirstArgs} args - Arguments to find a FriendsTab
     * @example
     * // Get one FriendsTab
     * const friendsTab = await prisma.friendsTab.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FriendsTabFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FriendsTabFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FriendsTab'> extends True ? Prisma__FriendsTabClient<FriendsTabGetPayload<T>> : Prisma__FriendsTabClient<FriendsTabGetPayload<T> | null, null>

    /**
     * Find the first FriendsTab that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsTabFindFirstOrThrowArgs} args - Arguments to find a FriendsTab
     * @example
     * // Get one FriendsTab
     * const friendsTab = await prisma.friendsTab.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FriendsTabFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FriendsTabFindFirstOrThrowArgs>
    ): Prisma__FriendsTabClient<FriendsTabGetPayload<T>>

    /**
     * Find zero or more FriendsTabs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsTabFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FriendsTabs
     * const friendsTabs = await prisma.friendsTab.findMany()
     * 
     * // Get first 10 FriendsTabs
     * const friendsTabs = await prisma.friendsTab.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const friendsTabWithUser_idOnly = await prisma.friendsTab.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends FriendsTabFindManyArgs>(
      args?: SelectSubset<T, FriendsTabFindManyArgs>
    ): Prisma.PrismaPromise<Array<FriendsTabGetPayload<T>>>

    /**
     * Create a FriendsTab.
     * @param {FriendsTabCreateArgs} args - Arguments to create a FriendsTab.
     * @example
     * // Create one FriendsTab
     * const FriendsTab = await prisma.friendsTab.create({
     *   data: {
     *     // ... data to create a FriendsTab
     *   }
     * })
     * 
    **/
    create<T extends FriendsTabCreateArgs>(
      args: SelectSubset<T, FriendsTabCreateArgs>
    ): Prisma__FriendsTabClient<FriendsTabGetPayload<T>>

    /**
     * Create many FriendsTabs.
     *     @param {FriendsTabCreateManyArgs} args - Arguments to create many FriendsTabs.
     *     @example
     *     // Create many FriendsTabs
     *     const friendsTab = await prisma.friendsTab.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FriendsTabCreateManyArgs>(
      args?: SelectSubset<T, FriendsTabCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FriendsTab.
     * @param {FriendsTabDeleteArgs} args - Arguments to delete one FriendsTab.
     * @example
     * // Delete one FriendsTab
     * const FriendsTab = await prisma.friendsTab.delete({
     *   where: {
     *     // ... filter to delete one FriendsTab
     *   }
     * })
     * 
    **/
    delete<T extends FriendsTabDeleteArgs>(
      args: SelectSubset<T, FriendsTabDeleteArgs>
    ): Prisma__FriendsTabClient<FriendsTabGetPayload<T>>

    /**
     * Update one FriendsTab.
     * @param {FriendsTabUpdateArgs} args - Arguments to update one FriendsTab.
     * @example
     * // Update one FriendsTab
     * const friendsTab = await prisma.friendsTab.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FriendsTabUpdateArgs>(
      args: SelectSubset<T, FriendsTabUpdateArgs>
    ): Prisma__FriendsTabClient<FriendsTabGetPayload<T>>

    /**
     * Delete zero or more FriendsTabs.
     * @param {FriendsTabDeleteManyArgs} args - Arguments to filter FriendsTabs to delete.
     * @example
     * // Delete a few FriendsTabs
     * const { count } = await prisma.friendsTab.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FriendsTabDeleteManyArgs>(
      args?: SelectSubset<T, FriendsTabDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FriendsTabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsTabUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FriendsTabs
     * const friendsTab = await prisma.friendsTab.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FriendsTabUpdateManyArgs>(
      args: SelectSubset<T, FriendsTabUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FriendsTab.
     * @param {FriendsTabUpsertArgs} args - Arguments to update or create a FriendsTab.
     * @example
     * // Update or create a FriendsTab
     * const friendsTab = await prisma.friendsTab.upsert({
     *   create: {
     *     // ... data to create a FriendsTab
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FriendsTab we want to update
     *   }
     * })
    **/
    upsert<T extends FriendsTabUpsertArgs>(
      args: SelectSubset<T, FriendsTabUpsertArgs>
    ): Prisma__FriendsTabClient<FriendsTabGetPayload<T>>

    /**
     * Count the number of FriendsTabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsTabCountArgs} args - Arguments to filter FriendsTabs to count.
     * @example
     * // Count the number of FriendsTabs
     * const count = await prisma.friendsTab.count({
     *   where: {
     *     // ... the filter for the FriendsTabs we want to count
     *   }
     * })
    **/
    count<T extends FriendsTabCountArgs>(
      args?: Subset<T, FriendsTabCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FriendsTabCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FriendsTab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsTabAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FriendsTabAggregateArgs>(args: Subset<T, FriendsTabAggregateArgs>): Prisma.PrismaPromise<GetFriendsTabAggregateType<T>>

    /**
     * Group by FriendsTab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsTabGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FriendsTabGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FriendsTabGroupByArgs['orderBy'] }
        : { orderBy?: FriendsTabGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FriendsTabGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFriendsTabGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FriendsTab.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FriendsTabClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FriendsTab base type for findUnique actions
   */
  export type FriendsTabFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FriendsTab
     */
    select?: FriendsTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsTabInclude | null
    /**
     * Filter, which FriendsTab to fetch.
     */
    where: FriendsTabWhereUniqueInput
  }

  /**
   * FriendsTab findUnique
   */
  export interface FriendsTabFindUniqueArgs extends FriendsTabFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FriendsTab findUniqueOrThrow
   */
  export type FriendsTabFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FriendsTab
     */
    select?: FriendsTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsTabInclude | null
    /**
     * Filter, which FriendsTab to fetch.
     */
    where: FriendsTabWhereUniqueInput
  }


  /**
   * FriendsTab base type for findFirst actions
   */
  export type FriendsTabFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FriendsTab
     */
    select?: FriendsTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsTabInclude | null
    /**
     * Filter, which FriendsTab to fetch.
     */
    where?: FriendsTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FriendsTabs to fetch.
     */
    orderBy?: Enumerable<FriendsTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FriendsTabs.
     */
    cursor?: FriendsTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FriendsTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FriendsTabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FriendsTabs.
     */
    distinct?: Enumerable<FriendsTabScalarFieldEnum>
  }

  /**
   * FriendsTab findFirst
   */
  export interface FriendsTabFindFirstArgs extends FriendsTabFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FriendsTab findFirstOrThrow
   */
  export type FriendsTabFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FriendsTab
     */
    select?: FriendsTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsTabInclude | null
    /**
     * Filter, which FriendsTab to fetch.
     */
    where?: FriendsTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FriendsTabs to fetch.
     */
    orderBy?: Enumerable<FriendsTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FriendsTabs.
     */
    cursor?: FriendsTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FriendsTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FriendsTabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FriendsTabs.
     */
    distinct?: Enumerable<FriendsTabScalarFieldEnum>
  }


  /**
   * FriendsTab findMany
   */
  export type FriendsTabFindManyArgs = {
    /**
     * Select specific fields to fetch from the FriendsTab
     */
    select?: FriendsTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsTabInclude | null
    /**
     * Filter, which FriendsTabs to fetch.
     */
    where?: FriendsTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FriendsTabs to fetch.
     */
    orderBy?: Enumerable<FriendsTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FriendsTabs.
     */
    cursor?: FriendsTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FriendsTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FriendsTabs.
     */
    skip?: number
    distinct?: Enumerable<FriendsTabScalarFieldEnum>
  }


  /**
   * FriendsTab create
   */
  export type FriendsTabCreateArgs = {
    /**
     * Select specific fields to fetch from the FriendsTab
     */
    select?: FriendsTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsTabInclude | null
    /**
     * The data needed to create a FriendsTab.
     */
    data: XOR<FriendsTabCreateInput, FriendsTabUncheckedCreateInput>
  }


  /**
   * FriendsTab createMany
   */
  export type FriendsTabCreateManyArgs = {
    /**
     * The data used to create many FriendsTabs.
     */
    data: Enumerable<FriendsTabCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FriendsTab update
   */
  export type FriendsTabUpdateArgs = {
    /**
     * Select specific fields to fetch from the FriendsTab
     */
    select?: FriendsTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsTabInclude | null
    /**
     * The data needed to update a FriendsTab.
     */
    data: XOR<FriendsTabUpdateInput, FriendsTabUncheckedUpdateInput>
    /**
     * Choose, which FriendsTab to update.
     */
    where: FriendsTabWhereUniqueInput
  }


  /**
   * FriendsTab updateMany
   */
  export type FriendsTabUpdateManyArgs = {
    /**
     * The data used to update FriendsTabs.
     */
    data: XOR<FriendsTabUpdateManyMutationInput, FriendsTabUncheckedUpdateManyInput>
    /**
     * Filter which FriendsTabs to update
     */
    where?: FriendsTabWhereInput
  }


  /**
   * FriendsTab upsert
   */
  export type FriendsTabUpsertArgs = {
    /**
     * Select specific fields to fetch from the FriendsTab
     */
    select?: FriendsTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsTabInclude | null
    /**
     * The filter to search for the FriendsTab to update in case it exists.
     */
    where: FriendsTabWhereUniqueInput
    /**
     * In case the FriendsTab found by the `where` argument doesn't exist, create a new FriendsTab with this data.
     */
    create: XOR<FriendsTabCreateInput, FriendsTabUncheckedCreateInput>
    /**
     * In case the FriendsTab was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FriendsTabUpdateInput, FriendsTabUncheckedUpdateInput>
  }


  /**
   * FriendsTab delete
   */
  export type FriendsTabDeleteArgs = {
    /**
     * Select specific fields to fetch from the FriendsTab
     */
    select?: FriendsTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsTabInclude | null
    /**
     * Filter which FriendsTab to delete.
     */
    where: FriendsTabWhereUniqueInput
  }


  /**
   * FriendsTab deleteMany
   */
  export type FriendsTabDeleteManyArgs = {
    /**
     * Filter which FriendsTabs to delete
     */
    where?: FriendsTabWhereInput
  }


  /**
   * FriendsTab without action
   */
  export type FriendsTabArgs = {
    /**
     * Select specific fields to fetch from the FriendsTab
     */
    select?: FriendsTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsTabInclude | null
  }



  /**
   * Model PrivateMessage
   */


  export type AggregatePrivateMessage = {
    _count: PrivateMessageCountAggregateOutputType | null
    _min: PrivateMessageMinAggregateOutputType | null
    _max: PrivateMessageMaxAggregateOutputType | null
  }

  export type PrivateMessageMinAggregateOutputType = {
    id: string | null
    dateCreated: Date | null
    content: string | null
    seen: boolean | null
    chatRoom_id: string | null
    sender_id: string | null
    receiver_id: string | null
  }

  export type PrivateMessageMaxAggregateOutputType = {
    id: string | null
    dateCreated: Date | null
    content: string | null
    seen: boolean | null
    chatRoom_id: string | null
    sender_id: string | null
    receiver_id: string | null
  }

  export type PrivateMessageCountAggregateOutputType = {
    id: number
    dateCreated: number
    content: number
    seen: number
    chatRoom_id: number
    sender_id: number
    receiver_id: number
    _all: number
  }


  export type PrivateMessageMinAggregateInputType = {
    id?: true
    dateCreated?: true
    content?: true
    seen?: true
    chatRoom_id?: true
    sender_id?: true
    receiver_id?: true
  }

  export type PrivateMessageMaxAggregateInputType = {
    id?: true
    dateCreated?: true
    content?: true
    seen?: true
    chatRoom_id?: true
    sender_id?: true
    receiver_id?: true
  }

  export type PrivateMessageCountAggregateInputType = {
    id?: true
    dateCreated?: true
    content?: true
    seen?: true
    chatRoom_id?: true
    sender_id?: true
    receiver_id?: true
    _all?: true
  }

  export type PrivateMessageAggregateArgs = {
    /**
     * Filter which PrivateMessage to aggregate.
     */
    where?: PrivateMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivateMessages to fetch.
     */
    orderBy?: Enumerable<PrivateMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrivateMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivateMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivateMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PrivateMessages
    **/
    _count?: true | PrivateMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrivateMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrivateMessageMaxAggregateInputType
  }

  export type GetPrivateMessageAggregateType<T extends PrivateMessageAggregateArgs> = {
        [P in keyof T & keyof AggregatePrivateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrivateMessage[P]>
      : GetScalarType<T[P], AggregatePrivateMessage[P]>
  }




  export type PrivateMessageGroupByArgs = {
    where?: PrivateMessageWhereInput
    orderBy?: Enumerable<PrivateMessageOrderByWithAggregationInput>
    by: PrivateMessageScalarFieldEnum[]
    having?: PrivateMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrivateMessageCountAggregateInputType | true
    _min?: PrivateMessageMinAggregateInputType
    _max?: PrivateMessageMaxAggregateInputType
  }


  export type PrivateMessageGroupByOutputType = {
    id: string
    dateCreated: Date
    content: string
    seen: boolean
    chatRoom_id: string
    sender_id: string
    receiver_id: string
    _count: PrivateMessageCountAggregateOutputType | null
    _min: PrivateMessageMinAggregateOutputType | null
    _max: PrivateMessageMaxAggregateOutputType | null
  }

  type GetPrivateMessageGroupByPayload<T extends PrivateMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PrivateMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrivateMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrivateMessageGroupByOutputType[P]>
            : GetScalarType<T[P], PrivateMessageGroupByOutputType[P]>
        }
      >
    >


  export type PrivateMessageSelect = {
    id?: boolean
    dateCreated?: boolean
    content?: boolean
    seen?: boolean
    chatRoom_id?: boolean
    sender_id?: boolean
    receiver_id?: boolean
    sender?: boolean | UserArgs
    receiver?: boolean | UserArgs
    chatRoom?: boolean | PrivateChatRoomArgs
  }


  export type PrivateMessageInclude = {
    sender?: boolean | UserArgs
    receiver?: boolean | UserArgs
    chatRoom?: boolean | PrivateChatRoomArgs
  }

  export type PrivateMessageGetPayload<S extends boolean | null | undefined | PrivateMessageArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PrivateMessage :
    S extends undefined ? never :
    S extends { include: any } & (PrivateMessageArgs | PrivateMessageFindManyArgs)
    ? PrivateMessage  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'sender' ? UserGetPayload<S['include'][P]> :
        P extends 'receiver' ? UserGetPayload<S['include'][P]> :
        P extends 'chatRoom' ? PrivateChatRoomGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PrivateMessageArgs | PrivateMessageFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'sender' ? UserGetPayload<S['select'][P]> :
        P extends 'receiver' ? UserGetPayload<S['select'][P]> :
        P extends 'chatRoom' ? PrivateChatRoomGetPayload<S['select'][P]> :  P extends keyof PrivateMessage ? PrivateMessage[P] : never
  } 
      : PrivateMessage


  type PrivateMessageCountArgs = 
    Omit<PrivateMessageFindManyArgs, 'select' | 'include'> & {
      select?: PrivateMessageCountAggregateInputType | true
    }

  export interface PrivateMessageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one PrivateMessage that matches the filter.
     * @param {PrivateMessageFindUniqueArgs} args - Arguments to find a PrivateMessage
     * @example
     * // Get one PrivateMessage
     * const privateMessage = await prisma.privateMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PrivateMessageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PrivateMessageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PrivateMessage'> extends True ? Prisma__PrivateMessageClient<PrivateMessageGetPayload<T>> : Prisma__PrivateMessageClient<PrivateMessageGetPayload<T> | null, null>

    /**
     * Find one PrivateMessage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PrivateMessageFindUniqueOrThrowArgs} args - Arguments to find a PrivateMessage
     * @example
     * // Get one PrivateMessage
     * const privateMessage = await prisma.privateMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PrivateMessageFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PrivateMessageFindUniqueOrThrowArgs>
    ): Prisma__PrivateMessageClient<PrivateMessageGetPayload<T>>

    /**
     * Find the first PrivateMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateMessageFindFirstArgs} args - Arguments to find a PrivateMessage
     * @example
     * // Get one PrivateMessage
     * const privateMessage = await prisma.privateMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PrivateMessageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PrivateMessageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PrivateMessage'> extends True ? Prisma__PrivateMessageClient<PrivateMessageGetPayload<T>> : Prisma__PrivateMessageClient<PrivateMessageGetPayload<T> | null, null>

    /**
     * Find the first PrivateMessage that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateMessageFindFirstOrThrowArgs} args - Arguments to find a PrivateMessage
     * @example
     * // Get one PrivateMessage
     * const privateMessage = await prisma.privateMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PrivateMessageFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PrivateMessageFindFirstOrThrowArgs>
    ): Prisma__PrivateMessageClient<PrivateMessageGetPayload<T>>

    /**
     * Find zero or more PrivateMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateMessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PrivateMessages
     * const privateMessages = await prisma.privateMessage.findMany()
     * 
     * // Get first 10 PrivateMessages
     * const privateMessages = await prisma.privateMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const privateMessageWithIdOnly = await prisma.privateMessage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PrivateMessageFindManyArgs>(
      args?: SelectSubset<T, PrivateMessageFindManyArgs>
    ): Prisma.PrismaPromise<Array<PrivateMessageGetPayload<T>>>

    /**
     * Create a PrivateMessage.
     * @param {PrivateMessageCreateArgs} args - Arguments to create a PrivateMessage.
     * @example
     * // Create one PrivateMessage
     * const PrivateMessage = await prisma.privateMessage.create({
     *   data: {
     *     // ... data to create a PrivateMessage
     *   }
     * })
     * 
    **/
    create<T extends PrivateMessageCreateArgs>(
      args: SelectSubset<T, PrivateMessageCreateArgs>
    ): Prisma__PrivateMessageClient<PrivateMessageGetPayload<T>>

    /**
     * Create many PrivateMessages.
     *     @param {PrivateMessageCreateManyArgs} args - Arguments to create many PrivateMessages.
     *     @example
     *     // Create many PrivateMessages
     *     const privateMessage = await prisma.privateMessage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PrivateMessageCreateManyArgs>(
      args?: SelectSubset<T, PrivateMessageCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PrivateMessage.
     * @param {PrivateMessageDeleteArgs} args - Arguments to delete one PrivateMessage.
     * @example
     * // Delete one PrivateMessage
     * const PrivateMessage = await prisma.privateMessage.delete({
     *   where: {
     *     // ... filter to delete one PrivateMessage
     *   }
     * })
     * 
    **/
    delete<T extends PrivateMessageDeleteArgs>(
      args: SelectSubset<T, PrivateMessageDeleteArgs>
    ): Prisma__PrivateMessageClient<PrivateMessageGetPayload<T>>

    /**
     * Update one PrivateMessage.
     * @param {PrivateMessageUpdateArgs} args - Arguments to update one PrivateMessage.
     * @example
     * // Update one PrivateMessage
     * const privateMessage = await prisma.privateMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PrivateMessageUpdateArgs>(
      args: SelectSubset<T, PrivateMessageUpdateArgs>
    ): Prisma__PrivateMessageClient<PrivateMessageGetPayload<T>>

    /**
     * Delete zero or more PrivateMessages.
     * @param {PrivateMessageDeleteManyArgs} args - Arguments to filter PrivateMessages to delete.
     * @example
     * // Delete a few PrivateMessages
     * const { count } = await prisma.privateMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PrivateMessageDeleteManyArgs>(
      args?: SelectSubset<T, PrivateMessageDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrivateMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PrivateMessages
     * const privateMessage = await prisma.privateMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PrivateMessageUpdateManyArgs>(
      args: SelectSubset<T, PrivateMessageUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PrivateMessage.
     * @param {PrivateMessageUpsertArgs} args - Arguments to update or create a PrivateMessage.
     * @example
     * // Update or create a PrivateMessage
     * const privateMessage = await prisma.privateMessage.upsert({
     *   create: {
     *     // ... data to create a PrivateMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PrivateMessage we want to update
     *   }
     * })
    **/
    upsert<T extends PrivateMessageUpsertArgs>(
      args: SelectSubset<T, PrivateMessageUpsertArgs>
    ): Prisma__PrivateMessageClient<PrivateMessageGetPayload<T>>

    /**
     * Count the number of PrivateMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateMessageCountArgs} args - Arguments to filter PrivateMessages to count.
     * @example
     * // Count the number of PrivateMessages
     * const count = await prisma.privateMessage.count({
     *   where: {
     *     // ... the filter for the PrivateMessages we want to count
     *   }
     * })
    **/
    count<T extends PrivateMessageCountArgs>(
      args?: Subset<T, PrivateMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrivateMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PrivateMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrivateMessageAggregateArgs>(args: Subset<T, PrivateMessageAggregateArgs>): Prisma.PrismaPromise<GetPrivateMessageAggregateType<T>>

    /**
     * Group by PrivateMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrivateMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrivateMessageGroupByArgs['orderBy'] }
        : { orderBy?: PrivateMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrivateMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrivateMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for PrivateMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PrivateMessageClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    sender<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    receiver<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    chatRoom<T extends PrivateChatRoomArgs= {}>(args?: Subset<T, PrivateChatRoomArgs>): Prisma__PrivateChatRoomClient<PrivateChatRoomGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * PrivateMessage base type for findUnique actions
   */
  export type PrivateMessageFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the PrivateMessage
     */
    select?: PrivateMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateMessageInclude | null
    /**
     * Filter, which PrivateMessage to fetch.
     */
    where: PrivateMessageWhereUniqueInput
  }

  /**
   * PrivateMessage findUnique
   */
  export interface PrivateMessageFindUniqueArgs extends PrivateMessageFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PrivateMessage findUniqueOrThrow
   */
  export type PrivateMessageFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the PrivateMessage
     */
    select?: PrivateMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateMessageInclude | null
    /**
     * Filter, which PrivateMessage to fetch.
     */
    where: PrivateMessageWhereUniqueInput
  }


  /**
   * PrivateMessage base type for findFirst actions
   */
  export type PrivateMessageFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the PrivateMessage
     */
    select?: PrivateMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateMessageInclude | null
    /**
     * Filter, which PrivateMessage to fetch.
     */
    where?: PrivateMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivateMessages to fetch.
     */
    orderBy?: Enumerable<PrivateMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrivateMessages.
     */
    cursor?: PrivateMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivateMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivateMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrivateMessages.
     */
    distinct?: Enumerable<PrivateMessageScalarFieldEnum>
  }

  /**
   * PrivateMessage findFirst
   */
  export interface PrivateMessageFindFirstArgs extends PrivateMessageFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PrivateMessage findFirstOrThrow
   */
  export type PrivateMessageFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the PrivateMessage
     */
    select?: PrivateMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateMessageInclude | null
    /**
     * Filter, which PrivateMessage to fetch.
     */
    where?: PrivateMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivateMessages to fetch.
     */
    orderBy?: Enumerable<PrivateMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrivateMessages.
     */
    cursor?: PrivateMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivateMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivateMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrivateMessages.
     */
    distinct?: Enumerable<PrivateMessageScalarFieldEnum>
  }


  /**
   * PrivateMessage findMany
   */
  export type PrivateMessageFindManyArgs = {
    /**
     * Select specific fields to fetch from the PrivateMessage
     */
    select?: PrivateMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateMessageInclude | null
    /**
     * Filter, which PrivateMessages to fetch.
     */
    where?: PrivateMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivateMessages to fetch.
     */
    orderBy?: Enumerable<PrivateMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PrivateMessages.
     */
    cursor?: PrivateMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivateMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivateMessages.
     */
    skip?: number
    distinct?: Enumerable<PrivateMessageScalarFieldEnum>
  }


  /**
   * PrivateMessage create
   */
  export type PrivateMessageCreateArgs = {
    /**
     * Select specific fields to fetch from the PrivateMessage
     */
    select?: PrivateMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateMessageInclude | null
    /**
     * The data needed to create a PrivateMessage.
     */
    data: XOR<PrivateMessageCreateInput, PrivateMessageUncheckedCreateInput>
  }


  /**
   * PrivateMessage createMany
   */
  export type PrivateMessageCreateManyArgs = {
    /**
     * The data used to create many PrivateMessages.
     */
    data: Enumerable<PrivateMessageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PrivateMessage update
   */
  export type PrivateMessageUpdateArgs = {
    /**
     * Select specific fields to fetch from the PrivateMessage
     */
    select?: PrivateMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateMessageInclude | null
    /**
     * The data needed to update a PrivateMessage.
     */
    data: XOR<PrivateMessageUpdateInput, PrivateMessageUncheckedUpdateInput>
    /**
     * Choose, which PrivateMessage to update.
     */
    where: PrivateMessageWhereUniqueInput
  }


  /**
   * PrivateMessage updateMany
   */
  export type PrivateMessageUpdateManyArgs = {
    /**
     * The data used to update PrivateMessages.
     */
    data: XOR<PrivateMessageUpdateManyMutationInput, PrivateMessageUncheckedUpdateManyInput>
    /**
     * Filter which PrivateMessages to update
     */
    where?: PrivateMessageWhereInput
  }


  /**
   * PrivateMessage upsert
   */
  export type PrivateMessageUpsertArgs = {
    /**
     * Select specific fields to fetch from the PrivateMessage
     */
    select?: PrivateMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateMessageInclude | null
    /**
     * The filter to search for the PrivateMessage to update in case it exists.
     */
    where: PrivateMessageWhereUniqueInput
    /**
     * In case the PrivateMessage found by the `where` argument doesn't exist, create a new PrivateMessage with this data.
     */
    create: XOR<PrivateMessageCreateInput, PrivateMessageUncheckedCreateInput>
    /**
     * In case the PrivateMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrivateMessageUpdateInput, PrivateMessageUncheckedUpdateInput>
  }


  /**
   * PrivateMessage delete
   */
  export type PrivateMessageDeleteArgs = {
    /**
     * Select specific fields to fetch from the PrivateMessage
     */
    select?: PrivateMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateMessageInclude | null
    /**
     * Filter which PrivateMessage to delete.
     */
    where: PrivateMessageWhereUniqueInput
  }


  /**
   * PrivateMessage deleteMany
   */
  export type PrivateMessageDeleteManyArgs = {
    /**
     * Filter which PrivateMessages to delete
     */
    where?: PrivateMessageWhereInput
  }


  /**
   * PrivateMessage without action
   */
  export type PrivateMessageArgs = {
    /**
     * Select specific fields to fetch from the PrivateMessage
     */
    select?: PrivateMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateMessageInclude | null
  }



  /**
   * Model PrivateChatRoom
   */


  export type AggregatePrivateChatRoom = {
    _count: PrivateChatRoomCountAggregateOutputType | null
    _min: PrivateChatRoomMinAggregateOutputType | null
    _max: PrivateChatRoomMaxAggregateOutputType | null
  }

  export type PrivateChatRoomMinAggregateOutputType = {
    id: string | null
    sender_id: string | null
    receiver_id: string | null
    lastUpdatedTime: Date | null
    blocked: boolean | null
  }

  export type PrivateChatRoomMaxAggregateOutputType = {
    id: string | null
    sender_id: string | null
    receiver_id: string | null
    lastUpdatedTime: Date | null
    blocked: boolean | null
  }

  export type PrivateChatRoomCountAggregateOutputType = {
    id: number
    sender_id: number
    receiver_id: number
    lastUpdatedTime: number
    blocked: number
    _all: number
  }


  export type PrivateChatRoomMinAggregateInputType = {
    id?: true
    sender_id?: true
    receiver_id?: true
    lastUpdatedTime?: true
    blocked?: true
  }

  export type PrivateChatRoomMaxAggregateInputType = {
    id?: true
    sender_id?: true
    receiver_id?: true
    lastUpdatedTime?: true
    blocked?: true
  }

  export type PrivateChatRoomCountAggregateInputType = {
    id?: true
    sender_id?: true
    receiver_id?: true
    lastUpdatedTime?: true
    blocked?: true
    _all?: true
  }

  export type PrivateChatRoomAggregateArgs = {
    /**
     * Filter which PrivateChatRoom to aggregate.
     */
    where?: PrivateChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivateChatRooms to fetch.
     */
    orderBy?: Enumerable<PrivateChatRoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrivateChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivateChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivateChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PrivateChatRooms
    **/
    _count?: true | PrivateChatRoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrivateChatRoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrivateChatRoomMaxAggregateInputType
  }

  export type GetPrivateChatRoomAggregateType<T extends PrivateChatRoomAggregateArgs> = {
        [P in keyof T & keyof AggregatePrivateChatRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrivateChatRoom[P]>
      : GetScalarType<T[P], AggregatePrivateChatRoom[P]>
  }




  export type PrivateChatRoomGroupByArgs = {
    where?: PrivateChatRoomWhereInput
    orderBy?: Enumerable<PrivateChatRoomOrderByWithAggregationInput>
    by: PrivateChatRoomScalarFieldEnum[]
    having?: PrivateChatRoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrivateChatRoomCountAggregateInputType | true
    _min?: PrivateChatRoomMinAggregateInputType
    _max?: PrivateChatRoomMaxAggregateInputType
  }


  export type PrivateChatRoomGroupByOutputType = {
    id: string
    sender_id: string
    receiver_id: string
    lastUpdatedTime: Date
    blocked: boolean
    _count: PrivateChatRoomCountAggregateOutputType | null
    _min: PrivateChatRoomMinAggregateOutputType | null
    _max: PrivateChatRoomMaxAggregateOutputType | null
  }

  type GetPrivateChatRoomGroupByPayload<T extends PrivateChatRoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PrivateChatRoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrivateChatRoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrivateChatRoomGroupByOutputType[P]>
            : GetScalarType<T[P], PrivateChatRoomGroupByOutputType[P]>
        }
      >
    >


  export type PrivateChatRoomSelect = {
    id?: boolean
    sender_id?: boolean
    receiver_id?: boolean
    lastUpdatedTime?: boolean
    blocked?: boolean
    messages?: boolean | PrivateChatRoom$messagesArgs
    sender?: boolean | UserArgs
    receiver?: boolean | UserArgs
    _count?: boolean | PrivateChatRoomCountOutputTypeArgs
  }


  export type PrivateChatRoomInclude = {
    messages?: boolean | PrivateChatRoom$messagesArgs
    sender?: boolean | UserArgs
    receiver?: boolean | UserArgs
    _count?: boolean | PrivateChatRoomCountOutputTypeArgs
  }

  export type PrivateChatRoomGetPayload<S extends boolean | null | undefined | PrivateChatRoomArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PrivateChatRoom :
    S extends undefined ? never :
    S extends { include: any } & (PrivateChatRoomArgs | PrivateChatRoomFindManyArgs)
    ? PrivateChatRoom  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'messages' ? Array < PrivateMessageGetPayload<S['include'][P]>>  :
        P extends 'sender' ? UserGetPayload<S['include'][P]> :
        P extends 'receiver' ? UserGetPayload<S['include'][P]> :
        P extends '_count' ? PrivateChatRoomCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PrivateChatRoomArgs | PrivateChatRoomFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'messages' ? Array < PrivateMessageGetPayload<S['select'][P]>>  :
        P extends 'sender' ? UserGetPayload<S['select'][P]> :
        P extends 'receiver' ? UserGetPayload<S['select'][P]> :
        P extends '_count' ? PrivateChatRoomCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof PrivateChatRoom ? PrivateChatRoom[P] : never
  } 
      : PrivateChatRoom


  type PrivateChatRoomCountArgs = 
    Omit<PrivateChatRoomFindManyArgs, 'select' | 'include'> & {
      select?: PrivateChatRoomCountAggregateInputType | true
    }

  export interface PrivateChatRoomDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one PrivateChatRoom that matches the filter.
     * @param {PrivateChatRoomFindUniqueArgs} args - Arguments to find a PrivateChatRoom
     * @example
     * // Get one PrivateChatRoom
     * const privateChatRoom = await prisma.privateChatRoom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PrivateChatRoomFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PrivateChatRoomFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PrivateChatRoom'> extends True ? Prisma__PrivateChatRoomClient<PrivateChatRoomGetPayload<T>> : Prisma__PrivateChatRoomClient<PrivateChatRoomGetPayload<T> | null, null>

    /**
     * Find one PrivateChatRoom that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PrivateChatRoomFindUniqueOrThrowArgs} args - Arguments to find a PrivateChatRoom
     * @example
     * // Get one PrivateChatRoom
     * const privateChatRoom = await prisma.privateChatRoom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PrivateChatRoomFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PrivateChatRoomFindUniqueOrThrowArgs>
    ): Prisma__PrivateChatRoomClient<PrivateChatRoomGetPayload<T>>

    /**
     * Find the first PrivateChatRoom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateChatRoomFindFirstArgs} args - Arguments to find a PrivateChatRoom
     * @example
     * // Get one PrivateChatRoom
     * const privateChatRoom = await prisma.privateChatRoom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PrivateChatRoomFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PrivateChatRoomFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PrivateChatRoom'> extends True ? Prisma__PrivateChatRoomClient<PrivateChatRoomGetPayload<T>> : Prisma__PrivateChatRoomClient<PrivateChatRoomGetPayload<T> | null, null>

    /**
     * Find the first PrivateChatRoom that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateChatRoomFindFirstOrThrowArgs} args - Arguments to find a PrivateChatRoom
     * @example
     * // Get one PrivateChatRoom
     * const privateChatRoom = await prisma.privateChatRoom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PrivateChatRoomFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PrivateChatRoomFindFirstOrThrowArgs>
    ): Prisma__PrivateChatRoomClient<PrivateChatRoomGetPayload<T>>

    /**
     * Find zero or more PrivateChatRooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateChatRoomFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PrivateChatRooms
     * const privateChatRooms = await prisma.privateChatRoom.findMany()
     * 
     * // Get first 10 PrivateChatRooms
     * const privateChatRooms = await prisma.privateChatRoom.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const privateChatRoomWithIdOnly = await prisma.privateChatRoom.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PrivateChatRoomFindManyArgs>(
      args?: SelectSubset<T, PrivateChatRoomFindManyArgs>
    ): Prisma.PrismaPromise<Array<PrivateChatRoomGetPayload<T>>>

    /**
     * Create a PrivateChatRoom.
     * @param {PrivateChatRoomCreateArgs} args - Arguments to create a PrivateChatRoom.
     * @example
     * // Create one PrivateChatRoom
     * const PrivateChatRoom = await prisma.privateChatRoom.create({
     *   data: {
     *     // ... data to create a PrivateChatRoom
     *   }
     * })
     * 
    **/
    create<T extends PrivateChatRoomCreateArgs>(
      args: SelectSubset<T, PrivateChatRoomCreateArgs>
    ): Prisma__PrivateChatRoomClient<PrivateChatRoomGetPayload<T>>

    /**
     * Create many PrivateChatRooms.
     *     @param {PrivateChatRoomCreateManyArgs} args - Arguments to create many PrivateChatRooms.
     *     @example
     *     // Create many PrivateChatRooms
     *     const privateChatRoom = await prisma.privateChatRoom.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PrivateChatRoomCreateManyArgs>(
      args?: SelectSubset<T, PrivateChatRoomCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PrivateChatRoom.
     * @param {PrivateChatRoomDeleteArgs} args - Arguments to delete one PrivateChatRoom.
     * @example
     * // Delete one PrivateChatRoom
     * const PrivateChatRoom = await prisma.privateChatRoom.delete({
     *   where: {
     *     // ... filter to delete one PrivateChatRoom
     *   }
     * })
     * 
    **/
    delete<T extends PrivateChatRoomDeleteArgs>(
      args: SelectSubset<T, PrivateChatRoomDeleteArgs>
    ): Prisma__PrivateChatRoomClient<PrivateChatRoomGetPayload<T>>

    /**
     * Update one PrivateChatRoom.
     * @param {PrivateChatRoomUpdateArgs} args - Arguments to update one PrivateChatRoom.
     * @example
     * // Update one PrivateChatRoom
     * const privateChatRoom = await prisma.privateChatRoom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PrivateChatRoomUpdateArgs>(
      args: SelectSubset<T, PrivateChatRoomUpdateArgs>
    ): Prisma__PrivateChatRoomClient<PrivateChatRoomGetPayload<T>>

    /**
     * Delete zero or more PrivateChatRooms.
     * @param {PrivateChatRoomDeleteManyArgs} args - Arguments to filter PrivateChatRooms to delete.
     * @example
     * // Delete a few PrivateChatRooms
     * const { count } = await prisma.privateChatRoom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PrivateChatRoomDeleteManyArgs>(
      args?: SelectSubset<T, PrivateChatRoomDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrivateChatRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateChatRoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PrivateChatRooms
     * const privateChatRoom = await prisma.privateChatRoom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PrivateChatRoomUpdateManyArgs>(
      args: SelectSubset<T, PrivateChatRoomUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PrivateChatRoom.
     * @param {PrivateChatRoomUpsertArgs} args - Arguments to update or create a PrivateChatRoom.
     * @example
     * // Update or create a PrivateChatRoom
     * const privateChatRoom = await prisma.privateChatRoom.upsert({
     *   create: {
     *     // ... data to create a PrivateChatRoom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PrivateChatRoom we want to update
     *   }
     * })
    **/
    upsert<T extends PrivateChatRoomUpsertArgs>(
      args: SelectSubset<T, PrivateChatRoomUpsertArgs>
    ): Prisma__PrivateChatRoomClient<PrivateChatRoomGetPayload<T>>

    /**
     * Count the number of PrivateChatRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateChatRoomCountArgs} args - Arguments to filter PrivateChatRooms to count.
     * @example
     * // Count the number of PrivateChatRooms
     * const count = await prisma.privateChatRoom.count({
     *   where: {
     *     // ... the filter for the PrivateChatRooms we want to count
     *   }
     * })
    **/
    count<T extends PrivateChatRoomCountArgs>(
      args?: Subset<T, PrivateChatRoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrivateChatRoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PrivateChatRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateChatRoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrivateChatRoomAggregateArgs>(args: Subset<T, PrivateChatRoomAggregateArgs>): Prisma.PrismaPromise<GetPrivateChatRoomAggregateType<T>>

    /**
     * Group by PrivateChatRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateChatRoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrivateChatRoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrivateChatRoomGroupByArgs['orderBy'] }
        : { orderBy?: PrivateChatRoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrivateChatRoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrivateChatRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for PrivateChatRoom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PrivateChatRoomClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    messages<T extends PrivateChatRoom$messagesArgs= {}>(args?: Subset<T, PrivateChatRoom$messagesArgs>): Prisma.PrismaPromise<Array<PrivateMessageGetPayload<T>>| Null>;

    sender<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    receiver<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * PrivateChatRoom base type for findUnique actions
   */
  export type PrivateChatRoomFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the PrivateChatRoom
     */
    select?: PrivateChatRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateChatRoomInclude | null
    /**
     * Filter, which PrivateChatRoom to fetch.
     */
    where: PrivateChatRoomWhereUniqueInput
  }

  /**
   * PrivateChatRoom findUnique
   */
  export interface PrivateChatRoomFindUniqueArgs extends PrivateChatRoomFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PrivateChatRoom findUniqueOrThrow
   */
  export type PrivateChatRoomFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the PrivateChatRoom
     */
    select?: PrivateChatRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateChatRoomInclude | null
    /**
     * Filter, which PrivateChatRoom to fetch.
     */
    where: PrivateChatRoomWhereUniqueInput
  }


  /**
   * PrivateChatRoom base type for findFirst actions
   */
  export type PrivateChatRoomFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the PrivateChatRoom
     */
    select?: PrivateChatRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateChatRoomInclude | null
    /**
     * Filter, which PrivateChatRoom to fetch.
     */
    where?: PrivateChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivateChatRooms to fetch.
     */
    orderBy?: Enumerable<PrivateChatRoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrivateChatRooms.
     */
    cursor?: PrivateChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivateChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivateChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrivateChatRooms.
     */
    distinct?: Enumerable<PrivateChatRoomScalarFieldEnum>
  }

  /**
   * PrivateChatRoom findFirst
   */
  export interface PrivateChatRoomFindFirstArgs extends PrivateChatRoomFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PrivateChatRoom findFirstOrThrow
   */
  export type PrivateChatRoomFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the PrivateChatRoom
     */
    select?: PrivateChatRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateChatRoomInclude | null
    /**
     * Filter, which PrivateChatRoom to fetch.
     */
    where?: PrivateChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivateChatRooms to fetch.
     */
    orderBy?: Enumerable<PrivateChatRoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrivateChatRooms.
     */
    cursor?: PrivateChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivateChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivateChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrivateChatRooms.
     */
    distinct?: Enumerable<PrivateChatRoomScalarFieldEnum>
  }


  /**
   * PrivateChatRoom findMany
   */
  export type PrivateChatRoomFindManyArgs = {
    /**
     * Select specific fields to fetch from the PrivateChatRoom
     */
    select?: PrivateChatRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateChatRoomInclude | null
    /**
     * Filter, which PrivateChatRooms to fetch.
     */
    where?: PrivateChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivateChatRooms to fetch.
     */
    orderBy?: Enumerable<PrivateChatRoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PrivateChatRooms.
     */
    cursor?: PrivateChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivateChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivateChatRooms.
     */
    skip?: number
    distinct?: Enumerable<PrivateChatRoomScalarFieldEnum>
  }


  /**
   * PrivateChatRoom create
   */
  export type PrivateChatRoomCreateArgs = {
    /**
     * Select specific fields to fetch from the PrivateChatRoom
     */
    select?: PrivateChatRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateChatRoomInclude | null
    /**
     * The data needed to create a PrivateChatRoom.
     */
    data: XOR<PrivateChatRoomCreateInput, PrivateChatRoomUncheckedCreateInput>
  }


  /**
   * PrivateChatRoom createMany
   */
  export type PrivateChatRoomCreateManyArgs = {
    /**
     * The data used to create many PrivateChatRooms.
     */
    data: Enumerable<PrivateChatRoomCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PrivateChatRoom update
   */
  export type PrivateChatRoomUpdateArgs = {
    /**
     * Select specific fields to fetch from the PrivateChatRoom
     */
    select?: PrivateChatRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateChatRoomInclude | null
    /**
     * The data needed to update a PrivateChatRoom.
     */
    data: XOR<PrivateChatRoomUpdateInput, PrivateChatRoomUncheckedUpdateInput>
    /**
     * Choose, which PrivateChatRoom to update.
     */
    where: PrivateChatRoomWhereUniqueInput
  }


  /**
   * PrivateChatRoom updateMany
   */
  export type PrivateChatRoomUpdateManyArgs = {
    /**
     * The data used to update PrivateChatRooms.
     */
    data: XOR<PrivateChatRoomUpdateManyMutationInput, PrivateChatRoomUncheckedUpdateManyInput>
    /**
     * Filter which PrivateChatRooms to update
     */
    where?: PrivateChatRoomWhereInput
  }


  /**
   * PrivateChatRoom upsert
   */
  export type PrivateChatRoomUpsertArgs = {
    /**
     * Select specific fields to fetch from the PrivateChatRoom
     */
    select?: PrivateChatRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateChatRoomInclude | null
    /**
     * The filter to search for the PrivateChatRoom to update in case it exists.
     */
    where: PrivateChatRoomWhereUniqueInput
    /**
     * In case the PrivateChatRoom found by the `where` argument doesn't exist, create a new PrivateChatRoom with this data.
     */
    create: XOR<PrivateChatRoomCreateInput, PrivateChatRoomUncheckedCreateInput>
    /**
     * In case the PrivateChatRoom was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrivateChatRoomUpdateInput, PrivateChatRoomUncheckedUpdateInput>
  }


  /**
   * PrivateChatRoom delete
   */
  export type PrivateChatRoomDeleteArgs = {
    /**
     * Select specific fields to fetch from the PrivateChatRoom
     */
    select?: PrivateChatRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateChatRoomInclude | null
    /**
     * Filter which PrivateChatRoom to delete.
     */
    where: PrivateChatRoomWhereUniqueInput
  }


  /**
   * PrivateChatRoom deleteMany
   */
  export type PrivateChatRoomDeleteManyArgs = {
    /**
     * Filter which PrivateChatRooms to delete
     */
    where?: PrivateChatRoomWhereInput
  }


  /**
   * PrivateChatRoom.messages
   */
  export type PrivateChatRoom$messagesArgs = {
    /**
     * Select specific fields to fetch from the PrivateMessage
     */
    select?: PrivateMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateMessageInclude | null
    where?: PrivateMessageWhereInput
    orderBy?: Enumerable<PrivateMessageOrderByWithRelationInput>
    cursor?: PrivateMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PrivateMessageScalarFieldEnum>
  }


  /**
   * PrivateChatRoom without action
   */
  export type PrivateChatRoomArgs = {
    /**
     * Select specific fields to fetch from the PrivateChatRoom
     */
    select?: PrivateChatRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateChatRoomInclude | null
  }



  /**
   * Model BlockTab
   */


  export type AggregateBlockTab = {
    _count: BlockTabCountAggregateOutputType | null
    _min: BlockTabMinAggregateOutputType | null
    _max: BlockTabMaxAggregateOutputType | null
  }

  export type BlockTabMinAggregateOutputType = {
    user_id: string | null
    blockedUser_id: string | null
    uuid: string | null
  }

  export type BlockTabMaxAggregateOutputType = {
    user_id: string | null
    blockedUser_id: string | null
    uuid: string | null
  }

  export type BlockTabCountAggregateOutputType = {
    user_id: number
    blockedUser_id: number
    uuid: number
    _all: number
  }


  export type BlockTabMinAggregateInputType = {
    user_id?: true
    blockedUser_id?: true
    uuid?: true
  }

  export type BlockTabMaxAggregateInputType = {
    user_id?: true
    blockedUser_id?: true
    uuid?: true
  }

  export type BlockTabCountAggregateInputType = {
    user_id?: true
    blockedUser_id?: true
    uuid?: true
    _all?: true
  }

  export type BlockTabAggregateArgs = {
    /**
     * Filter which BlockTab to aggregate.
     */
    where?: BlockTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlockTabs to fetch.
     */
    orderBy?: Enumerable<BlockTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BlockTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlockTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlockTabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BlockTabs
    **/
    _count?: true | BlockTabCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlockTabMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlockTabMaxAggregateInputType
  }

  export type GetBlockTabAggregateType<T extends BlockTabAggregateArgs> = {
        [P in keyof T & keyof AggregateBlockTab]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlockTab[P]>
      : GetScalarType<T[P], AggregateBlockTab[P]>
  }




  export type BlockTabGroupByArgs = {
    where?: BlockTabWhereInput
    orderBy?: Enumerable<BlockTabOrderByWithAggregationInput>
    by: BlockTabScalarFieldEnum[]
    having?: BlockTabScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlockTabCountAggregateInputType | true
    _min?: BlockTabMinAggregateInputType
    _max?: BlockTabMaxAggregateInputType
  }


  export type BlockTabGroupByOutputType = {
    user_id: string
    blockedUser_id: string
    uuid: string
    _count: BlockTabCountAggregateOutputType | null
    _min: BlockTabMinAggregateOutputType | null
    _max: BlockTabMaxAggregateOutputType | null
  }

  type GetBlockTabGroupByPayload<T extends BlockTabGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BlockTabGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlockTabGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlockTabGroupByOutputType[P]>
            : GetScalarType<T[P], BlockTabGroupByOutputType[P]>
        }
      >
    >


  export type BlockTabSelect = {
    user_id?: boolean
    blockedUser_id?: boolean
    uuid?: boolean
    user?: boolean | UserArgs
  }


  export type BlockTabInclude = {
    user?: boolean | UserArgs
  }

  export type BlockTabGetPayload<S extends boolean | null | undefined | BlockTabArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BlockTab :
    S extends undefined ? never :
    S extends { include: any } & (BlockTabArgs | BlockTabFindManyArgs)
    ? BlockTab  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BlockTabArgs | BlockTabFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof BlockTab ? BlockTab[P] : never
  } 
      : BlockTab


  type BlockTabCountArgs = 
    Omit<BlockTabFindManyArgs, 'select' | 'include'> & {
      select?: BlockTabCountAggregateInputType | true
    }

  export interface BlockTabDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one BlockTab that matches the filter.
     * @param {BlockTabFindUniqueArgs} args - Arguments to find a BlockTab
     * @example
     * // Get one BlockTab
     * const blockTab = await prisma.blockTab.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BlockTabFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BlockTabFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BlockTab'> extends True ? Prisma__BlockTabClient<BlockTabGetPayload<T>> : Prisma__BlockTabClient<BlockTabGetPayload<T> | null, null>

    /**
     * Find one BlockTab that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BlockTabFindUniqueOrThrowArgs} args - Arguments to find a BlockTab
     * @example
     * // Get one BlockTab
     * const blockTab = await prisma.blockTab.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BlockTabFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BlockTabFindUniqueOrThrowArgs>
    ): Prisma__BlockTabClient<BlockTabGetPayload<T>>

    /**
     * Find the first BlockTab that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockTabFindFirstArgs} args - Arguments to find a BlockTab
     * @example
     * // Get one BlockTab
     * const blockTab = await prisma.blockTab.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BlockTabFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BlockTabFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BlockTab'> extends True ? Prisma__BlockTabClient<BlockTabGetPayload<T>> : Prisma__BlockTabClient<BlockTabGetPayload<T> | null, null>

    /**
     * Find the first BlockTab that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockTabFindFirstOrThrowArgs} args - Arguments to find a BlockTab
     * @example
     * // Get one BlockTab
     * const blockTab = await prisma.blockTab.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BlockTabFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BlockTabFindFirstOrThrowArgs>
    ): Prisma__BlockTabClient<BlockTabGetPayload<T>>

    /**
     * Find zero or more BlockTabs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockTabFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BlockTabs
     * const blockTabs = await prisma.blockTab.findMany()
     * 
     * // Get first 10 BlockTabs
     * const blockTabs = await prisma.blockTab.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const blockTabWithUser_idOnly = await prisma.blockTab.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends BlockTabFindManyArgs>(
      args?: SelectSubset<T, BlockTabFindManyArgs>
    ): Prisma.PrismaPromise<Array<BlockTabGetPayload<T>>>

    /**
     * Create a BlockTab.
     * @param {BlockTabCreateArgs} args - Arguments to create a BlockTab.
     * @example
     * // Create one BlockTab
     * const BlockTab = await prisma.blockTab.create({
     *   data: {
     *     // ... data to create a BlockTab
     *   }
     * })
     * 
    **/
    create<T extends BlockTabCreateArgs>(
      args: SelectSubset<T, BlockTabCreateArgs>
    ): Prisma__BlockTabClient<BlockTabGetPayload<T>>

    /**
     * Create many BlockTabs.
     *     @param {BlockTabCreateManyArgs} args - Arguments to create many BlockTabs.
     *     @example
     *     // Create many BlockTabs
     *     const blockTab = await prisma.blockTab.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BlockTabCreateManyArgs>(
      args?: SelectSubset<T, BlockTabCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BlockTab.
     * @param {BlockTabDeleteArgs} args - Arguments to delete one BlockTab.
     * @example
     * // Delete one BlockTab
     * const BlockTab = await prisma.blockTab.delete({
     *   where: {
     *     // ... filter to delete one BlockTab
     *   }
     * })
     * 
    **/
    delete<T extends BlockTabDeleteArgs>(
      args: SelectSubset<T, BlockTabDeleteArgs>
    ): Prisma__BlockTabClient<BlockTabGetPayload<T>>

    /**
     * Update one BlockTab.
     * @param {BlockTabUpdateArgs} args - Arguments to update one BlockTab.
     * @example
     * // Update one BlockTab
     * const blockTab = await prisma.blockTab.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BlockTabUpdateArgs>(
      args: SelectSubset<T, BlockTabUpdateArgs>
    ): Prisma__BlockTabClient<BlockTabGetPayload<T>>

    /**
     * Delete zero or more BlockTabs.
     * @param {BlockTabDeleteManyArgs} args - Arguments to filter BlockTabs to delete.
     * @example
     * // Delete a few BlockTabs
     * const { count } = await prisma.blockTab.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BlockTabDeleteManyArgs>(
      args?: SelectSubset<T, BlockTabDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BlockTabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockTabUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BlockTabs
     * const blockTab = await prisma.blockTab.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BlockTabUpdateManyArgs>(
      args: SelectSubset<T, BlockTabUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BlockTab.
     * @param {BlockTabUpsertArgs} args - Arguments to update or create a BlockTab.
     * @example
     * // Update or create a BlockTab
     * const blockTab = await prisma.blockTab.upsert({
     *   create: {
     *     // ... data to create a BlockTab
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BlockTab we want to update
     *   }
     * })
    **/
    upsert<T extends BlockTabUpsertArgs>(
      args: SelectSubset<T, BlockTabUpsertArgs>
    ): Prisma__BlockTabClient<BlockTabGetPayload<T>>

    /**
     * Count the number of BlockTabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockTabCountArgs} args - Arguments to filter BlockTabs to count.
     * @example
     * // Count the number of BlockTabs
     * const count = await prisma.blockTab.count({
     *   where: {
     *     // ... the filter for the BlockTabs we want to count
     *   }
     * })
    **/
    count<T extends BlockTabCountArgs>(
      args?: Subset<T, BlockTabCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlockTabCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BlockTab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockTabAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlockTabAggregateArgs>(args: Subset<T, BlockTabAggregateArgs>): Prisma.PrismaPromise<GetBlockTabAggregateType<T>>

    /**
     * Group by BlockTab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockTabGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlockTabGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlockTabGroupByArgs['orderBy'] }
        : { orderBy?: BlockTabGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlockTabGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlockTabGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for BlockTab.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BlockTabClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * BlockTab base type for findUnique actions
   */
  export type BlockTabFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the BlockTab
     */
    select?: BlockTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockTabInclude | null
    /**
     * Filter, which BlockTab to fetch.
     */
    where: BlockTabWhereUniqueInput
  }

  /**
   * BlockTab findUnique
   */
  export interface BlockTabFindUniqueArgs extends BlockTabFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BlockTab findUniqueOrThrow
   */
  export type BlockTabFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BlockTab
     */
    select?: BlockTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockTabInclude | null
    /**
     * Filter, which BlockTab to fetch.
     */
    where: BlockTabWhereUniqueInput
  }


  /**
   * BlockTab base type for findFirst actions
   */
  export type BlockTabFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the BlockTab
     */
    select?: BlockTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockTabInclude | null
    /**
     * Filter, which BlockTab to fetch.
     */
    where?: BlockTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlockTabs to fetch.
     */
    orderBy?: Enumerable<BlockTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlockTabs.
     */
    cursor?: BlockTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlockTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlockTabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlockTabs.
     */
    distinct?: Enumerable<BlockTabScalarFieldEnum>
  }

  /**
   * BlockTab findFirst
   */
  export interface BlockTabFindFirstArgs extends BlockTabFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BlockTab findFirstOrThrow
   */
  export type BlockTabFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BlockTab
     */
    select?: BlockTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockTabInclude | null
    /**
     * Filter, which BlockTab to fetch.
     */
    where?: BlockTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlockTabs to fetch.
     */
    orderBy?: Enumerable<BlockTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlockTabs.
     */
    cursor?: BlockTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlockTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlockTabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlockTabs.
     */
    distinct?: Enumerable<BlockTabScalarFieldEnum>
  }


  /**
   * BlockTab findMany
   */
  export type BlockTabFindManyArgs = {
    /**
     * Select specific fields to fetch from the BlockTab
     */
    select?: BlockTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockTabInclude | null
    /**
     * Filter, which BlockTabs to fetch.
     */
    where?: BlockTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlockTabs to fetch.
     */
    orderBy?: Enumerable<BlockTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BlockTabs.
     */
    cursor?: BlockTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlockTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlockTabs.
     */
    skip?: number
    distinct?: Enumerable<BlockTabScalarFieldEnum>
  }


  /**
   * BlockTab create
   */
  export type BlockTabCreateArgs = {
    /**
     * Select specific fields to fetch from the BlockTab
     */
    select?: BlockTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockTabInclude | null
    /**
     * The data needed to create a BlockTab.
     */
    data: XOR<BlockTabCreateInput, BlockTabUncheckedCreateInput>
  }


  /**
   * BlockTab createMany
   */
  export type BlockTabCreateManyArgs = {
    /**
     * The data used to create many BlockTabs.
     */
    data: Enumerable<BlockTabCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BlockTab update
   */
  export type BlockTabUpdateArgs = {
    /**
     * Select specific fields to fetch from the BlockTab
     */
    select?: BlockTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockTabInclude | null
    /**
     * The data needed to update a BlockTab.
     */
    data: XOR<BlockTabUpdateInput, BlockTabUncheckedUpdateInput>
    /**
     * Choose, which BlockTab to update.
     */
    where: BlockTabWhereUniqueInput
  }


  /**
   * BlockTab updateMany
   */
  export type BlockTabUpdateManyArgs = {
    /**
     * The data used to update BlockTabs.
     */
    data: XOR<BlockTabUpdateManyMutationInput, BlockTabUncheckedUpdateManyInput>
    /**
     * Filter which BlockTabs to update
     */
    where?: BlockTabWhereInput
  }


  /**
   * BlockTab upsert
   */
  export type BlockTabUpsertArgs = {
    /**
     * Select specific fields to fetch from the BlockTab
     */
    select?: BlockTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockTabInclude | null
    /**
     * The filter to search for the BlockTab to update in case it exists.
     */
    where: BlockTabWhereUniqueInput
    /**
     * In case the BlockTab found by the `where` argument doesn't exist, create a new BlockTab with this data.
     */
    create: XOR<BlockTabCreateInput, BlockTabUncheckedCreateInput>
    /**
     * In case the BlockTab was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BlockTabUpdateInput, BlockTabUncheckedUpdateInput>
  }


  /**
   * BlockTab delete
   */
  export type BlockTabDeleteArgs = {
    /**
     * Select specific fields to fetch from the BlockTab
     */
    select?: BlockTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockTabInclude | null
    /**
     * Filter which BlockTab to delete.
     */
    where: BlockTabWhereUniqueInput
  }


  /**
   * BlockTab deleteMany
   */
  export type BlockTabDeleteManyArgs = {
    /**
     * Filter which BlockTabs to delete
     */
    where?: BlockTabWhereInput
  }


  /**
   * BlockTab without action
   */
  export type BlockTabArgs = {
    /**
     * Select specific fields to fetch from the BlockTab
     */
    select?: BlockTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockTabInclude | null
  }



  /**
   * Model ChannelsJoinTab
   */


  export type AggregateChannelsJoinTab = {
    _count: ChannelsJoinTabCountAggregateOutputType | null
    _min: ChannelsJoinTabMinAggregateOutputType | null
    _max: ChannelsJoinTabMaxAggregateOutputType | null
  }

  export type ChannelsJoinTabMinAggregateOutputType = {
    user_id: string | null
    channel_id: string | null
    channel_name: string | null
    role: ChanRoles | null
  }

  export type ChannelsJoinTabMaxAggregateOutputType = {
    user_id: string | null
    channel_id: string | null
    channel_name: string | null
    role: ChanRoles | null
  }

  export type ChannelsJoinTabCountAggregateOutputType = {
    user_id: number
    channel_id: number
    channel_name: number
    role: number
    _all: number
  }


  export type ChannelsJoinTabMinAggregateInputType = {
    user_id?: true
    channel_id?: true
    channel_name?: true
    role?: true
  }

  export type ChannelsJoinTabMaxAggregateInputType = {
    user_id?: true
    channel_id?: true
    channel_name?: true
    role?: true
  }

  export type ChannelsJoinTabCountAggregateInputType = {
    user_id?: true
    channel_id?: true
    channel_name?: true
    role?: true
    _all?: true
  }

  export type ChannelsJoinTabAggregateArgs = {
    /**
     * Filter which ChannelsJoinTab to aggregate.
     */
    where?: ChannelsJoinTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelsJoinTabs to fetch.
     */
    orderBy?: Enumerable<ChannelsJoinTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChannelsJoinTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelsJoinTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelsJoinTabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChannelsJoinTabs
    **/
    _count?: true | ChannelsJoinTabCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelsJoinTabMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelsJoinTabMaxAggregateInputType
  }

  export type GetChannelsJoinTabAggregateType<T extends ChannelsJoinTabAggregateArgs> = {
        [P in keyof T & keyof AggregateChannelsJoinTab]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannelsJoinTab[P]>
      : GetScalarType<T[P], AggregateChannelsJoinTab[P]>
  }




  export type ChannelsJoinTabGroupByArgs = {
    where?: ChannelsJoinTabWhereInput
    orderBy?: Enumerable<ChannelsJoinTabOrderByWithAggregationInput>
    by: ChannelsJoinTabScalarFieldEnum[]
    having?: ChannelsJoinTabScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelsJoinTabCountAggregateInputType | true
    _min?: ChannelsJoinTabMinAggregateInputType
    _max?: ChannelsJoinTabMaxAggregateInputType
  }


  export type ChannelsJoinTabGroupByOutputType = {
    user_id: string
    channel_id: string
    channel_name: string
    role: ChanRoles
    _count: ChannelsJoinTabCountAggregateOutputType | null
    _min: ChannelsJoinTabMinAggregateOutputType | null
    _max: ChannelsJoinTabMaxAggregateOutputType | null
  }

  type GetChannelsJoinTabGroupByPayload<T extends ChannelsJoinTabGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChannelsJoinTabGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelsJoinTabGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelsJoinTabGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelsJoinTabGroupByOutputType[P]>
        }
      >
    >


  export type ChannelsJoinTabSelect = {
    user_id?: boolean
    channel_id?: boolean
    channel_name?: boolean
    role?: boolean
    user?: boolean | UserArgs
  }


  export type ChannelsJoinTabInclude = {
    user?: boolean | UserArgs
  }

  export type ChannelsJoinTabGetPayload<S extends boolean | null | undefined | ChannelsJoinTabArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ChannelsJoinTab :
    S extends undefined ? never :
    S extends { include: any } & (ChannelsJoinTabArgs | ChannelsJoinTabFindManyArgs)
    ? ChannelsJoinTab  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ChannelsJoinTabArgs | ChannelsJoinTabFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof ChannelsJoinTab ? ChannelsJoinTab[P] : never
  } 
      : ChannelsJoinTab


  type ChannelsJoinTabCountArgs = 
    Omit<ChannelsJoinTabFindManyArgs, 'select' | 'include'> & {
      select?: ChannelsJoinTabCountAggregateInputType | true
    }

  export interface ChannelsJoinTabDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ChannelsJoinTab that matches the filter.
     * @param {ChannelsJoinTabFindUniqueArgs} args - Arguments to find a ChannelsJoinTab
     * @example
     * // Get one ChannelsJoinTab
     * const channelsJoinTab = await prisma.channelsJoinTab.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChannelsJoinTabFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChannelsJoinTabFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ChannelsJoinTab'> extends True ? Prisma__ChannelsJoinTabClient<ChannelsJoinTabGetPayload<T>> : Prisma__ChannelsJoinTabClient<ChannelsJoinTabGetPayload<T> | null, null>

    /**
     * Find one ChannelsJoinTab that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChannelsJoinTabFindUniqueOrThrowArgs} args - Arguments to find a ChannelsJoinTab
     * @example
     * // Get one ChannelsJoinTab
     * const channelsJoinTab = await prisma.channelsJoinTab.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChannelsJoinTabFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ChannelsJoinTabFindUniqueOrThrowArgs>
    ): Prisma__ChannelsJoinTabClient<ChannelsJoinTabGetPayload<T>>

    /**
     * Find the first ChannelsJoinTab that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelsJoinTabFindFirstArgs} args - Arguments to find a ChannelsJoinTab
     * @example
     * // Get one ChannelsJoinTab
     * const channelsJoinTab = await prisma.channelsJoinTab.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChannelsJoinTabFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChannelsJoinTabFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ChannelsJoinTab'> extends True ? Prisma__ChannelsJoinTabClient<ChannelsJoinTabGetPayload<T>> : Prisma__ChannelsJoinTabClient<ChannelsJoinTabGetPayload<T> | null, null>

    /**
     * Find the first ChannelsJoinTab that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelsJoinTabFindFirstOrThrowArgs} args - Arguments to find a ChannelsJoinTab
     * @example
     * // Get one ChannelsJoinTab
     * const channelsJoinTab = await prisma.channelsJoinTab.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChannelsJoinTabFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ChannelsJoinTabFindFirstOrThrowArgs>
    ): Prisma__ChannelsJoinTabClient<ChannelsJoinTabGetPayload<T>>

    /**
     * Find zero or more ChannelsJoinTabs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelsJoinTabFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChannelsJoinTabs
     * const channelsJoinTabs = await prisma.channelsJoinTab.findMany()
     * 
     * // Get first 10 ChannelsJoinTabs
     * const channelsJoinTabs = await prisma.channelsJoinTab.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const channelsJoinTabWithUser_idOnly = await prisma.channelsJoinTab.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends ChannelsJoinTabFindManyArgs>(
      args?: SelectSubset<T, ChannelsJoinTabFindManyArgs>
    ): Prisma.PrismaPromise<Array<ChannelsJoinTabGetPayload<T>>>

    /**
     * Create a ChannelsJoinTab.
     * @param {ChannelsJoinTabCreateArgs} args - Arguments to create a ChannelsJoinTab.
     * @example
     * // Create one ChannelsJoinTab
     * const ChannelsJoinTab = await prisma.channelsJoinTab.create({
     *   data: {
     *     // ... data to create a ChannelsJoinTab
     *   }
     * })
     * 
    **/
    create<T extends ChannelsJoinTabCreateArgs>(
      args: SelectSubset<T, ChannelsJoinTabCreateArgs>
    ): Prisma__ChannelsJoinTabClient<ChannelsJoinTabGetPayload<T>>

    /**
     * Create many ChannelsJoinTabs.
     *     @param {ChannelsJoinTabCreateManyArgs} args - Arguments to create many ChannelsJoinTabs.
     *     @example
     *     // Create many ChannelsJoinTabs
     *     const channelsJoinTab = await prisma.channelsJoinTab.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChannelsJoinTabCreateManyArgs>(
      args?: SelectSubset<T, ChannelsJoinTabCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChannelsJoinTab.
     * @param {ChannelsJoinTabDeleteArgs} args - Arguments to delete one ChannelsJoinTab.
     * @example
     * // Delete one ChannelsJoinTab
     * const ChannelsJoinTab = await prisma.channelsJoinTab.delete({
     *   where: {
     *     // ... filter to delete one ChannelsJoinTab
     *   }
     * })
     * 
    **/
    delete<T extends ChannelsJoinTabDeleteArgs>(
      args: SelectSubset<T, ChannelsJoinTabDeleteArgs>
    ): Prisma__ChannelsJoinTabClient<ChannelsJoinTabGetPayload<T>>

    /**
     * Update one ChannelsJoinTab.
     * @param {ChannelsJoinTabUpdateArgs} args - Arguments to update one ChannelsJoinTab.
     * @example
     * // Update one ChannelsJoinTab
     * const channelsJoinTab = await prisma.channelsJoinTab.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChannelsJoinTabUpdateArgs>(
      args: SelectSubset<T, ChannelsJoinTabUpdateArgs>
    ): Prisma__ChannelsJoinTabClient<ChannelsJoinTabGetPayload<T>>

    /**
     * Delete zero or more ChannelsJoinTabs.
     * @param {ChannelsJoinTabDeleteManyArgs} args - Arguments to filter ChannelsJoinTabs to delete.
     * @example
     * // Delete a few ChannelsJoinTabs
     * const { count } = await prisma.channelsJoinTab.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChannelsJoinTabDeleteManyArgs>(
      args?: SelectSubset<T, ChannelsJoinTabDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChannelsJoinTabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelsJoinTabUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChannelsJoinTabs
     * const channelsJoinTab = await prisma.channelsJoinTab.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChannelsJoinTabUpdateManyArgs>(
      args: SelectSubset<T, ChannelsJoinTabUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChannelsJoinTab.
     * @param {ChannelsJoinTabUpsertArgs} args - Arguments to update or create a ChannelsJoinTab.
     * @example
     * // Update or create a ChannelsJoinTab
     * const channelsJoinTab = await prisma.channelsJoinTab.upsert({
     *   create: {
     *     // ... data to create a ChannelsJoinTab
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChannelsJoinTab we want to update
     *   }
     * })
    **/
    upsert<T extends ChannelsJoinTabUpsertArgs>(
      args: SelectSubset<T, ChannelsJoinTabUpsertArgs>
    ): Prisma__ChannelsJoinTabClient<ChannelsJoinTabGetPayload<T>>

    /**
     * Count the number of ChannelsJoinTabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelsJoinTabCountArgs} args - Arguments to filter ChannelsJoinTabs to count.
     * @example
     * // Count the number of ChannelsJoinTabs
     * const count = await prisma.channelsJoinTab.count({
     *   where: {
     *     // ... the filter for the ChannelsJoinTabs we want to count
     *   }
     * })
    **/
    count<T extends ChannelsJoinTabCountArgs>(
      args?: Subset<T, ChannelsJoinTabCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelsJoinTabCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChannelsJoinTab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelsJoinTabAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelsJoinTabAggregateArgs>(args: Subset<T, ChannelsJoinTabAggregateArgs>): Prisma.PrismaPromise<GetChannelsJoinTabAggregateType<T>>

    /**
     * Group by ChannelsJoinTab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelsJoinTabGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChannelsJoinTabGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChannelsJoinTabGroupByArgs['orderBy'] }
        : { orderBy?: ChannelsJoinTabGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChannelsJoinTabGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelsJoinTabGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ChannelsJoinTab.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChannelsJoinTabClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ChannelsJoinTab base type for findUnique actions
   */
  export type ChannelsJoinTabFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ChannelsJoinTab
     */
    select?: ChannelsJoinTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsJoinTabInclude | null
    /**
     * Filter, which ChannelsJoinTab to fetch.
     */
    where: ChannelsJoinTabWhereUniqueInput
  }

  /**
   * ChannelsJoinTab findUnique
   */
  export interface ChannelsJoinTabFindUniqueArgs extends ChannelsJoinTabFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChannelsJoinTab findUniqueOrThrow
   */
  export type ChannelsJoinTabFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ChannelsJoinTab
     */
    select?: ChannelsJoinTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsJoinTabInclude | null
    /**
     * Filter, which ChannelsJoinTab to fetch.
     */
    where: ChannelsJoinTabWhereUniqueInput
  }


  /**
   * ChannelsJoinTab base type for findFirst actions
   */
  export type ChannelsJoinTabFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ChannelsJoinTab
     */
    select?: ChannelsJoinTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsJoinTabInclude | null
    /**
     * Filter, which ChannelsJoinTab to fetch.
     */
    where?: ChannelsJoinTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelsJoinTabs to fetch.
     */
    orderBy?: Enumerable<ChannelsJoinTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChannelsJoinTabs.
     */
    cursor?: ChannelsJoinTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelsJoinTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelsJoinTabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChannelsJoinTabs.
     */
    distinct?: Enumerable<ChannelsJoinTabScalarFieldEnum>
  }

  /**
   * ChannelsJoinTab findFirst
   */
  export interface ChannelsJoinTabFindFirstArgs extends ChannelsJoinTabFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChannelsJoinTab findFirstOrThrow
   */
  export type ChannelsJoinTabFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ChannelsJoinTab
     */
    select?: ChannelsJoinTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsJoinTabInclude | null
    /**
     * Filter, which ChannelsJoinTab to fetch.
     */
    where?: ChannelsJoinTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelsJoinTabs to fetch.
     */
    orderBy?: Enumerable<ChannelsJoinTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChannelsJoinTabs.
     */
    cursor?: ChannelsJoinTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelsJoinTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelsJoinTabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChannelsJoinTabs.
     */
    distinct?: Enumerable<ChannelsJoinTabScalarFieldEnum>
  }


  /**
   * ChannelsJoinTab findMany
   */
  export type ChannelsJoinTabFindManyArgs = {
    /**
     * Select specific fields to fetch from the ChannelsJoinTab
     */
    select?: ChannelsJoinTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsJoinTabInclude | null
    /**
     * Filter, which ChannelsJoinTabs to fetch.
     */
    where?: ChannelsJoinTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelsJoinTabs to fetch.
     */
    orderBy?: Enumerable<ChannelsJoinTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChannelsJoinTabs.
     */
    cursor?: ChannelsJoinTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelsJoinTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelsJoinTabs.
     */
    skip?: number
    distinct?: Enumerable<ChannelsJoinTabScalarFieldEnum>
  }


  /**
   * ChannelsJoinTab create
   */
  export type ChannelsJoinTabCreateArgs = {
    /**
     * Select specific fields to fetch from the ChannelsJoinTab
     */
    select?: ChannelsJoinTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsJoinTabInclude | null
    /**
     * The data needed to create a ChannelsJoinTab.
     */
    data: XOR<ChannelsJoinTabCreateInput, ChannelsJoinTabUncheckedCreateInput>
  }


  /**
   * ChannelsJoinTab createMany
   */
  export type ChannelsJoinTabCreateManyArgs = {
    /**
     * The data used to create many ChannelsJoinTabs.
     */
    data: Enumerable<ChannelsJoinTabCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ChannelsJoinTab update
   */
  export type ChannelsJoinTabUpdateArgs = {
    /**
     * Select specific fields to fetch from the ChannelsJoinTab
     */
    select?: ChannelsJoinTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsJoinTabInclude | null
    /**
     * The data needed to update a ChannelsJoinTab.
     */
    data: XOR<ChannelsJoinTabUpdateInput, ChannelsJoinTabUncheckedUpdateInput>
    /**
     * Choose, which ChannelsJoinTab to update.
     */
    where: ChannelsJoinTabWhereUniqueInput
  }


  /**
   * ChannelsJoinTab updateMany
   */
  export type ChannelsJoinTabUpdateManyArgs = {
    /**
     * The data used to update ChannelsJoinTabs.
     */
    data: XOR<ChannelsJoinTabUpdateManyMutationInput, ChannelsJoinTabUncheckedUpdateManyInput>
    /**
     * Filter which ChannelsJoinTabs to update
     */
    where?: ChannelsJoinTabWhereInput
  }


  /**
   * ChannelsJoinTab upsert
   */
  export type ChannelsJoinTabUpsertArgs = {
    /**
     * Select specific fields to fetch from the ChannelsJoinTab
     */
    select?: ChannelsJoinTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsJoinTabInclude | null
    /**
     * The filter to search for the ChannelsJoinTab to update in case it exists.
     */
    where: ChannelsJoinTabWhereUniqueInput
    /**
     * In case the ChannelsJoinTab found by the `where` argument doesn't exist, create a new ChannelsJoinTab with this data.
     */
    create: XOR<ChannelsJoinTabCreateInput, ChannelsJoinTabUncheckedCreateInput>
    /**
     * In case the ChannelsJoinTab was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChannelsJoinTabUpdateInput, ChannelsJoinTabUncheckedUpdateInput>
  }


  /**
   * ChannelsJoinTab delete
   */
  export type ChannelsJoinTabDeleteArgs = {
    /**
     * Select specific fields to fetch from the ChannelsJoinTab
     */
    select?: ChannelsJoinTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsJoinTabInclude | null
    /**
     * Filter which ChannelsJoinTab to delete.
     */
    where: ChannelsJoinTabWhereUniqueInput
  }


  /**
   * ChannelsJoinTab deleteMany
   */
  export type ChannelsJoinTabDeleteManyArgs = {
    /**
     * Filter which ChannelsJoinTabs to delete
     */
    where?: ChannelsJoinTabWhereInput
  }


  /**
   * ChannelsJoinTab without action
   */
  export type ChannelsJoinTabArgs = {
    /**
     * Select specific fields to fetch from the ChannelsJoinTab
     */
    select?: ChannelsJoinTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelsJoinTabInclude | null
  }



  /**
   * Model Channel
   */


  export type AggregateChannel = {
    _count: ChannelCountAggregateOutputType | null
    _avg: ChannelAvgAggregateOutputType | null
    _sum: ChannelSumAggregateOutputType | null
    _min: ChannelMinAggregateOutputType | null
    _max: ChannelMaxAggregateOutputType | null
  }

  export type ChannelAvgAggregateOutputType = {
    limit_members: number | null
  }

  export type ChannelSumAggregateOutputType = {
    limit_members: number | null
  }

  export type ChannelMinAggregateOutputType = {
    id: string | null
    name: string | null
    dateCreated: Date | null
    chann_type: ChanType | null
    owner_id: string | null
    password: string | null
    limit_members: number | null
  }

  export type ChannelMaxAggregateOutputType = {
    id: string | null
    name: string | null
    dateCreated: Date | null
    chann_type: ChanType | null
    owner_id: string | null
    password: string | null
    limit_members: number | null
  }

  export type ChannelCountAggregateOutputType = {
    id: number
    name: number
    dateCreated: number
    chann_type: number
    owner_id: number
    password: number
    limit_members: number
    _all: number
  }


  export type ChannelAvgAggregateInputType = {
    limit_members?: true
  }

  export type ChannelSumAggregateInputType = {
    limit_members?: true
  }

  export type ChannelMinAggregateInputType = {
    id?: true
    name?: true
    dateCreated?: true
    chann_type?: true
    owner_id?: true
    password?: true
    limit_members?: true
  }

  export type ChannelMaxAggregateInputType = {
    id?: true
    name?: true
    dateCreated?: true
    chann_type?: true
    owner_id?: true
    password?: true
    limit_members?: true
  }

  export type ChannelCountAggregateInputType = {
    id?: true
    name?: true
    dateCreated?: true
    chann_type?: true
    owner_id?: true
    password?: true
    limit_members?: true
    _all?: true
  }

  export type ChannelAggregateArgs = {
    /**
     * Filter which Channel to aggregate.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: Enumerable<ChannelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Channels
    **/
    _count?: true | ChannelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChannelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChannelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelMaxAggregateInputType
  }

  export type GetChannelAggregateType<T extends ChannelAggregateArgs> = {
        [P in keyof T & keyof AggregateChannel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannel[P]>
      : GetScalarType<T[P], AggregateChannel[P]>
  }




  export type ChannelGroupByArgs = {
    where?: ChannelWhereInput
    orderBy?: Enumerable<ChannelOrderByWithAggregationInput>
    by: ChannelScalarFieldEnum[]
    having?: ChannelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelCountAggregateInputType | true
    _avg?: ChannelAvgAggregateInputType
    _sum?: ChannelSumAggregateInputType
    _min?: ChannelMinAggregateInputType
    _max?: ChannelMaxAggregateInputType
  }


  export type ChannelGroupByOutputType = {
    id: string
    name: string
    dateCreated: Date
    chann_type: ChanType
    owner_id: string
    password: string | null
    limit_members: number
    _count: ChannelCountAggregateOutputType | null
    _avg: ChannelAvgAggregateOutputType | null
    _sum: ChannelSumAggregateOutputType | null
    _min: ChannelMinAggregateOutputType | null
    _max: ChannelMaxAggregateOutputType | null
  }

  type GetChannelGroupByPayload<T extends ChannelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChannelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelGroupByOutputType[P]>
        }
      >
    >


  export type ChannelSelect = {
    id?: boolean
    name?: boolean
    dateCreated?: boolean
    chann_type?: boolean
    owner_id?: boolean
    password?: boolean
    limit_members?: boolean
    members?: boolean | Channel$membersArgs
    messages?: boolean | Channel$messagesArgs
    bannedUsers?: boolean | Channel$bannedUsersArgs
    adminstrators?: boolean | Channel$adminstratorsArgs
    mutedMembers?: boolean | Channel$mutedMembersArgs
    kickedMembers?: boolean | Channel$kickedMembersArgs
    _count?: boolean | ChannelCountOutputTypeArgs
  }


  export type ChannelInclude = {
    members?: boolean | Channel$membersArgs
    messages?: boolean | Channel$messagesArgs
    bannedUsers?: boolean | Channel$bannedUsersArgs
    adminstrators?: boolean | Channel$adminstratorsArgs
    mutedMembers?: boolean | Channel$mutedMembersArgs
    kickedMembers?: boolean | Channel$kickedMembersArgs
    _count?: boolean | ChannelCountOutputTypeArgs
  }

  export type ChannelGetPayload<S extends boolean | null | undefined | ChannelArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Channel :
    S extends undefined ? never :
    S extends { include: any } & (ChannelArgs | ChannelFindManyArgs)
    ? Channel  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'members' ? Array < MembersTabGetPayload<S['include'][P]>>  :
        P extends 'messages' ? Array < MessageGetPayload<S['include'][P]>>  :
        P extends 'bannedUsers' ? Array < BannedMembersGetPayload<S['include'][P]>>  :
        P extends 'adminstrators' ? Array < AdminMembersGetPayload<S['include'][P]>>  :
        P extends 'mutedMembers' ? Array < MutedMembersGetPayload<S['include'][P]>>  :
        P extends 'kickedMembers' ? Array < kickedMembersGetPayload<S['include'][P]>>  :
        P extends '_count' ? ChannelCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ChannelArgs | ChannelFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'members' ? Array < MembersTabGetPayload<S['select'][P]>>  :
        P extends 'messages' ? Array < MessageGetPayload<S['select'][P]>>  :
        P extends 'bannedUsers' ? Array < BannedMembersGetPayload<S['select'][P]>>  :
        P extends 'adminstrators' ? Array < AdminMembersGetPayload<S['select'][P]>>  :
        P extends 'mutedMembers' ? Array < MutedMembersGetPayload<S['select'][P]>>  :
        P extends 'kickedMembers' ? Array < kickedMembersGetPayload<S['select'][P]>>  :
        P extends '_count' ? ChannelCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Channel ? Channel[P] : never
  } 
      : Channel


  type ChannelCountArgs = 
    Omit<ChannelFindManyArgs, 'select' | 'include'> & {
      select?: ChannelCountAggregateInputType | true
    }

  export interface ChannelDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Channel that matches the filter.
     * @param {ChannelFindUniqueArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChannelFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChannelFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Channel'> extends True ? Prisma__ChannelClient<ChannelGetPayload<T>> : Prisma__ChannelClient<ChannelGetPayload<T> | null, null>

    /**
     * Find one Channel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChannelFindUniqueOrThrowArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChannelFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ChannelFindUniqueOrThrowArgs>
    ): Prisma__ChannelClient<ChannelGetPayload<T>>

    /**
     * Find the first Channel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindFirstArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChannelFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChannelFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Channel'> extends True ? Prisma__ChannelClient<ChannelGetPayload<T>> : Prisma__ChannelClient<ChannelGetPayload<T> | null, null>

    /**
     * Find the first Channel that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindFirstOrThrowArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChannelFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ChannelFindFirstOrThrowArgs>
    ): Prisma__ChannelClient<ChannelGetPayload<T>>

    /**
     * Find zero or more Channels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Channels
     * const channels = await prisma.channel.findMany()
     * 
     * // Get first 10 Channels
     * const channels = await prisma.channel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const channelWithIdOnly = await prisma.channel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChannelFindManyArgs>(
      args?: SelectSubset<T, ChannelFindManyArgs>
    ): Prisma.PrismaPromise<Array<ChannelGetPayload<T>>>

    /**
     * Create a Channel.
     * @param {ChannelCreateArgs} args - Arguments to create a Channel.
     * @example
     * // Create one Channel
     * const Channel = await prisma.channel.create({
     *   data: {
     *     // ... data to create a Channel
     *   }
     * })
     * 
    **/
    create<T extends ChannelCreateArgs>(
      args: SelectSubset<T, ChannelCreateArgs>
    ): Prisma__ChannelClient<ChannelGetPayload<T>>

    /**
     * Create many Channels.
     *     @param {ChannelCreateManyArgs} args - Arguments to create many Channels.
     *     @example
     *     // Create many Channels
     *     const channel = await prisma.channel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChannelCreateManyArgs>(
      args?: SelectSubset<T, ChannelCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Channel.
     * @param {ChannelDeleteArgs} args - Arguments to delete one Channel.
     * @example
     * // Delete one Channel
     * const Channel = await prisma.channel.delete({
     *   where: {
     *     // ... filter to delete one Channel
     *   }
     * })
     * 
    **/
    delete<T extends ChannelDeleteArgs>(
      args: SelectSubset<T, ChannelDeleteArgs>
    ): Prisma__ChannelClient<ChannelGetPayload<T>>

    /**
     * Update one Channel.
     * @param {ChannelUpdateArgs} args - Arguments to update one Channel.
     * @example
     * // Update one Channel
     * const channel = await prisma.channel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChannelUpdateArgs>(
      args: SelectSubset<T, ChannelUpdateArgs>
    ): Prisma__ChannelClient<ChannelGetPayload<T>>

    /**
     * Delete zero or more Channels.
     * @param {ChannelDeleteManyArgs} args - Arguments to filter Channels to delete.
     * @example
     * // Delete a few Channels
     * const { count } = await prisma.channel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChannelDeleteManyArgs>(
      args?: SelectSubset<T, ChannelDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Channels
     * const channel = await prisma.channel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChannelUpdateManyArgs>(
      args: SelectSubset<T, ChannelUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Channel.
     * @param {ChannelUpsertArgs} args - Arguments to update or create a Channel.
     * @example
     * // Update or create a Channel
     * const channel = await prisma.channel.upsert({
     *   create: {
     *     // ... data to create a Channel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Channel we want to update
     *   }
     * })
    **/
    upsert<T extends ChannelUpsertArgs>(
      args: SelectSubset<T, ChannelUpsertArgs>
    ): Prisma__ChannelClient<ChannelGetPayload<T>>

    /**
     * Count the number of Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelCountArgs} args - Arguments to filter Channels to count.
     * @example
     * // Count the number of Channels
     * const count = await prisma.channel.count({
     *   where: {
     *     // ... the filter for the Channels we want to count
     *   }
     * })
    **/
    count<T extends ChannelCountArgs>(
      args?: Subset<T, ChannelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Channel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelAggregateArgs>(args: Subset<T, ChannelAggregateArgs>): Prisma.PrismaPromise<GetChannelAggregateType<T>>

    /**
     * Group by Channel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChannelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChannelGroupByArgs['orderBy'] }
        : { orderBy?: ChannelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChannelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Channel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChannelClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    members<T extends Channel$membersArgs= {}>(args?: Subset<T, Channel$membersArgs>): Prisma.PrismaPromise<Array<MembersTabGetPayload<T>>| Null>;

    messages<T extends Channel$messagesArgs= {}>(args?: Subset<T, Channel$messagesArgs>): Prisma.PrismaPromise<Array<MessageGetPayload<T>>| Null>;

    bannedUsers<T extends Channel$bannedUsersArgs= {}>(args?: Subset<T, Channel$bannedUsersArgs>): Prisma.PrismaPromise<Array<BannedMembersGetPayload<T>>| Null>;

    adminstrators<T extends Channel$adminstratorsArgs= {}>(args?: Subset<T, Channel$adminstratorsArgs>): Prisma.PrismaPromise<Array<AdminMembersGetPayload<T>>| Null>;

    mutedMembers<T extends Channel$mutedMembersArgs= {}>(args?: Subset<T, Channel$mutedMembersArgs>): Prisma.PrismaPromise<Array<MutedMembersGetPayload<T>>| Null>;

    kickedMembers<T extends Channel$kickedMembersArgs= {}>(args?: Subset<T, Channel$kickedMembersArgs>): Prisma.PrismaPromise<Array<kickedMembersGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Channel base type for findUnique actions
   */
  export type ChannelFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * Filter, which Channel to fetch.
     */
    where: ChannelWhereUniqueInput
  }

  /**
   * Channel findUnique
   */
  export interface ChannelFindUniqueArgs extends ChannelFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Channel findUniqueOrThrow
   */
  export type ChannelFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * Filter, which Channel to fetch.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel base type for findFirst actions
   */
  export type ChannelFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * Filter, which Channel to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: Enumerable<ChannelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: Enumerable<ChannelScalarFieldEnum>
  }

  /**
   * Channel findFirst
   */
  export interface ChannelFindFirstArgs extends ChannelFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Channel findFirstOrThrow
   */
  export type ChannelFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * Filter, which Channel to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: Enumerable<ChannelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: Enumerable<ChannelScalarFieldEnum>
  }


  /**
   * Channel findMany
   */
  export type ChannelFindManyArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * Filter, which Channels to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: Enumerable<ChannelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    distinct?: Enumerable<ChannelScalarFieldEnum>
  }


  /**
   * Channel create
   */
  export type ChannelCreateArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * The data needed to create a Channel.
     */
    data: XOR<ChannelCreateInput, ChannelUncheckedCreateInput>
  }


  /**
   * Channel createMany
   */
  export type ChannelCreateManyArgs = {
    /**
     * The data used to create many Channels.
     */
    data: Enumerable<ChannelCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Channel update
   */
  export type ChannelUpdateArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * The data needed to update a Channel.
     */
    data: XOR<ChannelUpdateInput, ChannelUncheckedUpdateInput>
    /**
     * Choose, which Channel to update.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel updateMany
   */
  export type ChannelUpdateManyArgs = {
    /**
     * The data used to update Channels.
     */
    data: XOR<ChannelUpdateManyMutationInput, ChannelUncheckedUpdateManyInput>
    /**
     * Filter which Channels to update
     */
    where?: ChannelWhereInput
  }


  /**
   * Channel upsert
   */
  export type ChannelUpsertArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * The filter to search for the Channel to update in case it exists.
     */
    where: ChannelWhereUniqueInput
    /**
     * In case the Channel found by the `where` argument doesn't exist, create a new Channel with this data.
     */
    create: XOR<ChannelCreateInput, ChannelUncheckedCreateInput>
    /**
     * In case the Channel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChannelUpdateInput, ChannelUncheckedUpdateInput>
  }


  /**
   * Channel delete
   */
  export type ChannelDeleteArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * Filter which Channel to delete.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel deleteMany
   */
  export type ChannelDeleteManyArgs = {
    /**
     * Filter which Channels to delete
     */
    where?: ChannelWhereInput
  }


  /**
   * Channel.members
   */
  export type Channel$membersArgs = {
    /**
     * Select specific fields to fetch from the MembersTab
     */
    select?: MembersTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersTabInclude | null
    where?: MembersTabWhereInput
    orderBy?: Enumerable<MembersTabOrderByWithRelationInput>
    cursor?: MembersTabWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MembersTabScalarFieldEnum>
  }


  /**
   * Channel.messages
   */
  export type Channel$messagesArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    where?: MessageWhereInput
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Channel.bannedUsers
   */
  export type Channel$bannedUsersArgs = {
    /**
     * Select specific fields to fetch from the BannedMembers
     */
    select?: BannedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BannedMembersInclude | null
    where?: BannedMembersWhereInput
    orderBy?: Enumerable<BannedMembersOrderByWithRelationInput>
    cursor?: BannedMembersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BannedMembersScalarFieldEnum>
  }


  /**
   * Channel.adminstrators
   */
  export type Channel$adminstratorsArgs = {
    /**
     * Select specific fields to fetch from the AdminMembers
     */
    select?: AdminMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminMembersInclude | null
    where?: AdminMembersWhereInput
    orderBy?: Enumerable<AdminMembersOrderByWithRelationInput>
    cursor?: AdminMembersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AdminMembersScalarFieldEnum>
  }


  /**
   * Channel.mutedMembers
   */
  export type Channel$mutedMembersArgs = {
    /**
     * Select specific fields to fetch from the MutedMembers
     */
    select?: MutedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MutedMembersInclude | null
    where?: MutedMembersWhereInput
    orderBy?: Enumerable<MutedMembersOrderByWithRelationInput>
    cursor?: MutedMembersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MutedMembersScalarFieldEnum>
  }


  /**
   * Channel.kickedMembers
   */
  export type Channel$kickedMembersArgs = {
    /**
     * Select specific fields to fetch from the kickedMembers
     */
    select?: kickedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: kickedMembersInclude | null
    where?: kickedMembersWhereInput
    orderBy?: Enumerable<kickedMembersOrderByWithRelationInput>
    cursor?: kickedMembersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<KickedMembersScalarFieldEnum>
  }


  /**
   * Channel without action
   */
  export type ChannelArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
  }



  /**
   * Model MembersTab
   */


  export type AggregateMembersTab = {
    _count: MembersTabCountAggregateOutputType | null
    _min: MembersTabMinAggregateOutputType | null
    _max: MembersTabMaxAggregateOutputType | null
  }

  export type MembersTabMinAggregateOutputType = {
    channel_id: string | null
    member_id: string | null
  }

  export type MembersTabMaxAggregateOutputType = {
    channel_id: string | null
    member_id: string | null
  }

  export type MembersTabCountAggregateOutputType = {
    channel_id: number
    member_id: number
    _all: number
  }


  export type MembersTabMinAggregateInputType = {
    channel_id?: true
    member_id?: true
  }

  export type MembersTabMaxAggregateInputType = {
    channel_id?: true
    member_id?: true
  }

  export type MembersTabCountAggregateInputType = {
    channel_id?: true
    member_id?: true
    _all?: true
  }

  export type MembersTabAggregateArgs = {
    /**
     * Filter which MembersTab to aggregate.
     */
    where?: MembersTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MembersTabs to fetch.
     */
    orderBy?: Enumerable<MembersTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MembersTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MembersTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MembersTabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MembersTabs
    **/
    _count?: true | MembersTabCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MembersTabMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MembersTabMaxAggregateInputType
  }

  export type GetMembersTabAggregateType<T extends MembersTabAggregateArgs> = {
        [P in keyof T & keyof AggregateMembersTab]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMembersTab[P]>
      : GetScalarType<T[P], AggregateMembersTab[P]>
  }




  export type MembersTabGroupByArgs = {
    where?: MembersTabWhereInput
    orderBy?: Enumerable<MembersTabOrderByWithAggregationInput>
    by: MembersTabScalarFieldEnum[]
    having?: MembersTabScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MembersTabCountAggregateInputType | true
    _min?: MembersTabMinAggregateInputType
    _max?: MembersTabMaxAggregateInputType
  }


  export type MembersTabGroupByOutputType = {
    channel_id: string
    member_id: string
    _count: MembersTabCountAggregateOutputType | null
    _min: MembersTabMinAggregateOutputType | null
    _max: MembersTabMaxAggregateOutputType | null
  }

  type GetMembersTabGroupByPayload<T extends MembersTabGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MembersTabGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MembersTabGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MembersTabGroupByOutputType[P]>
            : GetScalarType<T[P], MembersTabGroupByOutputType[P]>
        }
      >
    >


  export type MembersTabSelect = {
    channel_id?: boolean
    member_id?: boolean
    channel?: boolean | ChannelArgs
  }


  export type MembersTabInclude = {
    channel?: boolean | ChannelArgs
  }

  export type MembersTabGetPayload<S extends boolean | null | undefined | MembersTabArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MembersTab :
    S extends undefined ? never :
    S extends { include: any } & (MembersTabArgs | MembersTabFindManyArgs)
    ? MembersTab  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'channel' ? ChannelGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MembersTabArgs | MembersTabFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'channel' ? ChannelGetPayload<S['select'][P]> :  P extends keyof MembersTab ? MembersTab[P] : never
  } 
      : MembersTab


  type MembersTabCountArgs = 
    Omit<MembersTabFindManyArgs, 'select' | 'include'> & {
      select?: MembersTabCountAggregateInputType | true
    }

  export interface MembersTabDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one MembersTab that matches the filter.
     * @param {MembersTabFindUniqueArgs} args - Arguments to find a MembersTab
     * @example
     * // Get one MembersTab
     * const membersTab = await prisma.membersTab.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MembersTabFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MembersTabFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MembersTab'> extends True ? Prisma__MembersTabClient<MembersTabGetPayload<T>> : Prisma__MembersTabClient<MembersTabGetPayload<T> | null, null>

    /**
     * Find one MembersTab that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MembersTabFindUniqueOrThrowArgs} args - Arguments to find a MembersTab
     * @example
     * // Get one MembersTab
     * const membersTab = await prisma.membersTab.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MembersTabFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MembersTabFindUniqueOrThrowArgs>
    ): Prisma__MembersTabClient<MembersTabGetPayload<T>>

    /**
     * Find the first MembersTab that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersTabFindFirstArgs} args - Arguments to find a MembersTab
     * @example
     * // Get one MembersTab
     * const membersTab = await prisma.membersTab.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MembersTabFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MembersTabFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MembersTab'> extends True ? Prisma__MembersTabClient<MembersTabGetPayload<T>> : Prisma__MembersTabClient<MembersTabGetPayload<T> | null, null>

    /**
     * Find the first MembersTab that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersTabFindFirstOrThrowArgs} args - Arguments to find a MembersTab
     * @example
     * // Get one MembersTab
     * const membersTab = await prisma.membersTab.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MembersTabFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MembersTabFindFirstOrThrowArgs>
    ): Prisma__MembersTabClient<MembersTabGetPayload<T>>

    /**
     * Find zero or more MembersTabs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersTabFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MembersTabs
     * const membersTabs = await prisma.membersTab.findMany()
     * 
     * // Get first 10 MembersTabs
     * const membersTabs = await prisma.membersTab.findMany({ take: 10 })
     * 
     * // Only select the `channel_id`
     * const membersTabWithChannel_idOnly = await prisma.membersTab.findMany({ select: { channel_id: true } })
     * 
    **/
    findMany<T extends MembersTabFindManyArgs>(
      args?: SelectSubset<T, MembersTabFindManyArgs>
    ): Prisma.PrismaPromise<Array<MembersTabGetPayload<T>>>

    /**
     * Create a MembersTab.
     * @param {MembersTabCreateArgs} args - Arguments to create a MembersTab.
     * @example
     * // Create one MembersTab
     * const MembersTab = await prisma.membersTab.create({
     *   data: {
     *     // ... data to create a MembersTab
     *   }
     * })
     * 
    **/
    create<T extends MembersTabCreateArgs>(
      args: SelectSubset<T, MembersTabCreateArgs>
    ): Prisma__MembersTabClient<MembersTabGetPayload<T>>

    /**
     * Create many MembersTabs.
     *     @param {MembersTabCreateManyArgs} args - Arguments to create many MembersTabs.
     *     @example
     *     // Create many MembersTabs
     *     const membersTab = await prisma.membersTab.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MembersTabCreateManyArgs>(
      args?: SelectSubset<T, MembersTabCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MembersTab.
     * @param {MembersTabDeleteArgs} args - Arguments to delete one MembersTab.
     * @example
     * // Delete one MembersTab
     * const MembersTab = await prisma.membersTab.delete({
     *   where: {
     *     // ... filter to delete one MembersTab
     *   }
     * })
     * 
    **/
    delete<T extends MembersTabDeleteArgs>(
      args: SelectSubset<T, MembersTabDeleteArgs>
    ): Prisma__MembersTabClient<MembersTabGetPayload<T>>

    /**
     * Update one MembersTab.
     * @param {MembersTabUpdateArgs} args - Arguments to update one MembersTab.
     * @example
     * // Update one MembersTab
     * const membersTab = await prisma.membersTab.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MembersTabUpdateArgs>(
      args: SelectSubset<T, MembersTabUpdateArgs>
    ): Prisma__MembersTabClient<MembersTabGetPayload<T>>

    /**
     * Delete zero or more MembersTabs.
     * @param {MembersTabDeleteManyArgs} args - Arguments to filter MembersTabs to delete.
     * @example
     * // Delete a few MembersTabs
     * const { count } = await prisma.membersTab.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MembersTabDeleteManyArgs>(
      args?: SelectSubset<T, MembersTabDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MembersTabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersTabUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MembersTabs
     * const membersTab = await prisma.membersTab.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MembersTabUpdateManyArgs>(
      args: SelectSubset<T, MembersTabUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MembersTab.
     * @param {MembersTabUpsertArgs} args - Arguments to update or create a MembersTab.
     * @example
     * // Update or create a MembersTab
     * const membersTab = await prisma.membersTab.upsert({
     *   create: {
     *     // ... data to create a MembersTab
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MembersTab we want to update
     *   }
     * })
    **/
    upsert<T extends MembersTabUpsertArgs>(
      args: SelectSubset<T, MembersTabUpsertArgs>
    ): Prisma__MembersTabClient<MembersTabGetPayload<T>>

    /**
     * Count the number of MembersTabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersTabCountArgs} args - Arguments to filter MembersTabs to count.
     * @example
     * // Count the number of MembersTabs
     * const count = await prisma.membersTab.count({
     *   where: {
     *     // ... the filter for the MembersTabs we want to count
     *   }
     * })
    **/
    count<T extends MembersTabCountArgs>(
      args?: Subset<T, MembersTabCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MembersTabCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MembersTab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersTabAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MembersTabAggregateArgs>(args: Subset<T, MembersTabAggregateArgs>): Prisma.PrismaPromise<GetMembersTabAggregateType<T>>

    /**
     * Group by MembersTab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersTabGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MembersTabGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MembersTabGroupByArgs['orderBy'] }
        : { orderBy?: MembersTabGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MembersTabGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMembersTabGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MembersTab.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MembersTabClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    channel<T extends ChannelArgs= {}>(args?: Subset<T, ChannelArgs>): Prisma__ChannelClient<ChannelGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MembersTab base type for findUnique actions
   */
  export type MembersTabFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the MembersTab
     */
    select?: MembersTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersTabInclude | null
    /**
     * Filter, which MembersTab to fetch.
     */
    where: MembersTabWhereUniqueInput
  }

  /**
   * MembersTab findUnique
   */
  export interface MembersTabFindUniqueArgs extends MembersTabFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MembersTab findUniqueOrThrow
   */
  export type MembersTabFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MembersTab
     */
    select?: MembersTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersTabInclude | null
    /**
     * Filter, which MembersTab to fetch.
     */
    where: MembersTabWhereUniqueInput
  }


  /**
   * MembersTab base type for findFirst actions
   */
  export type MembersTabFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the MembersTab
     */
    select?: MembersTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersTabInclude | null
    /**
     * Filter, which MembersTab to fetch.
     */
    where?: MembersTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MembersTabs to fetch.
     */
    orderBy?: Enumerable<MembersTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MembersTabs.
     */
    cursor?: MembersTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MembersTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MembersTabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MembersTabs.
     */
    distinct?: Enumerable<MembersTabScalarFieldEnum>
  }

  /**
   * MembersTab findFirst
   */
  export interface MembersTabFindFirstArgs extends MembersTabFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MembersTab findFirstOrThrow
   */
  export type MembersTabFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MembersTab
     */
    select?: MembersTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersTabInclude | null
    /**
     * Filter, which MembersTab to fetch.
     */
    where?: MembersTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MembersTabs to fetch.
     */
    orderBy?: Enumerable<MembersTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MembersTabs.
     */
    cursor?: MembersTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MembersTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MembersTabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MembersTabs.
     */
    distinct?: Enumerable<MembersTabScalarFieldEnum>
  }


  /**
   * MembersTab findMany
   */
  export type MembersTabFindManyArgs = {
    /**
     * Select specific fields to fetch from the MembersTab
     */
    select?: MembersTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersTabInclude | null
    /**
     * Filter, which MembersTabs to fetch.
     */
    where?: MembersTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MembersTabs to fetch.
     */
    orderBy?: Enumerable<MembersTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MembersTabs.
     */
    cursor?: MembersTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MembersTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MembersTabs.
     */
    skip?: number
    distinct?: Enumerable<MembersTabScalarFieldEnum>
  }


  /**
   * MembersTab create
   */
  export type MembersTabCreateArgs = {
    /**
     * Select specific fields to fetch from the MembersTab
     */
    select?: MembersTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersTabInclude | null
    /**
     * The data needed to create a MembersTab.
     */
    data: XOR<MembersTabCreateInput, MembersTabUncheckedCreateInput>
  }


  /**
   * MembersTab createMany
   */
  export type MembersTabCreateManyArgs = {
    /**
     * The data used to create many MembersTabs.
     */
    data: Enumerable<MembersTabCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MembersTab update
   */
  export type MembersTabUpdateArgs = {
    /**
     * Select specific fields to fetch from the MembersTab
     */
    select?: MembersTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersTabInclude | null
    /**
     * The data needed to update a MembersTab.
     */
    data: XOR<MembersTabUpdateInput, MembersTabUncheckedUpdateInput>
    /**
     * Choose, which MembersTab to update.
     */
    where: MembersTabWhereUniqueInput
  }


  /**
   * MembersTab updateMany
   */
  export type MembersTabUpdateManyArgs = {
    /**
     * The data used to update MembersTabs.
     */
    data: XOR<MembersTabUpdateManyMutationInput, MembersTabUncheckedUpdateManyInput>
    /**
     * Filter which MembersTabs to update
     */
    where?: MembersTabWhereInput
  }


  /**
   * MembersTab upsert
   */
  export type MembersTabUpsertArgs = {
    /**
     * Select specific fields to fetch from the MembersTab
     */
    select?: MembersTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersTabInclude | null
    /**
     * The filter to search for the MembersTab to update in case it exists.
     */
    where: MembersTabWhereUniqueInput
    /**
     * In case the MembersTab found by the `where` argument doesn't exist, create a new MembersTab with this data.
     */
    create: XOR<MembersTabCreateInput, MembersTabUncheckedCreateInput>
    /**
     * In case the MembersTab was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MembersTabUpdateInput, MembersTabUncheckedUpdateInput>
  }


  /**
   * MembersTab delete
   */
  export type MembersTabDeleteArgs = {
    /**
     * Select specific fields to fetch from the MembersTab
     */
    select?: MembersTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersTabInclude | null
    /**
     * Filter which MembersTab to delete.
     */
    where: MembersTabWhereUniqueInput
  }


  /**
   * MembersTab deleteMany
   */
  export type MembersTabDeleteManyArgs = {
    /**
     * Filter which MembersTabs to delete
     */
    where?: MembersTabWhereInput
  }


  /**
   * MembersTab without action
   */
  export type MembersTabArgs = {
    /**
     * Select specific fields to fetch from the MembersTab
     */
    select?: MembersTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersTabInclude | null
  }



  /**
   * Model BannedMembers
   */


  export type AggregateBannedMembers = {
    _count: BannedMembersCountAggregateOutputType | null
    _min: BannedMembersMinAggregateOutputType | null
    _max: BannedMembersMaxAggregateOutputType | null
  }

  export type BannedMembersMinAggregateOutputType = {
    channel_id: string | null
    banned_id: string | null
    status: MemeberStatusTime | null
    status_end_time: Date | null
  }

  export type BannedMembersMaxAggregateOutputType = {
    channel_id: string | null
    banned_id: string | null
    status: MemeberStatusTime | null
    status_end_time: Date | null
  }

  export type BannedMembersCountAggregateOutputType = {
    channel_id: number
    banned_id: number
    status: number
    status_end_time: number
    _all: number
  }


  export type BannedMembersMinAggregateInputType = {
    channel_id?: true
    banned_id?: true
    status?: true
    status_end_time?: true
  }

  export type BannedMembersMaxAggregateInputType = {
    channel_id?: true
    banned_id?: true
    status?: true
    status_end_time?: true
  }

  export type BannedMembersCountAggregateInputType = {
    channel_id?: true
    banned_id?: true
    status?: true
    status_end_time?: true
    _all?: true
  }

  export type BannedMembersAggregateArgs = {
    /**
     * Filter which BannedMembers to aggregate.
     */
    where?: BannedMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BannedMembers to fetch.
     */
    orderBy?: Enumerable<BannedMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BannedMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BannedMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BannedMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BannedMembers
    **/
    _count?: true | BannedMembersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BannedMembersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BannedMembersMaxAggregateInputType
  }

  export type GetBannedMembersAggregateType<T extends BannedMembersAggregateArgs> = {
        [P in keyof T & keyof AggregateBannedMembers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBannedMembers[P]>
      : GetScalarType<T[P], AggregateBannedMembers[P]>
  }




  export type BannedMembersGroupByArgs = {
    where?: BannedMembersWhereInput
    orderBy?: Enumerable<BannedMembersOrderByWithAggregationInput>
    by: BannedMembersScalarFieldEnum[]
    having?: BannedMembersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BannedMembersCountAggregateInputType | true
    _min?: BannedMembersMinAggregateInputType
    _max?: BannedMembersMaxAggregateInputType
  }


  export type BannedMembersGroupByOutputType = {
    channel_id: string
    banned_id: string
    status: MemeberStatusTime | null
    status_end_time: Date | null
    _count: BannedMembersCountAggregateOutputType | null
    _min: BannedMembersMinAggregateOutputType | null
    _max: BannedMembersMaxAggregateOutputType | null
  }

  type GetBannedMembersGroupByPayload<T extends BannedMembersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BannedMembersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BannedMembersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BannedMembersGroupByOutputType[P]>
            : GetScalarType<T[P], BannedMembersGroupByOutputType[P]>
        }
      >
    >


  export type BannedMembersSelect = {
    channel_id?: boolean
    banned_id?: boolean
    status?: boolean
    status_end_time?: boolean
    channel?: boolean | ChannelArgs
  }


  export type BannedMembersInclude = {
    channel?: boolean | ChannelArgs
  }

  export type BannedMembersGetPayload<S extends boolean | null | undefined | BannedMembersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BannedMembers :
    S extends undefined ? never :
    S extends { include: any } & (BannedMembersArgs | BannedMembersFindManyArgs)
    ? BannedMembers  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'channel' ? ChannelGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BannedMembersArgs | BannedMembersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'channel' ? ChannelGetPayload<S['select'][P]> :  P extends keyof BannedMembers ? BannedMembers[P] : never
  } 
      : BannedMembers


  type BannedMembersCountArgs = 
    Omit<BannedMembersFindManyArgs, 'select' | 'include'> & {
      select?: BannedMembersCountAggregateInputType | true
    }

  export interface BannedMembersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one BannedMembers that matches the filter.
     * @param {BannedMembersFindUniqueArgs} args - Arguments to find a BannedMembers
     * @example
     * // Get one BannedMembers
     * const bannedMembers = await prisma.bannedMembers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BannedMembersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BannedMembersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BannedMembers'> extends True ? Prisma__BannedMembersClient<BannedMembersGetPayload<T>> : Prisma__BannedMembersClient<BannedMembersGetPayload<T> | null, null>

    /**
     * Find one BannedMembers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BannedMembersFindUniqueOrThrowArgs} args - Arguments to find a BannedMembers
     * @example
     * // Get one BannedMembers
     * const bannedMembers = await prisma.bannedMembers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BannedMembersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BannedMembersFindUniqueOrThrowArgs>
    ): Prisma__BannedMembersClient<BannedMembersGetPayload<T>>

    /**
     * Find the first BannedMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedMembersFindFirstArgs} args - Arguments to find a BannedMembers
     * @example
     * // Get one BannedMembers
     * const bannedMembers = await prisma.bannedMembers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BannedMembersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BannedMembersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BannedMembers'> extends True ? Prisma__BannedMembersClient<BannedMembersGetPayload<T>> : Prisma__BannedMembersClient<BannedMembersGetPayload<T> | null, null>

    /**
     * Find the first BannedMembers that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedMembersFindFirstOrThrowArgs} args - Arguments to find a BannedMembers
     * @example
     * // Get one BannedMembers
     * const bannedMembers = await prisma.bannedMembers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BannedMembersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BannedMembersFindFirstOrThrowArgs>
    ): Prisma__BannedMembersClient<BannedMembersGetPayload<T>>

    /**
     * Find zero or more BannedMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedMembersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BannedMembers
     * const bannedMembers = await prisma.bannedMembers.findMany()
     * 
     * // Get first 10 BannedMembers
     * const bannedMembers = await prisma.bannedMembers.findMany({ take: 10 })
     * 
     * // Only select the `channel_id`
     * const bannedMembersWithChannel_idOnly = await prisma.bannedMembers.findMany({ select: { channel_id: true } })
     * 
    **/
    findMany<T extends BannedMembersFindManyArgs>(
      args?: SelectSubset<T, BannedMembersFindManyArgs>
    ): Prisma.PrismaPromise<Array<BannedMembersGetPayload<T>>>

    /**
     * Create a BannedMembers.
     * @param {BannedMembersCreateArgs} args - Arguments to create a BannedMembers.
     * @example
     * // Create one BannedMembers
     * const BannedMembers = await prisma.bannedMembers.create({
     *   data: {
     *     // ... data to create a BannedMembers
     *   }
     * })
     * 
    **/
    create<T extends BannedMembersCreateArgs>(
      args: SelectSubset<T, BannedMembersCreateArgs>
    ): Prisma__BannedMembersClient<BannedMembersGetPayload<T>>

    /**
     * Create many BannedMembers.
     *     @param {BannedMembersCreateManyArgs} args - Arguments to create many BannedMembers.
     *     @example
     *     // Create many BannedMembers
     *     const bannedMembers = await prisma.bannedMembers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BannedMembersCreateManyArgs>(
      args?: SelectSubset<T, BannedMembersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BannedMembers.
     * @param {BannedMembersDeleteArgs} args - Arguments to delete one BannedMembers.
     * @example
     * // Delete one BannedMembers
     * const BannedMembers = await prisma.bannedMembers.delete({
     *   where: {
     *     // ... filter to delete one BannedMembers
     *   }
     * })
     * 
    **/
    delete<T extends BannedMembersDeleteArgs>(
      args: SelectSubset<T, BannedMembersDeleteArgs>
    ): Prisma__BannedMembersClient<BannedMembersGetPayload<T>>

    /**
     * Update one BannedMembers.
     * @param {BannedMembersUpdateArgs} args - Arguments to update one BannedMembers.
     * @example
     * // Update one BannedMembers
     * const bannedMembers = await prisma.bannedMembers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BannedMembersUpdateArgs>(
      args: SelectSubset<T, BannedMembersUpdateArgs>
    ): Prisma__BannedMembersClient<BannedMembersGetPayload<T>>

    /**
     * Delete zero or more BannedMembers.
     * @param {BannedMembersDeleteManyArgs} args - Arguments to filter BannedMembers to delete.
     * @example
     * // Delete a few BannedMembers
     * const { count } = await prisma.bannedMembers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BannedMembersDeleteManyArgs>(
      args?: SelectSubset<T, BannedMembersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BannedMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedMembersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BannedMembers
     * const bannedMembers = await prisma.bannedMembers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BannedMembersUpdateManyArgs>(
      args: SelectSubset<T, BannedMembersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BannedMembers.
     * @param {BannedMembersUpsertArgs} args - Arguments to update or create a BannedMembers.
     * @example
     * // Update or create a BannedMembers
     * const bannedMembers = await prisma.bannedMembers.upsert({
     *   create: {
     *     // ... data to create a BannedMembers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BannedMembers we want to update
     *   }
     * })
    **/
    upsert<T extends BannedMembersUpsertArgs>(
      args: SelectSubset<T, BannedMembersUpsertArgs>
    ): Prisma__BannedMembersClient<BannedMembersGetPayload<T>>

    /**
     * Count the number of BannedMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedMembersCountArgs} args - Arguments to filter BannedMembers to count.
     * @example
     * // Count the number of BannedMembers
     * const count = await prisma.bannedMembers.count({
     *   where: {
     *     // ... the filter for the BannedMembers we want to count
     *   }
     * })
    **/
    count<T extends BannedMembersCountArgs>(
      args?: Subset<T, BannedMembersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BannedMembersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BannedMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedMembersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BannedMembersAggregateArgs>(args: Subset<T, BannedMembersAggregateArgs>): Prisma.PrismaPromise<GetBannedMembersAggregateType<T>>

    /**
     * Group by BannedMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedMembersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BannedMembersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BannedMembersGroupByArgs['orderBy'] }
        : { orderBy?: BannedMembersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BannedMembersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBannedMembersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for BannedMembers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BannedMembersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    channel<T extends ChannelArgs= {}>(args?: Subset<T, ChannelArgs>): Prisma__ChannelClient<ChannelGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * BannedMembers base type for findUnique actions
   */
  export type BannedMembersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the BannedMembers
     */
    select?: BannedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BannedMembersInclude | null
    /**
     * Filter, which BannedMembers to fetch.
     */
    where: BannedMembersWhereUniqueInput
  }

  /**
   * BannedMembers findUnique
   */
  export interface BannedMembersFindUniqueArgs extends BannedMembersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BannedMembers findUniqueOrThrow
   */
  export type BannedMembersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BannedMembers
     */
    select?: BannedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BannedMembersInclude | null
    /**
     * Filter, which BannedMembers to fetch.
     */
    where: BannedMembersWhereUniqueInput
  }


  /**
   * BannedMembers base type for findFirst actions
   */
  export type BannedMembersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the BannedMembers
     */
    select?: BannedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BannedMembersInclude | null
    /**
     * Filter, which BannedMembers to fetch.
     */
    where?: BannedMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BannedMembers to fetch.
     */
    orderBy?: Enumerable<BannedMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BannedMembers.
     */
    cursor?: BannedMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BannedMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BannedMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BannedMembers.
     */
    distinct?: Enumerable<BannedMembersScalarFieldEnum>
  }

  /**
   * BannedMembers findFirst
   */
  export interface BannedMembersFindFirstArgs extends BannedMembersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BannedMembers findFirstOrThrow
   */
  export type BannedMembersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BannedMembers
     */
    select?: BannedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BannedMembersInclude | null
    /**
     * Filter, which BannedMembers to fetch.
     */
    where?: BannedMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BannedMembers to fetch.
     */
    orderBy?: Enumerable<BannedMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BannedMembers.
     */
    cursor?: BannedMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BannedMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BannedMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BannedMembers.
     */
    distinct?: Enumerable<BannedMembersScalarFieldEnum>
  }


  /**
   * BannedMembers findMany
   */
  export type BannedMembersFindManyArgs = {
    /**
     * Select specific fields to fetch from the BannedMembers
     */
    select?: BannedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BannedMembersInclude | null
    /**
     * Filter, which BannedMembers to fetch.
     */
    where?: BannedMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BannedMembers to fetch.
     */
    orderBy?: Enumerable<BannedMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BannedMembers.
     */
    cursor?: BannedMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BannedMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BannedMembers.
     */
    skip?: number
    distinct?: Enumerable<BannedMembersScalarFieldEnum>
  }


  /**
   * BannedMembers create
   */
  export type BannedMembersCreateArgs = {
    /**
     * Select specific fields to fetch from the BannedMembers
     */
    select?: BannedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BannedMembersInclude | null
    /**
     * The data needed to create a BannedMembers.
     */
    data: XOR<BannedMembersCreateInput, BannedMembersUncheckedCreateInput>
  }


  /**
   * BannedMembers createMany
   */
  export type BannedMembersCreateManyArgs = {
    /**
     * The data used to create many BannedMembers.
     */
    data: Enumerable<BannedMembersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BannedMembers update
   */
  export type BannedMembersUpdateArgs = {
    /**
     * Select specific fields to fetch from the BannedMembers
     */
    select?: BannedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BannedMembersInclude | null
    /**
     * The data needed to update a BannedMembers.
     */
    data: XOR<BannedMembersUpdateInput, BannedMembersUncheckedUpdateInput>
    /**
     * Choose, which BannedMembers to update.
     */
    where: BannedMembersWhereUniqueInput
  }


  /**
   * BannedMembers updateMany
   */
  export type BannedMembersUpdateManyArgs = {
    /**
     * The data used to update BannedMembers.
     */
    data: XOR<BannedMembersUpdateManyMutationInput, BannedMembersUncheckedUpdateManyInput>
    /**
     * Filter which BannedMembers to update
     */
    where?: BannedMembersWhereInput
  }


  /**
   * BannedMembers upsert
   */
  export type BannedMembersUpsertArgs = {
    /**
     * Select specific fields to fetch from the BannedMembers
     */
    select?: BannedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BannedMembersInclude | null
    /**
     * The filter to search for the BannedMembers to update in case it exists.
     */
    where: BannedMembersWhereUniqueInput
    /**
     * In case the BannedMembers found by the `where` argument doesn't exist, create a new BannedMembers with this data.
     */
    create: XOR<BannedMembersCreateInput, BannedMembersUncheckedCreateInput>
    /**
     * In case the BannedMembers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BannedMembersUpdateInput, BannedMembersUncheckedUpdateInput>
  }


  /**
   * BannedMembers delete
   */
  export type BannedMembersDeleteArgs = {
    /**
     * Select specific fields to fetch from the BannedMembers
     */
    select?: BannedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BannedMembersInclude | null
    /**
     * Filter which BannedMembers to delete.
     */
    where: BannedMembersWhereUniqueInput
  }


  /**
   * BannedMembers deleteMany
   */
  export type BannedMembersDeleteManyArgs = {
    /**
     * Filter which BannedMembers to delete
     */
    where?: BannedMembersWhereInput
  }


  /**
   * BannedMembers without action
   */
  export type BannedMembersArgs = {
    /**
     * Select specific fields to fetch from the BannedMembers
     */
    select?: BannedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BannedMembersInclude | null
  }



  /**
   * Model AdminMembers
   */


  export type AggregateAdminMembers = {
    _count: AdminMembersCountAggregateOutputType | null
    _min: AdminMembersMinAggregateOutputType | null
    _max: AdminMembersMaxAggregateOutputType | null
  }

  export type AdminMembersMinAggregateOutputType = {
    channel_id: string | null
    admin_id: string | null
  }

  export type AdminMembersMaxAggregateOutputType = {
    channel_id: string | null
    admin_id: string | null
  }

  export type AdminMembersCountAggregateOutputType = {
    channel_id: number
    admin_id: number
    _all: number
  }


  export type AdminMembersMinAggregateInputType = {
    channel_id?: true
    admin_id?: true
  }

  export type AdminMembersMaxAggregateInputType = {
    channel_id?: true
    admin_id?: true
  }

  export type AdminMembersCountAggregateInputType = {
    channel_id?: true
    admin_id?: true
    _all?: true
  }

  export type AdminMembersAggregateArgs = {
    /**
     * Filter which AdminMembers to aggregate.
     */
    where?: AdminMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminMembers to fetch.
     */
    orderBy?: Enumerable<AdminMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminMembers
    **/
    _count?: true | AdminMembersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMembersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMembersMaxAggregateInputType
  }

  export type GetAdminMembersAggregateType<T extends AdminMembersAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminMembers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminMembers[P]>
      : GetScalarType<T[P], AggregateAdminMembers[P]>
  }




  export type AdminMembersGroupByArgs = {
    where?: AdminMembersWhereInput
    orderBy?: Enumerable<AdminMembersOrderByWithAggregationInput>
    by: AdminMembersScalarFieldEnum[]
    having?: AdminMembersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminMembersCountAggregateInputType | true
    _min?: AdminMembersMinAggregateInputType
    _max?: AdminMembersMaxAggregateInputType
  }


  export type AdminMembersGroupByOutputType = {
    channel_id: string
    admin_id: string
    _count: AdminMembersCountAggregateOutputType | null
    _min: AdminMembersMinAggregateOutputType | null
    _max: AdminMembersMaxAggregateOutputType | null
  }

  type GetAdminMembersGroupByPayload<T extends AdminMembersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AdminMembersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminMembersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminMembersGroupByOutputType[P]>
            : GetScalarType<T[P], AdminMembersGroupByOutputType[P]>
        }
      >
    >


  export type AdminMembersSelect = {
    channel_id?: boolean
    admin_id?: boolean
    channel?: boolean | ChannelArgs
  }


  export type AdminMembersInclude = {
    channel?: boolean | ChannelArgs
  }

  export type AdminMembersGetPayload<S extends boolean | null | undefined | AdminMembersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AdminMembers :
    S extends undefined ? never :
    S extends { include: any } & (AdminMembersArgs | AdminMembersFindManyArgs)
    ? AdminMembers  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'channel' ? ChannelGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AdminMembersArgs | AdminMembersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'channel' ? ChannelGetPayload<S['select'][P]> :  P extends keyof AdminMembers ? AdminMembers[P] : never
  } 
      : AdminMembers


  type AdminMembersCountArgs = 
    Omit<AdminMembersFindManyArgs, 'select' | 'include'> & {
      select?: AdminMembersCountAggregateInputType | true
    }

  export interface AdminMembersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one AdminMembers that matches the filter.
     * @param {AdminMembersFindUniqueArgs} args - Arguments to find a AdminMembers
     * @example
     * // Get one AdminMembers
     * const adminMembers = await prisma.adminMembers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminMembersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AdminMembersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'AdminMembers'> extends True ? Prisma__AdminMembersClient<AdminMembersGetPayload<T>> : Prisma__AdminMembersClient<AdminMembersGetPayload<T> | null, null>

    /**
     * Find one AdminMembers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdminMembersFindUniqueOrThrowArgs} args - Arguments to find a AdminMembers
     * @example
     * // Get one AdminMembers
     * const adminMembers = await prisma.adminMembers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminMembersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AdminMembersFindUniqueOrThrowArgs>
    ): Prisma__AdminMembersClient<AdminMembersGetPayload<T>>

    /**
     * Find the first AdminMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminMembersFindFirstArgs} args - Arguments to find a AdminMembers
     * @example
     * // Get one AdminMembers
     * const adminMembers = await prisma.adminMembers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminMembersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AdminMembersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'AdminMembers'> extends True ? Prisma__AdminMembersClient<AdminMembersGetPayload<T>> : Prisma__AdminMembersClient<AdminMembersGetPayload<T> | null, null>

    /**
     * Find the first AdminMembers that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminMembersFindFirstOrThrowArgs} args - Arguments to find a AdminMembers
     * @example
     * // Get one AdminMembers
     * const adminMembers = await prisma.adminMembers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminMembersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AdminMembersFindFirstOrThrowArgs>
    ): Prisma__AdminMembersClient<AdminMembersGetPayload<T>>

    /**
     * Find zero or more AdminMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminMembersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminMembers
     * const adminMembers = await prisma.adminMembers.findMany()
     * 
     * // Get first 10 AdminMembers
     * const adminMembers = await prisma.adminMembers.findMany({ take: 10 })
     * 
     * // Only select the `channel_id`
     * const adminMembersWithChannel_idOnly = await prisma.adminMembers.findMany({ select: { channel_id: true } })
     * 
    **/
    findMany<T extends AdminMembersFindManyArgs>(
      args?: SelectSubset<T, AdminMembersFindManyArgs>
    ): Prisma.PrismaPromise<Array<AdminMembersGetPayload<T>>>

    /**
     * Create a AdminMembers.
     * @param {AdminMembersCreateArgs} args - Arguments to create a AdminMembers.
     * @example
     * // Create one AdminMembers
     * const AdminMembers = await prisma.adminMembers.create({
     *   data: {
     *     // ... data to create a AdminMembers
     *   }
     * })
     * 
    **/
    create<T extends AdminMembersCreateArgs>(
      args: SelectSubset<T, AdminMembersCreateArgs>
    ): Prisma__AdminMembersClient<AdminMembersGetPayload<T>>

    /**
     * Create many AdminMembers.
     *     @param {AdminMembersCreateManyArgs} args - Arguments to create many AdminMembers.
     *     @example
     *     // Create many AdminMembers
     *     const adminMembers = await prisma.adminMembers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdminMembersCreateManyArgs>(
      args?: SelectSubset<T, AdminMembersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AdminMembers.
     * @param {AdminMembersDeleteArgs} args - Arguments to delete one AdminMembers.
     * @example
     * // Delete one AdminMembers
     * const AdminMembers = await prisma.adminMembers.delete({
     *   where: {
     *     // ... filter to delete one AdminMembers
     *   }
     * })
     * 
    **/
    delete<T extends AdminMembersDeleteArgs>(
      args: SelectSubset<T, AdminMembersDeleteArgs>
    ): Prisma__AdminMembersClient<AdminMembersGetPayload<T>>

    /**
     * Update one AdminMembers.
     * @param {AdminMembersUpdateArgs} args - Arguments to update one AdminMembers.
     * @example
     * // Update one AdminMembers
     * const adminMembers = await prisma.adminMembers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminMembersUpdateArgs>(
      args: SelectSubset<T, AdminMembersUpdateArgs>
    ): Prisma__AdminMembersClient<AdminMembersGetPayload<T>>

    /**
     * Delete zero or more AdminMembers.
     * @param {AdminMembersDeleteManyArgs} args - Arguments to filter AdminMembers to delete.
     * @example
     * // Delete a few AdminMembers
     * const { count } = await prisma.adminMembers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminMembersDeleteManyArgs>(
      args?: SelectSubset<T, AdminMembersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminMembersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminMembers
     * const adminMembers = await prisma.adminMembers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminMembersUpdateManyArgs>(
      args: SelectSubset<T, AdminMembersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AdminMembers.
     * @param {AdminMembersUpsertArgs} args - Arguments to update or create a AdminMembers.
     * @example
     * // Update or create a AdminMembers
     * const adminMembers = await prisma.adminMembers.upsert({
     *   create: {
     *     // ... data to create a AdminMembers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminMembers we want to update
     *   }
     * })
    **/
    upsert<T extends AdminMembersUpsertArgs>(
      args: SelectSubset<T, AdminMembersUpsertArgs>
    ): Prisma__AdminMembersClient<AdminMembersGetPayload<T>>

    /**
     * Count the number of AdminMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminMembersCountArgs} args - Arguments to filter AdminMembers to count.
     * @example
     * // Count the number of AdminMembers
     * const count = await prisma.adminMembers.count({
     *   where: {
     *     // ... the filter for the AdminMembers we want to count
     *   }
     * })
    **/
    count<T extends AdminMembersCountArgs>(
      args?: Subset<T, AdminMembersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminMembersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminMembersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminMembersAggregateArgs>(args: Subset<T, AdminMembersAggregateArgs>): Prisma.PrismaPromise<GetAdminMembersAggregateType<T>>

    /**
     * Group by AdminMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminMembersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminMembersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminMembersGroupByArgs['orderBy'] }
        : { orderBy?: AdminMembersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminMembersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminMembersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminMembers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AdminMembersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    channel<T extends ChannelArgs= {}>(args?: Subset<T, ChannelArgs>): Prisma__ChannelClient<ChannelGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * AdminMembers base type for findUnique actions
   */
  export type AdminMembersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the AdminMembers
     */
    select?: AdminMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminMembersInclude | null
    /**
     * Filter, which AdminMembers to fetch.
     */
    where: AdminMembersWhereUniqueInput
  }

  /**
   * AdminMembers findUnique
   */
  export interface AdminMembersFindUniqueArgs extends AdminMembersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AdminMembers findUniqueOrThrow
   */
  export type AdminMembersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the AdminMembers
     */
    select?: AdminMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminMembersInclude | null
    /**
     * Filter, which AdminMembers to fetch.
     */
    where: AdminMembersWhereUniqueInput
  }


  /**
   * AdminMembers base type for findFirst actions
   */
  export type AdminMembersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the AdminMembers
     */
    select?: AdminMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminMembersInclude | null
    /**
     * Filter, which AdminMembers to fetch.
     */
    where?: AdminMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminMembers to fetch.
     */
    orderBy?: Enumerable<AdminMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminMembers.
     */
    cursor?: AdminMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminMembers.
     */
    distinct?: Enumerable<AdminMembersScalarFieldEnum>
  }

  /**
   * AdminMembers findFirst
   */
  export interface AdminMembersFindFirstArgs extends AdminMembersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AdminMembers findFirstOrThrow
   */
  export type AdminMembersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the AdminMembers
     */
    select?: AdminMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminMembersInclude | null
    /**
     * Filter, which AdminMembers to fetch.
     */
    where?: AdminMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminMembers to fetch.
     */
    orderBy?: Enumerable<AdminMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminMembers.
     */
    cursor?: AdminMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminMembers.
     */
    distinct?: Enumerable<AdminMembersScalarFieldEnum>
  }


  /**
   * AdminMembers findMany
   */
  export type AdminMembersFindManyArgs = {
    /**
     * Select specific fields to fetch from the AdminMembers
     */
    select?: AdminMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminMembersInclude | null
    /**
     * Filter, which AdminMembers to fetch.
     */
    where?: AdminMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminMembers to fetch.
     */
    orderBy?: Enumerable<AdminMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminMembers.
     */
    cursor?: AdminMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminMembers.
     */
    skip?: number
    distinct?: Enumerable<AdminMembersScalarFieldEnum>
  }


  /**
   * AdminMembers create
   */
  export type AdminMembersCreateArgs = {
    /**
     * Select specific fields to fetch from the AdminMembers
     */
    select?: AdminMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminMembersInclude | null
    /**
     * The data needed to create a AdminMembers.
     */
    data: XOR<AdminMembersCreateInput, AdminMembersUncheckedCreateInput>
  }


  /**
   * AdminMembers createMany
   */
  export type AdminMembersCreateManyArgs = {
    /**
     * The data used to create many AdminMembers.
     */
    data: Enumerable<AdminMembersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * AdminMembers update
   */
  export type AdminMembersUpdateArgs = {
    /**
     * Select specific fields to fetch from the AdminMembers
     */
    select?: AdminMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminMembersInclude | null
    /**
     * The data needed to update a AdminMembers.
     */
    data: XOR<AdminMembersUpdateInput, AdminMembersUncheckedUpdateInput>
    /**
     * Choose, which AdminMembers to update.
     */
    where: AdminMembersWhereUniqueInput
  }


  /**
   * AdminMembers updateMany
   */
  export type AdminMembersUpdateManyArgs = {
    /**
     * The data used to update AdminMembers.
     */
    data: XOR<AdminMembersUpdateManyMutationInput, AdminMembersUncheckedUpdateManyInput>
    /**
     * Filter which AdminMembers to update
     */
    where?: AdminMembersWhereInput
  }


  /**
   * AdminMembers upsert
   */
  export type AdminMembersUpsertArgs = {
    /**
     * Select specific fields to fetch from the AdminMembers
     */
    select?: AdminMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminMembersInclude | null
    /**
     * The filter to search for the AdminMembers to update in case it exists.
     */
    where: AdminMembersWhereUniqueInput
    /**
     * In case the AdminMembers found by the `where` argument doesn't exist, create a new AdminMembers with this data.
     */
    create: XOR<AdminMembersCreateInput, AdminMembersUncheckedCreateInput>
    /**
     * In case the AdminMembers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminMembersUpdateInput, AdminMembersUncheckedUpdateInput>
  }


  /**
   * AdminMembers delete
   */
  export type AdminMembersDeleteArgs = {
    /**
     * Select specific fields to fetch from the AdminMembers
     */
    select?: AdminMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminMembersInclude | null
    /**
     * Filter which AdminMembers to delete.
     */
    where: AdminMembersWhereUniqueInput
  }


  /**
   * AdminMembers deleteMany
   */
  export type AdminMembersDeleteManyArgs = {
    /**
     * Filter which AdminMembers to delete
     */
    where?: AdminMembersWhereInput
  }


  /**
   * AdminMembers without action
   */
  export type AdminMembersArgs = {
    /**
     * Select specific fields to fetch from the AdminMembers
     */
    select?: AdminMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminMembersInclude | null
  }



  /**
   * Model kickedMembers
   */


  export type AggregateKickedMembers = {
    _count: KickedMembersCountAggregateOutputType | null
    _min: KickedMembersMinAggregateOutputType | null
    _max: KickedMembersMaxAggregateOutputType | null
  }

  export type KickedMembersMinAggregateOutputType = {
    channel_id: string | null
    kicked_id: string | null
  }

  export type KickedMembersMaxAggregateOutputType = {
    channel_id: string | null
    kicked_id: string | null
  }

  export type KickedMembersCountAggregateOutputType = {
    channel_id: number
    kicked_id: number
    _all: number
  }


  export type KickedMembersMinAggregateInputType = {
    channel_id?: true
    kicked_id?: true
  }

  export type KickedMembersMaxAggregateInputType = {
    channel_id?: true
    kicked_id?: true
  }

  export type KickedMembersCountAggregateInputType = {
    channel_id?: true
    kicked_id?: true
    _all?: true
  }

  export type KickedMembersAggregateArgs = {
    /**
     * Filter which kickedMembers to aggregate.
     */
    where?: kickedMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kickedMembers to fetch.
     */
    orderBy?: Enumerable<kickedMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: kickedMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kickedMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kickedMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned kickedMembers
    **/
    _count?: true | KickedMembersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KickedMembersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KickedMembersMaxAggregateInputType
  }

  export type GetKickedMembersAggregateType<T extends KickedMembersAggregateArgs> = {
        [P in keyof T & keyof AggregateKickedMembers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKickedMembers[P]>
      : GetScalarType<T[P], AggregateKickedMembers[P]>
  }




  export type KickedMembersGroupByArgs = {
    where?: kickedMembersWhereInput
    orderBy?: Enumerable<kickedMembersOrderByWithAggregationInput>
    by: KickedMembersScalarFieldEnum[]
    having?: kickedMembersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KickedMembersCountAggregateInputType | true
    _min?: KickedMembersMinAggregateInputType
    _max?: KickedMembersMaxAggregateInputType
  }


  export type KickedMembersGroupByOutputType = {
    channel_id: string
    kicked_id: string
    _count: KickedMembersCountAggregateOutputType | null
    _min: KickedMembersMinAggregateOutputType | null
    _max: KickedMembersMaxAggregateOutputType | null
  }

  type GetKickedMembersGroupByPayload<T extends KickedMembersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<KickedMembersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KickedMembersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KickedMembersGroupByOutputType[P]>
            : GetScalarType<T[P], KickedMembersGroupByOutputType[P]>
        }
      >
    >


  export type kickedMembersSelect = {
    channel_id?: boolean
    kicked_id?: boolean
    channel?: boolean | ChannelArgs
  }


  export type kickedMembersInclude = {
    channel?: boolean | ChannelArgs
  }

  export type kickedMembersGetPayload<S extends boolean | null | undefined | kickedMembersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? kickedMembers :
    S extends undefined ? never :
    S extends { include: any } & (kickedMembersArgs | kickedMembersFindManyArgs)
    ? kickedMembers  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'channel' ? ChannelGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (kickedMembersArgs | kickedMembersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'channel' ? ChannelGetPayload<S['select'][P]> :  P extends keyof kickedMembers ? kickedMembers[P] : never
  } 
      : kickedMembers


  type kickedMembersCountArgs = 
    Omit<kickedMembersFindManyArgs, 'select' | 'include'> & {
      select?: KickedMembersCountAggregateInputType | true
    }

  export interface kickedMembersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one KickedMembers that matches the filter.
     * @param {kickedMembersFindUniqueArgs} args - Arguments to find a KickedMembers
     * @example
     * // Get one KickedMembers
     * const kickedMembers = await prisma.kickedMembers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends kickedMembersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, kickedMembersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'kickedMembers'> extends True ? Prisma__kickedMembersClient<kickedMembersGetPayload<T>> : Prisma__kickedMembersClient<kickedMembersGetPayload<T> | null, null>

    /**
     * Find one KickedMembers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {kickedMembersFindUniqueOrThrowArgs} args - Arguments to find a KickedMembers
     * @example
     * // Get one KickedMembers
     * const kickedMembers = await prisma.kickedMembers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends kickedMembersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, kickedMembersFindUniqueOrThrowArgs>
    ): Prisma__kickedMembersClient<kickedMembersGetPayload<T>>

    /**
     * Find the first KickedMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kickedMembersFindFirstArgs} args - Arguments to find a KickedMembers
     * @example
     * // Get one KickedMembers
     * const kickedMembers = await prisma.kickedMembers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends kickedMembersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, kickedMembersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'kickedMembers'> extends True ? Prisma__kickedMembersClient<kickedMembersGetPayload<T>> : Prisma__kickedMembersClient<kickedMembersGetPayload<T> | null, null>

    /**
     * Find the first KickedMembers that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kickedMembersFindFirstOrThrowArgs} args - Arguments to find a KickedMembers
     * @example
     * // Get one KickedMembers
     * const kickedMembers = await prisma.kickedMembers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends kickedMembersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, kickedMembersFindFirstOrThrowArgs>
    ): Prisma__kickedMembersClient<kickedMembersGetPayload<T>>

    /**
     * Find zero or more KickedMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kickedMembersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KickedMembers
     * const kickedMembers = await prisma.kickedMembers.findMany()
     * 
     * // Get first 10 KickedMembers
     * const kickedMembers = await prisma.kickedMembers.findMany({ take: 10 })
     * 
     * // Only select the `channel_id`
     * const kickedMembersWithChannel_idOnly = await prisma.kickedMembers.findMany({ select: { channel_id: true } })
     * 
    **/
    findMany<T extends kickedMembersFindManyArgs>(
      args?: SelectSubset<T, kickedMembersFindManyArgs>
    ): Prisma.PrismaPromise<Array<kickedMembersGetPayload<T>>>

    /**
     * Create a KickedMembers.
     * @param {kickedMembersCreateArgs} args - Arguments to create a KickedMembers.
     * @example
     * // Create one KickedMembers
     * const KickedMembers = await prisma.kickedMembers.create({
     *   data: {
     *     // ... data to create a KickedMembers
     *   }
     * })
     * 
    **/
    create<T extends kickedMembersCreateArgs>(
      args: SelectSubset<T, kickedMembersCreateArgs>
    ): Prisma__kickedMembersClient<kickedMembersGetPayload<T>>

    /**
     * Create many KickedMembers.
     *     @param {kickedMembersCreateManyArgs} args - Arguments to create many KickedMembers.
     *     @example
     *     // Create many KickedMembers
     *     const kickedMembers = await prisma.kickedMembers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends kickedMembersCreateManyArgs>(
      args?: SelectSubset<T, kickedMembersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a KickedMembers.
     * @param {kickedMembersDeleteArgs} args - Arguments to delete one KickedMembers.
     * @example
     * // Delete one KickedMembers
     * const KickedMembers = await prisma.kickedMembers.delete({
     *   where: {
     *     // ... filter to delete one KickedMembers
     *   }
     * })
     * 
    **/
    delete<T extends kickedMembersDeleteArgs>(
      args: SelectSubset<T, kickedMembersDeleteArgs>
    ): Prisma__kickedMembersClient<kickedMembersGetPayload<T>>

    /**
     * Update one KickedMembers.
     * @param {kickedMembersUpdateArgs} args - Arguments to update one KickedMembers.
     * @example
     * // Update one KickedMembers
     * const kickedMembers = await prisma.kickedMembers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends kickedMembersUpdateArgs>(
      args: SelectSubset<T, kickedMembersUpdateArgs>
    ): Prisma__kickedMembersClient<kickedMembersGetPayload<T>>

    /**
     * Delete zero or more KickedMembers.
     * @param {kickedMembersDeleteManyArgs} args - Arguments to filter KickedMembers to delete.
     * @example
     * // Delete a few KickedMembers
     * const { count } = await prisma.kickedMembers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends kickedMembersDeleteManyArgs>(
      args?: SelectSubset<T, kickedMembersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KickedMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kickedMembersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KickedMembers
     * const kickedMembers = await prisma.kickedMembers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends kickedMembersUpdateManyArgs>(
      args: SelectSubset<T, kickedMembersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one KickedMembers.
     * @param {kickedMembersUpsertArgs} args - Arguments to update or create a KickedMembers.
     * @example
     * // Update or create a KickedMembers
     * const kickedMembers = await prisma.kickedMembers.upsert({
     *   create: {
     *     // ... data to create a KickedMembers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KickedMembers we want to update
     *   }
     * })
    **/
    upsert<T extends kickedMembersUpsertArgs>(
      args: SelectSubset<T, kickedMembersUpsertArgs>
    ): Prisma__kickedMembersClient<kickedMembersGetPayload<T>>

    /**
     * Count the number of KickedMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kickedMembersCountArgs} args - Arguments to filter KickedMembers to count.
     * @example
     * // Count the number of KickedMembers
     * const count = await prisma.kickedMembers.count({
     *   where: {
     *     // ... the filter for the KickedMembers we want to count
     *   }
     * })
    **/
    count<T extends kickedMembersCountArgs>(
      args?: Subset<T, kickedMembersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KickedMembersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KickedMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KickedMembersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KickedMembersAggregateArgs>(args: Subset<T, KickedMembersAggregateArgs>): Prisma.PrismaPromise<GetKickedMembersAggregateType<T>>

    /**
     * Group by KickedMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KickedMembersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KickedMembersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KickedMembersGroupByArgs['orderBy'] }
        : { orderBy?: KickedMembersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KickedMembersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKickedMembersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for kickedMembers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__kickedMembersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    channel<T extends ChannelArgs= {}>(args?: Subset<T, ChannelArgs>): Prisma__ChannelClient<ChannelGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * kickedMembers base type for findUnique actions
   */
  export type kickedMembersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the kickedMembers
     */
    select?: kickedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: kickedMembersInclude | null
    /**
     * Filter, which kickedMembers to fetch.
     */
    where: kickedMembersWhereUniqueInput
  }

  /**
   * kickedMembers findUnique
   */
  export interface kickedMembersFindUniqueArgs extends kickedMembersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * kickedMembers findUniqueOrThrow
   */
  export type kickedMembersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the kickedMembers
     */
    select?: kickedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: kickedMembersInclude | null
    /**
     * Filter, which kickedMembers to fetch.
     */
    where: kickedMembersWhereUniqueInput
  }


  /**
   * kickedMembers base type for findFirst actions
   */
  export type kickedMembersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the kickedMembers
     */
    select?: kickedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: kickedMembersInclude | null
    /**
     * Filter, which kickedMembers to fetch.
     */
    where?: kickedMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kickedMembers to fetch.
     */
    orderBy?: Enumerable<kickedMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for kickedMembers.
     */
    cursor?: kickedMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kickedMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kickedMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of kickedMembers.
     */
    distinct?: Enumerable<KickedMembersScalarFieldEnum>
  }

  /**
   * kickedMembers findFirst
   */
  export interface kickedMembersFindFirstArgs extends kickedMembersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * kickedMembers findFirstOrThrow
   */
  export type kickedMembersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the kickedMembers
     */
    select?: kickedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: kickedMembersInclude | null
    /**
     * Filter, which kickedMembers to fetch.
     */
    where?: kickedMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kickedMembers to fetch.
     */
    orderBy?: Enumerable<kickedMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for kickedMembers.
     */
    cursor?: kickedMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kickedMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kickedMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of kickedMembers.
     */
    distinct?: Enumerable<KickedMembersScalarFieldEnum>
  }


  /**
   * kickedMembers findMany
   */
  export type kickedMembersFindManyArgs = {
    /**
     * Select specific fields to fetch from the kickedMembers
     */
    select?: kickedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: kickedMembersInclude | null
    /**
     * Filter, which kickedMembers to fetch.
     */
    where?: kickedMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kickedMembers to fetch.
     */
    orderBy?: Enumerable<kickedMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing kickedMembers.
     */
    cursor?: kickedMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kickedMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kickedMembers.
     */
    skip?: number
    distinct?: Enumerable<KickedMembersScalarFieldEnum>
  }


  /**
   * kickedMembers create
   */
  export type kickedMembersCreateArgs = {
    /**
     * Select specific fields to fetch from the kickedMembers
     */
    select?: kickedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: kickedMembersInclude | null
    /**
     * The data needed to create a kickedMembers.
     */
    data: XOR<kickedMembersCreateInput, kickedMembersUncheckedCreateInput>
  }


  /**
   * kickedMembers createMany
   */
  export type kickedMembersCreateManyArgs = {
    /**
     * The data used to create many kickedMembers.
     */
    data: Enumerable<kickedMembersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * kickedMembers update
   */
  export type kickedMembersUpdateArgs = {
    /**
     * Select specific fields to fetch from the kickedMembers
     */
    select?: kickedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: kickedMembersInclude | null
    /**
     * The data needed to update a kickedMembers.
     */
    data: XOR<kickedMembersUpdateInput, kickedMembersUncheckedUpdateInput>
    /**
     * Choose, which kickedMembers to update.
     */
    where: kickedMembersWhereUniqueInput
  }


  /**
   * kickedMembers updateMany
   */
  export type kickedMembersUpdateManyArgs = {
    /**
     * The data used to update kickedMembers.
     */
    data: XOR<kickedMembersUpdateManyMutationInput, kickedMembersUncheckedUpdateManyInput>
    /**
     * Filter which kickedMembers to update
     */
    where?: kickedMembersWhereInput
  }


  /**
   * kickedMembers upsert
   */
  export type kickedMembersUpsertArgs = {
    /**
     * Select specific fields to fetch from the kickedMembers
     */
    select?: kickedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: kickedMembersInclude | null
    /**
     * The filter to search for the kickedMembers to update in case it exists.
     */
    where: kickedMembersWhereUniqueInput
    /**
     * In case the kickedMembers found by the `where` argument doesn't exist, create a new kickedMembers with this data.
     */
    create: XOR<kickedMembersCreateInput, kickedMembersUncheckedCreateInput>
    /**
     * In case the kickedMembers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<kickedMembersUpdateInput, kickedMembersUncheckedUpdateInput>
  }


  /**
   * kickedMembers delete
   */
  export type kickedMembersDeleteArgs = {
    /**
     * Select specific fields to fetch from the kickedMembers
     */
    select?: kickedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: kickedMembersInclude | null
    /**
     * Filter which kickedMembers to delete.
     */
    where: kickedMembersWhereUniqueInput
  }


  /**
   * kickedMembers deleteMany
   */
  export type kickedMembersDeleteManyArgs = {
    /**
     * Filter which kickedMembers to delete
     */
    where?: kickedMembersWhereInput
  }


  /**
   * kickedMembers without action
   */
  export type kickedMembersArgs = {
    /**
     * Select specific fields to fetch from the kickedMembers
     */
    select?: kickedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: kickedMembersInclude | null
  }



  /**
   * Model MutedMembers
   */


  export type AggregateMutedMembers = {
    _count: MutedMembersCountAggregateOutputType | null
    _min: MutedMembersMinAggregateOutputType | null
    _max: MutedMembersMaxAggregateOutputType | null
  }

  export type MutedMembersMinAggregateOutputType = {
    channel_id: string | null
    muted_id: string | null
    status: MemeberStatusTime | null
    status_end_time: Date | null
  }

  export type MutedMembersMaxAggregateOutputType = {
    channel_id: string | null
    muted_id: string | null
    status: MemeberStatusTime | null
    status_end_time: Date | null
  }

  export type MutedMembersCountAggregateOutputType = {
    channel_id: number
    muted_id: number
    status: number
    status_end_time: number
    _all: number
  }


  export type MutedMembersMinAggregateInputType = {
    channel_id?: true
    muted_id?: true
    status?: true
    status_end_time?: true
  }

  export type MutedMembersMaxAggregateInputType = {
    channel_id?: true
    muted_id?: true
    status?: true
    status_end_time?: true
  }

  export type MutedMembersCountAggregateInputType = {
    channel_id?: true
    muted_id?: true
    status?: true
    status_end_time?: true
    _all?: true
  }

  export type MutedMembersAggregateArgs = {
    /**
     * Filter which MutedMembers to aggregate.
     */
    where?: MutedMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MutedMembers to fetch.
     */
    orderBy?: Enumerable<MutedMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MutedMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MutedMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MutedMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MutedMembers
    **/
    _count?: true | MutedMembersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MutedMembersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MutedMembersMaxAggregateInputType
  }

  export type GetMutedMembersAggregateType<T extends MutedMembersAggregateArgs> = {
        [P in keyof T & keyof AggregateMutedMembers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMutedMembers[P]>
      : GetScalarType<T[P], AggregateMutedMembers[P]>
  }




  export type MutedMembersGroupByArgs = {
    where?: MutedMembersWhereInput
    orderBy?: Enumerable<MutedMembersOrderByWithAggregationInput>
    by: MutedMembersScalarFieldEnum[]
    having?: MutedMembersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MutedMembersCountAggregateInputType | true
    _min?: MutedMembersMinAggregateInputType
    _max?: MutedMembersMaxAggregateInputType
  }


  export type MutedMembersGroupByOutputType = {
    channel_id: string
    muted_id: string
    status: MemeberStatusTime | null
    status_end_time: Date | null
    _count: MutedMembersCountAggregateOutputType | null
    _min: MutedMembersMinAggregateOutputType | null
    _max: MutedMembersMaxAggregateOutputType | null
  }

  type GetMutedMembersGroupByPayload<T extends MutedMembersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MutedMembersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MutedMembersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MutedMembersGroupByOutputType[P]>
            : GetScalarType<T[P], MutedMembersGroupByOutputType[P]>
        }
      >
    >


  export type MutedMembersSelect = {
    channel_id?: boolean
    muted_id?: boolean
    status?: boolean
    status_end_time?: boolean
    channel?: boolean | ChannelArgs
  }


  export type MutedMembersInclude = {
    channel?: boolean | ChannelArgs
  }

  export type MutedMembersGetPayload<S extends boolean | null | undefined | MutedMembersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MutedMembers :
    S extends undefined ? never :
    S extends { include: any } & (MutedMembersArgs | MutedMembersFindManyArgs)
    ? MutedMembers  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'channel' ? ChannelGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MutedMembersArgs | MutedMembersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'channel' ? ChannelGetPayload<S['select'][P]> :  P extends keyof MutedMembers ? MutedMembers[P] : never
  } 
      : MutedMembers


  type MutedMembersCountArgs = 
    Omit<MutedMembersFindManyArgs, 'select' | 'include'> & {
      select?: MutedMembersCountAggregateInputType | true
    }

  export interface MutedMembersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one MutedMembers that matches the filter.
     * @param {MutedMembersFindUniqueArgs} args - Arguments to find a MutedMembers
     * @example
     * // Get one MutedMembers
     * const mutedMembers = await prisma.mutedMembers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MutedMembersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MutedMembersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MutedMembers'> extends True ? Prisma__MutedMembersClient<MutedMembersGetPayload<T>> : Prisma__MutedMembersClient<MutedMembersGetPayload<T> | null, null>

    /**
     * Find one MutedMembers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MutedMembersFindUniqueOrThrowArgs} args - Arguments to find a MutedMembers
     * @example
     * // Get one MutedMembers
     * const mutedMembers = await prisma.mutedMembers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MutedMembersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MutedMembersFindUniqueOrThrowArgs>
    ): Prisma__MutedMembersClient<MutedMembersGetPayload<T>>

    /**
     * Find the first MutedMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MutedMembersFindFirstArgs} args - Arguments to find a MutedMembers
     * @example
     * // Get one MutedMembers
     * const mutedMembers = await prisma.mutedMembers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MutedMembersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MutedMembersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MutedMembers'> extends True ? Prisma__MutedMembersClient<MutedMembersGetPayload<T>> : Prisma__MutedMembersClient<MutedMembersGetPayload<T> | null, null>

    /**
     * Find the first MutedMembers that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MutedMembersFindFirstOrThrowArgs} args - Arguments to find a MutedMembers
     * @example
     * // Get one MutedMembers
     * const mutedMembers = await prisma.mutedMembers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MutedMembersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MutedMembersFindFirstOrThrowArgs>
    ): Prisma__MutedMembersClient<MutedMembersGetPayload<T>>

    /**
     * Find zero or more MutedMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MutedMembersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MutedMembers
     * const mutedMembers = await prisma.mutedMembers.findMany()
     * 
     * // Get first 10 MutedMembers
     * const mutedMembers = await prisma.mutedMembers.findMany({ take: 10 })
     * 
     * // Only select the `channel_id`
     * const mutedMembersWithChannel_idOnly = await prisma.mutedMembers.findMany({ select: { channel_id: true } })
     * 
    **/
    findMany<T extends MutedMembersFindManyArgs>(
      args?: SelectSubset<T, MutedMembersFindManyArgs>
    ): Prisma.PrismaPromise<Array<MutedMembersGetPayload<T>>>

    /**
     * Create a MutedMembers.
     * @param {MutedMembersCreateArgs} args - Arguments to create a MutedMembers.
     * @example
     * // Create one MutedMembers
     * const MutedMembers = await prisma.mutedMembers.create({
     *   data: {
     *     // ... data to create a MutedMembers
     *   }
     * })
     * 
    **/
    create<T extends MutedMembersCreateArgs>(
      args: SelectSubset<T, MutedMembersCreateArgs>
    ): Prisma__MutedMembersClient<MutedMembersGetPayload<T>>

    /**
     * Create many MutedMembers.
     *     @param {MutedMembersCreateManyArgs} args - Arguments to create many MutedMembers.
     *     @example
     *     // Create many MutedMembers
     *     const mutedMembers = await prisma.mutedMembers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MutedMembersCreateManyArgs>(
      args?: SelectSubset<T, MutedMembersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MutedMembers.
     * @param {MutedMembersDeleteArgs} args - Arguments to delete one MutedMembers.
     * @example
     * // Delete one MutedMembers
     * const MutedMembers = await prisma.mutedMembers.delete({
     *   where: {
     *     // ... filter to delete one MutedMembers
     *   }
     * })
     * 
    **/
    delete<T extends MutedMembersDeleteArgs>(
      args: SelectSubset<T, MutedMembersDeleteArgs>
    ): Prisma__MutedMembersClient<MutedMembersGetPayload<T>>

    /**
     * Update one MutedMembers.
     * @param {MutedMembersUpdateArgs} args - Arguments to update one MutedMembers.
     * @example
     * // Update one MutedMembers
     * const mutedMembers = await prisma.mutedMembers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MutedMembersUpdateArgs>(
      args: SelectSubset<T, MutedMembersUpdateArgs>
    ): Prisma__MutedMembersClient<MutedMembersGetPayload<T>>

    /**
     * Delete zero or more MutedMembers.
     * @param {MutedMembersDeleteManyArgs} args - Arguments to filter MutedMembers to delete.
     * @example
     * // Delete a few MutedMembers
     * const { count } = await prisma.mutedMembers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MutedMembersDeleteManyArgs>(
      args?: SelectSubset<T, MutedMembersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MutedMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MutedMembersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MutedMembers
     * const mutedMembers = await prisma.mutedMembers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MutedMembersUpdateManyArgs>(
      args: SelectSubset<T, MutedMembersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MutedMembers.
     * @param {MutedMembersUpsertArgs} args - Arguments to update or create a MutedMembers.
     * @example
     * // Update or create a MutedMembers
     * const mutedMembers = await prisma.mutedMembers.upsert({
     *   create: {
     *     // ... data to create a MutedMembers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MutedMembers we want to update
     *   }
     * })
    **/
    upsert<T extends MutedMembersUpsertArgs>(
      args: SelectSubset<T, MutedMembersUpsertArgs>
    ): Prisma__MutedMembersClient<MutedMembersGetPayload<T>>

    /**
     * Count the number of MutedMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MutedMembersCountArgs} args - Arguments to filter MutedMembers to count.
     * @example
     * // Count the number of MutedMembers
     * const count = await prisma.mutedMembers.count({
     *   where: {
     *     // ... the filter for the MutedMembers we want to count
     *   }
     * })
    **/
    count<T extends MutedMembersCountArgs>(
      args?: Subset<T, MutedMembersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MutedMembersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MutedMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MutedMembersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MutedMembersAggregateArgs>(args: Subset<T, MutedMembersAggregateArgs>): Prisma.PrismaPromise<GetMutedMembersAggregateType<T>>

    /**
     * Group by MutedMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MutedMembersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MutedMembersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MutedMembersGroupByArgs['orderBy'] }
        : { orderBy?: MutedMembersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MutedMembersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMutedMembersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MutedMembers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MutedMembersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    channel<T extends ChannelArgs= {}>(args?: Subset<T, ChannelArgs>): Prisma__ChannelClient<ChannelGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MutedMembers base type for findUnique actions
   */
  export type MutedMembersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the MutedMembers
     */
    select?: MutedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MutedMembersInclude | null
    /**
     * Filter, which MutedMembers to fetch.
     */
    where: MutedMembersWhereUniqueInput
  }

  /**
   * MutedMembers findUnique
   */
  export interface MutedMembersFindUniqueArgs extends MutedMembersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MutedMembers findUniqueOrThrow
   */
  export type MutedMembersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MutedMembers
     */
    select?: MutedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MutedMembersInclude | null
    /**
     * Filter, which MutedMembers to fetch.
     */
    where: MutedMembersWhereUniqueInput
  }


  /**
   * MutedMembers base type for findFirst actions
   */
  export type MutedMembersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the MutedMembers
     */
    select?: MutedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MutedMembersInclude | null
    /**
     * Filter, which MutedMembers to fetch.
     */
    where?: MutedMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MutedMembers to fetch.
     */
    orderBy?: Enumerable<MutedMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MutedMembers.
     */
    cursor?: MutedMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MutedMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MutedMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MutedMembers.
     */
    distinct?: Enumerable<MutedMembersScalarFieldEnum>
  }

  /**
   * MutedMembers findFirst
   */
  export interface MutedMembersFindFirstArgs extends MutedMembersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MutedMembers findFirstOrThrow
   */
  export type MutedMembersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MutedMembers
     */
    select?: MutedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MutedMembersInclude | null
    /**
     * Filter, which MutedMembers to fetch.
     */
    where?: MutedMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MutedMembers to fetch.
     */
    orderBy?: Enumerable<MutedMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MutedMembers.
     */
    cursor?: MutedMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MutedMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MutedMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MutedMembers.
     */
    distinct?: Enumerable<MutedMembersScalarFieldEnum>
  }


  /**
   * MutedMembers findMany
   */
  export type MutedMembersFindManyArgs = {
    /**
     * Select specific fields to fetch from the MutedMembers
     */
    select?: MutedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MutedMembersInclude | null
    /**
     * Filter, which MutedMembers to fetch.
     */
    where?: MutedMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MutedMembers to fetch.
     */
    orderBy?: Enumerable<MutedMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MutedMembers.
     */
    cursor?: MutedMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MutedMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MutedMembers.
     */
    skip?: number
    distinct?: Enumerable<MutedMembersScalarFieldEnum>
  }


  /**
   * MutedMembers create
   */
  export type MutedMembersCreateArgs = {
    /**
     * Select specific fields to fetch from the MutedMembers
     */
    select?: MutedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MutedMembersInclude | null
    /**
     * The data needed to create a MutedMembers.
     */
    data: XOR<MutedMembersCreateInput, MutedMembersUncheckedCreateInput>
  }


  /**
   * MutedMembers createMany
   */
  export type MutedMembersCreateManyArgs = {
    /**
     * The data used to create many MutedMembers.
     */
    data: Enumerable<MutedMembersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MutedMembers update
   */
  export type MutedMembersUpdateArgs = {
    /**
     * Select specific fields to fetch from the MutedMembers
     */
    select?: MutedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MutedMembersInclude | null
    /**
     * The data needed to update a MutedMembers.
     */
    data: XOR<MutedMembersUpdateInput, MutedMembersUncheckedUpdateInput>
    /**
     * Choose, which MutedMembers to update.
     */
    where: MutedMembersWhereUniqueInput
  }


  /**
   * MutedMembers updateMany
   */
  export type MutedMembersUpdateManyArgs = {
    /**
     * The data used to update MutedMembers.
     */
    data: XOR<MutedMembersUpdateManyMutationInput, MutedMembersUncheckedUpdateManyInput>
    /**
     * Filter which MutedMembers to update
     */
    where?: MutedMembersWhereInput
  }


  /**
   * MutedMembers upsert
   */
  export type MutedMembersUpsertArgs = {
    /**
     * Select specific fields to fetch from the MutedMembers
     */
    select?: MutedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MutedMembersInclude | null
    /**
     * The filter to search for the MutedMembers to update in case it exists.
     */
    where: MutedMembersWhereUniqueInput
    /**
     * In case the MutedMembers found by the `where` argument doesn't exist, create a new MutedMembers with this data.
     */
    create: XOR<MutedMembersCreateInput, MutedMembersUncheckedCreateInput>
    /**
     * In case the MutedMembers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MutedMembersUpdateInput, MutedMembersUncheckedUpdateInput>
  }


  /**
   * MutedMembers delete
   */
  export type MutedMembersDeleteArgs = {
    /**
     * Select specific fields to fetch from the MutedMembers
     */
    select?: MutedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MutedMembersInclude | null
    /**
     * Filter which MutedMembers to delete.
     */
    where: MutedMembersWhereUniqueInput
  }


  /**
   * MutedMembers deleteMany
   */
  export type MutedMembersDeleteManyArgs = {
    /**
     * Filter which MutedMembers to delete
     */
    where?: MutedMembersWhereInput
  }


  /**
   * MutedMembers without action
   */
  export type MutedMembersArgs = {
    /**
     * Select specific fields to fetch from the MutedMembers
     */
    select?: MutedMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MutedMembersInclude | null
  }



  /**
   * Model Message
   */


  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    dateCreated: Date | null
    sender_id: string | null
    receiver_id: string | null
    content: string | null
    seen: boolean | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    dateCreated: Date | null
    sender_id: string | null
    receiver_id: string | null
    content: string | null
    seen: boolean | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    dateCreated: number
    sender_id: number
    receiver_id: number
    content: number
    seen: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    dateCreated?: true
    sender_id?: true
    receiver_id?: true
    content?: true
    seen?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    dateCreated?: true
    sender_id?: true
    receiver_id?: true
    content?: true
    seen?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    dateCreated?: true
    sender_id?: true
    receiver_id?: true
    content?: true
    seen?: true
    _all?: true
  }

  export type MessageAggregateArgs = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs = {
    where?: MessageWhereInput
    orderBy?: Enumerable<MessageOrderByWithAggregationInput>
    by: MessageScalarFieldEnum[]
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }


  export type MessageGroupByOutputType = {
    id: string
    dateCreated: Date
    sender_id: string
    receiver_id: string
    content: string
    seen: boolean
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect = {
    id?: boolean
    dateCreated?: boolean
    sender_id?: boolean
    receiver_id?: boolean
    content?: boolean
    seen?: boolean
    channel?: boolean | ChannelArgs
  }


  export type MessageInclude = {
    channel?: boolean | ChannelArgs
  }

  export type MessageGetPayload<S extends boolean | null | undefined | MessageArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Message :
    S extends undefined ? never :
    S extends { include: any } & (MessageArgs | MessageFindManyArgs)
    ? Message  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'channel' ? ChannelGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MessageArgs | MessageFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'channel' ? ChannelGetPayload<S['select'][P]> :  P extends keyof Message ? Message[P] : never
  } 
      : Message


  type MessageCountArgs = 
    Omit<MessageFindManyArgs, 'select' | 'include'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MessageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Message'> extends True ? Prisma__MessageClient<MessageGetPayload<T>> : Prisma__MessageClient<MessageGetPayload<T> | null, null>

    /**
     * Find one Message that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MessageFindUniqueOrThrowArgs>
    ): Prisma__MessageClient<MessageGetPayload<T>>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MessageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Message'> extends True ? Prisma__MessageClient<MessageGetPayload<T>> : Prisma__MessageClient<MessageGetPayload<T> | null, null>

    /**
     * Find the first Message that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MessageFindFirstOrThrowArgs>
    ): Prisma__MessageClient<MessageGetPayload<T>>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MessageFindManyArgs>(
      args?: SelectSubset<T, MessageFindManyArgs>
    ): Prisma.PrismaPromise<Array<MessageGetPayload<T>>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
    **/
    create<T extends MessageCreateArgs>(
      args: SelectSubset<T, MessageCreateArgs>
    ): Prisma__MessageClient<MessageGetPayload<T>>

    /**
     * Create many Messages.
     *     @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     *     @example
     *     // Create many Messages
     *     const message = await prisma.message.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessageCreateManyArgs>(
      args?: SelectSubset<T, MessageCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
    **/
    delete<T extends MessageDeleteArgs>(
      args: SelectSubset<T, MessageDeleteArgs>
    ): Prisma__MessageClient<MessageGetPayload<T>>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessageUpdateArgs>(
      args: SelectSubset<T, MessageUpdateArgs>
    ): Prisma__MessageClient<MessageGetPayload<T>>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessageDeleteManyArgs>(
      args?: SelectSubset<T, MessageDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessageUpdateManyArgs>(
      args: SelectSubset<T, MessageUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
    **/
    upsert<T extends MessageUpsertArgs>(
      args: SelectSubset<T, MessageUpsertArgs>
    ): Prisma__MessageClient<MessageGetPayload<T>>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MessageClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    channel<T extends ChannelArgs= {}>(args?: Subset<T, ChannelArgs>): Prisma__ChannelClient<ChannelGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Message base type for findUnique actions
   */
  export type MessageFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUnique
   */
  export interface MessageFindUniqueArgs extends MessageFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message base type for findFirst actions
   */
  export type MessageFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: Enumerable<MessageScalarFieldEnum>
  }

  /**
   * Message findFirst
   */
  export interface MessageFindFirstArgs extends MessageFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Message findMany
   */
  export type MessageFindManyArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Message create
   */
  export type MessageCreateArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }


  /**
   * Message createMany
   */
  export type MessageCreateManyArgs = {
    /**
     * The data used to create many Messages.
     */
    data: Enumerable<MessageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Message update
   */
  export type MessageUpdateArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }


  /**
   * Message upsert
   */
  export type MessageUpsertArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }


  /**
   * Message delete
   */
  export type MessageDeleteArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }


  /**
   * Message without action
   */
  export type MessageArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
  }



  /**
   * Model Notification
   */


  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    notification_id: string | null
    user_id: string | null
  }

  export type NotificationMaxAggregateOutputType = {
    notification_id: string | null
    user_id: string | null
  }

  export type NotificationCountAggregateOutputType = {
    notification_id: number
    user_id: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    notification_id?: true
    user_id?: true
  }

  export type NotificationMaxAggregateInputType = {
    notification_id?: true
    user_id?: true
  }

  export type NotificationCountAggregateInputType = {
    notification_id?: true
    user_id?: true
    _all?: true
  }

  export type NotificationAggregateArgs = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs = {
    where?: NotificationWhereInput
    orderBy?: Enumerable<NotificationOrderByWithAggregationInput>
    by: NotificationScalarFieldEnum[]
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }


  export type NotificationGroupByOutputType = {
    notification_id: string
    user_id: string
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect = {
    notification_id?: boolean
    user_id?: boolean
    user?: boolean | UserArgs
  }


  export type NotificationInclude = {
    user?: boolean | UserArgs
  }

  export type NotificationGetPayload<S extends boolean | null | undefined | NotificationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Notification :
    S extends undefined ? never :
    S extends { include: any } & (NotificationArgs | NotificationFindManyArgs)
    ? Notification  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (NotificationArgs | NotificationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Notification ? Notification[P] : never
  } 
      : Notification


  type NotificationCountArgs = 
    Omit<NotificationFindManyArgs, 'select' | 'include'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NotificationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Notification'> extends True ? Prisma__NotificationClient<NotificationGetPayload<T>> : Prisma__NotificationClient<NotificationGetPayload<T> | null, null>

    /**
     * Find one Notification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, NotificationFindUniqueOrThrowArgs>
    ): Prisma__NotificationClient<NotificationGetPayload<T>>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NotificationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Notification'> extends True ? Prisma__NotificationClient<NotificationGetPayload<T>> : Prisma__NotificationClient<NotificationGetPayload<T> | null, null>

    /**
     * Find the first Notification that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, NotificationFindFirstOrThrowArgs>
    ): Prisma__NotificationClient<NotificationGetPayload<T>>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `notification_id`
     * const notificationWithNotification_idOnly = await prisma.notification.findMany({ select: { notification_id: true } })
     * 
    **/
    findMany<T extends NotificationFindManyArgs>(
      args?: SelectSubset<T, NotificationFindManyArgs>
    ): Prisma.PrismaPromise<Array<NotificationGetPayload<T>>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
    **/
    create<T extends NotificationCreateArgs>(
      args: SelectSubset<T, NotificationCreateArgs>
    ): Prisma__NotificationClient<NotificationGetPayload<T>>

    /**
     * Create many Notifications.
     *     @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notification = await prisma.notification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationCreateManyArgs>(
      args?: SelectSubset<T, NotificationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
    **/
    delete<T extends NotificationDeleteArgs>(
      args: SelectSubset<T, NotificationDeleteArgs>
    ): Prisma__NotificationClient<NotificationGetPayload<T>>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationUpdateArgs>(
      args: SelectSubset<T, NotificationUpdateArgs>
    ): Prisma__NotificationClient<NotificationGetPayload<T>>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationDeleteManyArgs>(
      args?: SelectSubset<T, NotificationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationUpdateManyArgs>(
      args: SelectSubset<T, NotificationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationUpsertArgs>(
      args: SelectSubset<T, NotificationUpsertArgs>
    ): Prisma__NotificationClient<NotificationGetPayload<T>>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NotificationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Notification base type for findUnique actions
   */
  export type NotificationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUnique
   */
  export interface NotificationFindUniqueArgs extends NotificationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification base type for findFirst actions
   */
  export type NotificationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }

  /**
   * Notification findFirst
   */
  export interface NotificationFindFirstArgs extends NotificationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }


  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }


  /**
   * Notification create
   */
  export type NotificationCreateArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }


  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs = {
    /**
     * The data used to create many Notifications.
     */
    data: Enumerable<NotificationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Notification update
   */
  export type NotificationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }


  /**
   * Notification delete
   */
  export type NotificationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification without action
   */
  export type NotificationArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
  }



  /**
   * Model Game
   */


  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    player1_pts: number | null
    player2_pts: number | null
  }

  export type GameSumAggregateOutputType = {
    player1_pts: number | null
    player2_pts: number | null
  }

  export type GameMinAggregateOutputType = {
    id: string | null
    dateCreated: Date | null
    gameStatus: GameStatus | null
    player1_id: string | null
    player2_id: string | null
    player1_pts: number | null
    player2_pts: number | null
  }

  export type GameMaxAggregateOutputType = {
    id: string | null
    dateCreated: Date | null
    gameStatus: GameStatus | null
    player1_id: string | null
    player2_id: string | null
    player1_pts: number | null
    player2_pts: number | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    dateCreated: number
    gameStatus: number
    player1_id: number
    player2_id: number
    player1_pts: number
    player2_pts: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    player1_pts?: true
    player2_pts?: true
  }

  export type GameSumAggregateInputType = {
    player1_pts?: true
    player2_pts?: true
  }

  export type GameMinAggregateInputType = {
    id?: true
    dateCreated?: true
    gameStatus?: true
    player1_id?: true
    player2_id?: true
    player1_pts?: true
    player2_pts?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    dateCreated?: true
    gameStatus?: true
    player1_id?: true
    player2_id?: true
    player1_pts?: true
    player2_pts?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    dateCreated?: true
    gameStatus?: true
    player1_id?: true
    player2_id?: true
    player1_pts?: true
    player2_pts?: true
    _all?: true
  }

  export type GameAggregateArgs = {
    /**
     * Filter which Game to aggregate.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs = {
    where?: GameWhereInput
    orderBy?: Enumerable<GameOrderByWithAggregationInput>
    by: GameScalarFieldEnum[]
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }


  export type GameGroupByOutputType = {
    id: string
    dateCreated: Date
    gameStatus: GameStatus
    player1_id: string
    player2_id: string
    player1_pts: number
    player2_pts: number
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect = {
    id?: boolean
    dateCreated?: boolean
    gameStatus?: boolean
    player1_id?: boolean
    player2_id?: boolean
    player1_pts?: boolean
    player2_pts?: boolean
    gameHistory?: boolean | Game$gameHistoryArgs
    _count?: boolean | GameCountOutputTypeArgs
  }


  export type GameInclude = {
    gameHistory?: boolean | Game$gameHistoryArgs
    _count?: boolean | GameCountOutputTypeArgs
  }

  export type GameGetPayload<S extends boolean | null | undefined | GameArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Game :
    S extends undefined ? never :
    S extends { include: any } & (GameArgs | GameFindManyArgs)
    ? Game  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'gameHistory' ? Array < GameHistoryTabGetPayload<S['include'][P]>>  :
        P extends '_count' ? GameCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (GameArgs | GameFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'gameHistory' ? Array < GameHistoryTabGetPayload<S['select'][P]>>  :
        P extends '_count' ? GameCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Game ? Game[P] : never
  } 
      : Game


  type GameCountArgs = 
    Omit<GameFindManyArgs, 'select' | 'include'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface GameDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GameFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GameFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Game'> extends True ? Prisma__GameClient<GameGetPayload<T>> : Prisma__GameClient<GameGetPayload<T> | null, null>

    /**
     * Find one Game that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GameFindUniqueOrThrowArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GameFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GameFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Game'> extends True ? Prisma__GameClient<GameGetPayload<T>> : Prisma__GameClient<GameGetPayload<T> | null, null>

    /**
     * Find the first Game that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GameFindFirstOrThrowArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GameFindManyArgs>(
      args?: SelectSubset<T, GameFindManyArgs>
    ): Prisma.PrismaPromise<Array<GameGetPayload<T>>>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
    **/
    create<T extends GameCreateArgs>(
      args: SelectSubset<T, GameCreateArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Create many Games.
     *     @param {GameCreateManyArgs} args - Arguments to create many Games.
     *     @example
     *     // Create many Games
     *     const game = await prisma.game.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GameCreateManyArgs>(
      args?: SelectSubset<T, GameCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
    **/
    delete<T extends GameDeleteArgs>(
      args: SelectSubset<T, GameDeleteArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GameUpdateArgs>(
      args: SelectSubset<T, GameUpdateArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GameDeleteManyArgs>(
      args?: SelectSubset<T, GameDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GameUpdateManyArgs>(
      args: SelectSubset<T, GameUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
    **/
    upsert<T extends GameUpsertArgs>(
      args: SelectSubset<T, GameUpsertArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GameClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    gameHistory<T extends Game$gameHistoryArgs= {}>(args?: Subset<T, Game$gameHistoryArgs>): Prisma.PrismaPromise<Array<GameHistoryTabGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Game base type for findUnique actions
   */
  export type GameFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findUnique
   */
  export interface GameFindUniqueArgs extends GameFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }


  /**
   * Game base type for findFirst actions
   */
  export type GameFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: Enumerable<GameScalarFieldEnum>
  }

  /**
   * Game findFirst
   */
  export interface GameFindFirstArgs extends GameFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Game findMany
   */
  export type GameFindManyArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Game create
   */
  export type GameCreateArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
    /**
     * The data needed to create a Game.
     */
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }


  /**
   * Game createMany
   */
  export type GameCreateManyArgs = {
    /**
     * The data used to create many Games.
     */
    data: Enumerable<GameCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Game update
   */
  export type GameUpdateArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
    /**
     * The data needed to update a Game.
     */
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     */
    where: GameWhereUniqueInput
  }


  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs = {
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
  }


  /**
   * Game upsert
   */
  export type GameUpsertArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
    /**
     * The filter to search for the Game to update in case it exists.
     */
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     */
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }


  /**
   * Game delete
   */
  export type GameDeleteArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
    /**
     * Filter which Game to delete.
     */
    where: GameWhereUniqueInput
  }


  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs = {
    /**
     * Filter which Games to delete
     */
    where?: GameWhereInput
  }


  /**
   * Game.gameHistory
   */
  export type Game$gameHistoryArgs = {
    /**
     * Select specific fields to fetch from the GameHistoryTab
     */
    select?: GameHistoryTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameHistoryTabInclude | null
    where?: GameHistoryTabWhereInput
    orderBy?: Enumerable<GameHistoryTabOrderByWithRelationInput>
    cursor?: GameHistoryTabWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GameHistoryTabScalarFieldEnum>
  }


  /**
   * Game without action
   */
  export type GameArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude | null
  }



  /**
   * Model GameInvites
   */


  export type AggregateGameInvites = {
    _count: GameInvitesCountAggregateOutputType | null
    _min: GameInvitesMinAggregateOutputType | null
    _max: GameInvitesMaxAggregateOutputType | null
  }

  export type GameInvitesMinAggregateOutputType = {
    sender_id: string | null
    receiver_id: string | null
    status: InviteStatus | null
    validUntil: Date | null
  }

  export type GameInvitesMaxAggregateOutputType = {
    sender_id: string | null
    receiver_id: string | null
    status: InviteStatus | null
    validUntil: Date | null
  }

  export type GameInvitesCountAggregateOutputType = {
    sender_id: number
    receiver_id: number
    status: number
    validUntil: number
    _all: number
  }


  export type GameInvitesMinAggregateInputType = {
    sender_id?: true
    receiver_id?: true
    status?: true
    validUntil?: true
  }

  export type GameInvitesMaxAggregateInputType = {
    sender_id?: true
    receiver_id?: true
    status?: true
    validUntil?: true
  }

  export type GameInvitesCountAggregateInputType = {
    sender_id?: true
    receiver_id?: true
    status?: true
    validUntil?: true
    _all?: true
  }

  export type GameInvitesAggregateArgs = {
    /**
     * Filter which GameInvites to aggregate.
     */
    where?: GameInvitesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameInvites to fetch.
     */
    orderBy?: Enumerable<GameInvitesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameInvitesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameInvites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameInvites
    **/
    _count?: true | GameInvitesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameInvitesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameInvitesMaxAggregateInputType
  }

  export type GetGameInvitesAggregateType<T extends GameInvitesAggregateArgs> = {
        [P in keyof T & keyof AggregateGameInvites]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameInvites[P]>
      : GetScalarType<T[P], AggregateGameInvites[P]>
  }




  export type GameInvitesGroupByArgs = {
    where?: GameInvitesWhereInput
    orderBy?: Enumerable<GameInvitesOrderByWithAggregationInput>
    by: GameInvitesScalarFieldEnum[]
    having?: GameInvitesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameInvitesCountAggregateInputType | true
    _min?: GameInvitesMinAggregateInputType
    _max?: GameInvitesMaxAggregateInputType
  }


  export type GameInvitesGroupByOutputType = {
    sender_id: string
    receiver_id: string
    status: InviteStatus
    validUntil: Date
    _count: GameInvitesCountAggregateOutputType | null
    _min: GameInvitesMinAggregateOutputType | null
    _max: GameInvitesMaxAggregateOutputType | null
  }

  type GetGameInvitesGroupByPayload<T extends GameInvitesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GameInvitesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameInvitesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameInvitesGroupByOutputType[P]>
            : GetScalarType<T[P], GameInvitesGroupByOutputType[P]>
        }
      >
    >


  export type GameInvitesSelect = {
    sender_id?: boolean
    receiver_id?: boolean
    status?: boolean
    validUntil?: boolean
    sender?: boolean | UserArgs
  }


  export type GameInvitesInclude = {
    sender?: boolean | UserArgs
  }

  export type GameInvitesGetPayload<S extends boolean | null | undefined | GameInvitesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? GameInvites :
    S extends undefined ? never :
    S extends { include: any } & (GameInvitesArgs | GameInvitesFindManyArgs)
    ? GameInvites  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'sender' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (GameInvitesArgs | GameInvitesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'sender' ? UserGetPayload<S['select'][P]> :  P extends keyof GameInvites ? GameInvites[P] : never
  } 
      : GameInvites


  type GameInvitesCountArgs = 
    Omit<GameInvitesFindManyArgs, 'select' | 'include'> & {
      select?: GameInvitesCountAggregateInputType | true
    }

  export interface GameInvitesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one GameInvites that matches the filter.
     * @param {GameInvitesFindUniqueArgs} args - Arguments to find a GameInvites
     * @example
     * // Get one GameInvites
     * const gameInvites = await prisma.gameInvites.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GameInvitesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GameInvitesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GameInvites'> extends True ? Prisma__GameInvitesClient<GameInvitesGetPayload<T>> : Prisma__GameInvitesClient<GameInvitesGetPayload<T> | null, null>

    /**
     * Find one GameInvites that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GameInvitesFindUniqueOrThrowArgs} args - Arguments to find a GameInvites
     * @example
     * // Get one GameInvites
     * const gameInvites = await prisma.gameInvites.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GameInvitesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GameInvitesFindUniqueOrThrowArgs>
    ): Prisma__GameInvitesClient<GameInvitesGetPayload<T>>

    /**
     * Find the first GameInvites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameInvitesFindFirstArgs} args - Arguments to find a GameInvites
     * @example
     * // Get one GameInvites
     * const gameInvites = await prisma.gameInvites.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GameInvitesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GameInvitesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GameInvites'> extends True ? Prisma__GameInvitesClient<GameInvitesGetPayload<T>> : Prisma__GameInvitesClient<GameInvitesGetPayload<T> | null, null>

    /**
     * Find the first GameInvites that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameInvitesFindFirstOrThrowArgs} args - Arguments to find a GameInvites
     * @example
     * // Get one GameInvites
     * const gameInvites = await prisma.gameInvites.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GameInvitesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GameInvitesFindFirstOrThrowArgs>
    ): Prisma__GameInvitesClient<GameInvitesGetPayload<T>>

    /**
     * Find zero or more GameInvites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameInvitesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameInvites
     * const gameInvites = await prisma.gameInvites.findMany()
     * 
     * // Get first 10 GameInvites
     * const gameInvites = await prisma.gameInvites.findMany({ take: 10 })
     * 
     * // Only select the `sender_id`
     * const gameInvitesWithSender_idOnly = await prisma.gameInvites.findMany({ select: { sender_id: true } })
     * 
    **/
    findMany<T extends GameInvitesFindManyArgs>(
      args?: SelectSubset<T, GameInvitesFindManyArgs>
    ): Prisma.PrismaPromise<Array<GameInvitesGetPayload<T>>>

    /**
     * Create a GameInvites.
     * @param {GameInvitesCreateArgs} args - Arguments to create a GameInvites.
     * @example
     * // Create one GameInvites
     * const GameInvites = await prisma.gameInvites.create({
     *   data: {
     *     // ... data to create a GameInvites
     *   }
     * })
     * 
    **/
    create<T extends GameInvitesCreateArgs>(
      args: SelectSubset<T, GameInvitesCreateArgs>
    ): Prisma__GameInvitesClient<GameInvitesGetPayload<T>>

    /**
     * Create many GameInvites.
     *     @param {GameInvitesCreateManyArgs} args - Arguments to create many GameInvites.
     *     @example
     *     // Create many GameInvites
     *     const gameInvites = await prisma.gameInvites.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GameInvitesCreateManyArgs>(
      args?: SelectSubset<T, GameInvitesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GameInvites.
     * @param {GameInvitesDeleteArgs} args - Arguments to delete one GameInvites.
     * @example
     * // Delete one GameInvites
     * const GameInvites = await prisma.gameInvites.delete({
     *   where: {
     *     // ... filter to delete one GameInvites
     *   }
     * })
     * 
    **/
    delete<T extends GameInvitesDeleteArgs>(
      args: SelectSubset<T, GameInvitesDeleteArgs>
    ): Prisma__GameInvitesClient<GameInvitesGetPayload<T>>

    /**
     * Update one GameInvites.
     * @param {GameInvitesUpdateArgs} args - Arguments to update one GameInvites.
     * @example
     * // Update one GameInvites
     * const gameInvites = await prisma.gameInvites.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GameInvitesUpdateArgs>(
      args: SelectSubset<T, GameInvitesUpdateArgs>
    ): Prisma__GameInvitesClient<GameInvitesGetPayload<T>>

    /**
     * Delete zero or more GameInvites.
     * @param {GameInvitesDeleteManyArgs} args - Arguments to filter GameInvites to delete.
     * @example
     * // Delete a few GameInvites
     * const { count } = await prisma.gameInvites.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GameInvitesDeleteManyArgs>(
      args?: SelectSubset<T, GameInvitesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameInvites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameInvitesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameInvites
     * const gameInvites = await prisma.gameInvites.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GameInvitesUpdateManyArgs>(
      args: SelectSubset<T, GameInvitesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GameInvites.
     * @param {GameInvitesUpsertArgs} args - Arguments to update or create a GameInvites.
     * @example
     * // Update or create a GameInvites
     * const gameInvites = await prisma.gameInvites.upsert({
     *   create: {
     *     // ... data to create a GameInvites
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameInvites we want to update
     *   }
     * })
    **/
    upsert<T extends GameInvitesUpsertArgs>(
      args: SelectSubset<T, GameInvitesUpsertArgs>
    ): Prisma__GameInvitesClient<GameInvitesGetPayload<T>>

    /**
     * Count the number of GameInvites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameInvitesCountArgs} args - Arguments to filter GameInvites to count.
     * @example
     * // Count the number of GameInvites
     * const count = await prisma.gameInvites.count({
     *   where: {
     *     // ... the filter for the GameInvites we want to count
     *   }
     * })
    **/
    count<T extends GameInvitesCountArgs>(
      args?: Subset<T, GameInvitesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameInvitesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameInvites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameInvitesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameInvitesAggregateArgs>(args: Subset<T, GameInvitesAggregateArgs>): Prisma.PrismaPromise<GetGameInvitesAggregateType<T>>

    /**
     * Group by GameInvites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameInvitesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameInvitesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameInvitesGroupByArgs['orderBy'] }
        : { orderBy?: GameInvitesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameInvitesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameInvitesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for GameInvites.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GameInvitesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    sender<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * GameInvites base type for findUnique actions
   */
  export type GameInvitesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the GameInvites
     */
    select?: GameInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInvitesInclude | null
    /**
     * Filter, which GameInvites to fetch.
     */
    where: GameInvitesWhereUniqueInput
  }

  /**
   * GameInvites findUnique
   */
  export interface GameInvitesFindUniqueArgs extends GameInvitesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GameInvites findUniqueOrThrow
   */
  export type GameInvitesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the GameInvites
     */
    select?: GameInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInvitesInclude | null
    /**
     * Filter, which GameInvites to fetch.
     */
    where: GameInvitesWhereUniqueInput
  }


  /**
   * GameInvites base type for findFirst actions
   */
  export type GameInvitesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the GameInvites
     */
    select?: GameInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInvitesInclude | null
    /**
     * Filter, which GameInvites to fetch.
     */
    where?: GameInvitesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameInvites to fetch.
     */
    orderBy?: Enumerable<GameInvitesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameInvites.
     */
    cursor?: GameInvitesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameInvites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameInvites.
     */
    distinct?: Enumerable<GameInvitesScalarFieldEnum>
  }

  /**
   * GameInvites findFirst
   */
  export interface GameInvitesFindFirstArgs extends GameInvitesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GameInvites findFirstOrThrow
   */
  export type GameInvitesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the GameInvites
     */
    select?: GameInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInvitesInclude | null
    /**
     * Filter, which GameInvites to fetch.
     */
    where?: GameInvitesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameInvites to fetch.
     */
    orderBy?: Enumerable<GameInvitesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameInvites.
     */
    cursor?: GameInvitesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameInvites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameInvites.
     */
    distinct?: Enumerable<GameInvitesScalarFieldEnum>
  }


  /**
   * GameInvites findMany
   */
  export type GameInvitesFindManyArgs = {
    /**
     * Select specific fields to fetch from the GameInvites
     */
    select?: GameInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInvitesInclude | null
    /**
     * Filter, which GameInvites to fetch.
     */
    where?: GameInvitesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameInvites to fetch.
     */
    orderBy?: Enumerable<GameInvitesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameInvites.
     */
    cursor?: GameInvitesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameInvites.
     */
    skip?: number
    distinct?: Enumerable<GameInvitesScalarFieldEnum>
  }


  /**
   * GameInvites create
   */
  export type GameInvitesCreateArgs = {
    /**
     * Select specific fields to fetch from the GameInvites
     */
    select?: GameInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInvitesInclude | null
    /**
     * The data needed to create a GameInvites.
     */
    data: XOR<GameInvitesCreateInput, GameInvitesUncheckedCreateInput>
  }


  /**
   * GameInvites createMany
   */
  export type GameInvitesCreateManyArgs = {
    /**
     * The data used to create many GameInvites.
     */
    data: Enumerable<GameInvitesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GameInvites update
   */
  export type GameInvitesUpdateArgs = {
    /**
     * Select specific fields to fetch from the GameInvites
     */
    select?: GameInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInvitesInclude | null
    /**
     * The data needed to update a GameInvites.
     */
    data: XOR<GameInvitesUpdateInput, GameInvitesUncheckedUpdateInput>
    /**
     * Choose, which GameInvites to update.
     */
    where: GameInvitesWhereUniqueInput
  }


  /**
   * GameInvites updateMany
   */
  export type GameInvitesUpdateManyArgs = {
    /**
     * The data used to update GameInvites.
     */
    data: XOR<GameInvitesUpdateManyMutationInput, GameInvitesUncheckedUpdateManyInput>
    /**
     * Filter which GameInvites to update
     */
    where?: GameInvitesWhereInput
  }


  /**
   * GameInvites upsert
   */
  export type GameInvitesUpsertArgs = {
    /**
     * Select specific fields to fetch from the GameInvites
     */
    select?: GameInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInvitesInclude | null
    /**
     * The filter to search for the GameInvites to update in case it exists.
     */
    where: GameInvitesWhereUniqueInput
    /**
     * In case the GameInvites found by the `where` argument doesn't exist, create a new GameInvites with this data.
     */
    create: XOR<GameInvitesCreateInput, GameInvitesUncheckedCreateInput>
    /**
     * In case the GameInvites was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameInvitesUpdateInput, GameInvitesUncheckedUpdateInput>
  }


  /**
   * GameInvites delete
   */
  export type GameInvitesDeleteArgs = {
    /**
     * Select specific fields to fetch from the GameInvites
     */
    select?: GameInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInvitesInclude | null
    /**
     * Filter which GameInvites to delete.
     */
    where: GameInvitesWhereUniqueInput
  }


  /**
   * GameInvites deleteMany
   */
  export type GameInvitesDeleteManyArgs = {
    /**
     * Filter which GameInvites to delete
     */
    where?: GameInvitesWhereInput
  }


  /**
   * GameInvites without action
   */
  export type GameInvitesArgs = {
    /**
     * Select specific fields to fetch from the GameInvites
     */
    select?: GameInvitesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInvitesInclude | null
  }



  /**
   * Model RankingData
   */


  export type AggregateRankingData = {
    _count: RankingDataCountAggregateOutputType | null
    _avg: RankingDataAvgAggregateOutputType | null
    _sum: RankingDataSumAggregateOutputType | null
    _min: RankingDataMinAggregateOutputType | null
    _max: RankingDataMaxAggregateOutputType | null
  }

  export type RankingDataAvgAggregateOutputType = {
    games: number | null
    wins: number | null
    loses: number | null
    draws: number | null
    xp: number | null
    winning_streak: number | null
    losing_streak: number | null
    points: number | null
  }

  export type RankingDataSumAggregateOutputType = {
    games: number | null
    wins: number | null
    loses: number | null
    draws: number | null
    xp: number | null
    winning_streak: number | null
    losing_streak: number | null
    points: number | null
  }

  export type RankingDataMinAggregateOutputType = {
    user_id: string | null
    games: number | null
    wins: number | null
    loses: number | null
    draws: number | null
    xp: number | null
    winning_streak: number | null
    losing_streak: number | null
    points: number | null
    rank: Rank | null
  }

  export type RankingDataMaxAggregateOutputType = {
    user_id: string | null
    games: number | null
    wins: number | null
    loses: number | null
    draws: number | null
    xp: number | null
    winning_streak: number | null
    losing_streak: number | null
    points: number | null
    rank: Rank | null
  }

  export type RankingDataCountAggregateOutputType = {
    user_id: number
    games: number
    wins: number
    loses: number
    draws: number
    xp: number
    winning_streak: number
    losing_streak: number
    points: number
    rank: number
    _all: number
  }


  export type RankingDataAvgAggregateInputType = {
    games?: true
    wins?: true
    loses?: true
    draws?: true
    xp?: true
    winning_streak?: true
    losing_streak?: true
    points?: true
  }

  export type RankingDataSumAggregateInputType = {
    games?: true
    wins?: true
    loses?: true
    draws?: true
    xp?: true
    winning_streak?: true
    losing_streak?: true
    points?: true
  }

  export type RankingDataMinAggregateInputType = {
    user_id?: true
    games?: true
    wins?: true
    loses?: true
    draws?: true
    xp?: true
    winning_streak?: true
    losing_streak?: true
    points?: true
    rank?: true
  }

  export type RankingDataMaxAggregateInputType = {
    user_id?: true
    games?: true
    wins?: true
    loses?: true
    draws?: true
    xp?: true
    winning_streak?: true
    losing_streak?: true
    points?: true
    rank?: true
  }

  export type RankingDataCountAggregateInputType = {
    user_id?: true
    games?: true
    wins?: true
    loses?: true
    draws?: true
    xp?: true
    winning_streak?: true
    losing_streak?: true
    points?: true
    rank?: true
    _all?: true
  }

  export type RankingDataAggregateArgs = {
    /**
     * Filter which RankingData to aggregate.
     */
    where?: RankingDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingData to fetch.
     */
    orderBy?: Enumerable<RankingDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RankingDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RankingData
    **/
    _count?: true | RankingDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RankingDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RankingDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RankingDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RankingDataMaxAggregateInputType
  }

  export type GetRankingDataAggregateType<T extends RankingDataAggregateArgs> = {
        [P in keyof T & keyof AggregateRankingData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRankingData[P]>
      : GetScalarType<T[P], AggregateRankingData[P]>
  }




  export type RankingDataGroupByArgs = {
    where?: RankingDataWhereInput
    orderBy?: Enumerable<RankingDataOrderByWithAggregationInput>
    by: RankingDataScalarFieldEnum[]
    having?: RankingDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RankingDataCountAggregateInputType | true
    _avg?: RankingDataAvgAggregateInputType
    _sum?: RankingDataSumAggregateInputType
    _min?: RankingDataMinAggregateInputType
    _max?: RankingDataMaxAggregateInputType
  }


  export type RankingDataGroupByOutputType = {
    user_id: string
    games: number
    wins: number
    loses: number
    draws: number
    xp: number
    winning_streak: number
    losing_streak: number
    points: number
    rank: Rank
    _count: RankingDataCountAggregateOutputType | null
    _avg: RankingDataAvgAggregateOutputType | null
    _sum: RankingDataSumAggregateOutputType | null
    _min: RankingDataMinAggregateOutputType | null
    _max: RankingDataMaxAggregateOutputType | null
  }

  type GetRankingDataGroupByPayload<T extends RankingDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RankingDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RankingDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RankingDataGroupByOutputType[P]>
            : GetScalarType<T[P], RankingDataGroupByOutputType[P]>
        }
      >
    >


  export type RankingDataSelect = {
    user_id?: boolean
    games?: boolean
    wins?: boolean
    loses?: boolean
    draws?: boolean
    xp?: boolean
    winning_streak?: boolean
    losing_streak?: boolean
    points?: boolean
    rank?: boolean
    user?: boolean | UserArgs
    achievements_assignement?: boolean | RankingData$achievements_assignementArgs
    _count?: boolean | RankingDataCountOutputTypeArgs
  }


  export type RankingDataInclude = {
    user?: boolean | UserArgs
    achievements_assignement?: boolean | RankingData$achievements_assignementArgs
    _count?: boolean | RankingDataCountOutputTypeArgs
  }

  export type RankingDataGetPayload<S extends boolean | null | undefined | RankingDataArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? RankingData :
    S extends undefined ? never :
    S extends { include: any } & (RankingDataArgs | RankingDataFindManyArgs)
    ? RankingData  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'achievements_assignement' ? Array < AchievementsAssignementGetPayload<S['include'][P]>>  :
        P extends '_count' ? RankingDataCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (RankingDataArgs | RankingDataFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'achievements_assignement' ? Array < AchievementsAssignementGetPayload<S['select'][P]>>  :
        P extends '_count' ? RankingDataCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof RankingData ? RankingData[P] : never
  } 
      : RankingData


  type RankingDataCountArgs = 
    Omit<RankingDataFindManyArgs, 'select' | 'include'> & {
      select?: RankingDataCountAggregateInputType | true
    }

  export interface RankingDataDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one RankingData that matches the filter.
     * @param {RankingDataFindUniqueArgs} args - Arguments to find a RankingData
     * @example
     * // Get one RankingData
     * const rankingData = await prisma.rankingData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RankingDataFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RankingDataFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'RankingData'> extends True ? Prisma__RankingDataClient<RankingDataGetPayload<T>> : Prisma__RankingDataClient<RankingDataGetPayload<T> | null, null>

    /**
     * Find one RankingData that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RankingDataFindUniqueOrThrowArgs} args - Arguments to find a RankingData
     * @example
     * // Get one RankingData
     * const rankingData = await prisma.rankingData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RankingDataFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RankingDataFindUniqueOrThrowArgs>
    ): Prisma__RankingDataClient<RankingDataGetPayload<T>>

    /**
     * Find the first RankingData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingDataFindFirstArgs} args - Arguments to find a RankingData
     * @example
     * // Get one RankingData
     * const rankingData = await prisma.rankingData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RankingDataFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RankingDataFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'RankingData'> extends True ? Prisma__RankingDataClient<RankingDataGetPayload<T>> : Prisma__RankingDataClient<RankingDataGetPayload<T> | null, null>

    /**
     * Find the first RankingData that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingDataFindFirstOrThrowArgs} args - Arguments to find a RankingData
     * @example
     * // Get one RankingData
     * const rankingData = await prisma.rankingData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RankingDataFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RankingDataFindFirstOrThrowArgs>
    ): Prisma__RankingDataClient<RankingDataGetPayload<T>>

    /**
     * Find zero or more RankingData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RankingData
     * const rankingData = await prisma.rankingData.findMany()
     * 
     * // Get first 10 RankingData
     * const rankingData = await prisma.rankingData.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const rankingDataWithUser_idOnly = await prisma.rankingData.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends RankingDataFindManyArgs>(
      args?: SelectSubset<T, RankingDataFindManyArgs>
    ): Prisma.PrismaPromise<Array<RankingDataGetPayload<T>>>

    /**
     * Create a RankingData.
     * @param {RankingDataCreateArgs} args - Arguments to create a RankingData.
     * @example
     * // Create one RankingData
     * const RankingData = await prisma.rankingData.create({
     *   data: {
     *     // ... data to create a RankingData
     *   }
     * })
     * 
    **/
    create<T extends RankingDataCreateArgs>(
      args: SelectSubset<T, RankingDataCreateArgs>
    ): Prisma__RankingDataClient<RankingDataGetPayload<T>>

    /**
     * Create many RankingData.
     *     @param {RankingDataCreateManyArgs} args - Arguments to create many RankingData.
     *     @example
     *     // Create many RankingData
     *     const rankingData = await prisma.rankingData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RankingDataCreateManyArgs>(
      args?: SelectSubset<T, RankingDataCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RankingData.
     * @param {RankingDataDeleteArgs} args - Arguments to delete one RankingData.
     * @example
     * // Delete one RankingData
     * const RankingData = await prisma.rankingData.delete({
     *   where: {
     *     // ... filter to delete one RankingData
     *   }
     * })
     * 
    **/
    delete<T extends RankingDataDeleteArgs>(
      args: SelectSubset<T, RankingDataDeleteArgs>
    ): Prisma__RankingDataClient<RankingDataGetPayload<T>>

    /**
     * Update one RankingData.
     * @param {RankingDataUpdateArgs} args - Arguments to update one RankingData.
     * @example
     * // Update one RankingData
     * const rankingData = await prisma.rankingData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RankingDataUpdateArgs>(
      args: SelectSubset<T, RankingDataUpdateArgs>
    ): Prisma__RankingDataClient<RankingDataGetPayload<T>>

    /**
     * Delete zero or more RankingData.
     * @param {RankingDataDeleteManyArgs} args - Arguments to filter RankingData to delete.
     * @example
     * // Delete a few RankingData
     * const { count } = await prisma.rankingData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RankingDataDeleteManyArgs>(
      args?: SelectSubset<T, RankingDataDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RankingData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RankingData
     * const rankingData = await prisma.rankingData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RankingDataUpdateManyArgs>(
      args: SelectSubset<T, RankingDataUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RankingData.
     * @param {RankingDataUpsertArgs} args - Arguments to update or create a RankingData.
     * @example
     * // Update or create a RankingData
     * const rankingData = await prisma.rankingData.upsert({
     *   create: {
     *     // ... data to create a RankingData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RankingData we want to update
     *   }
     * })
    **/
    upsert<T extends RankingDataUpsertArgs>(
      args: SelectSubset<T, RankingDataUpsertArgs>
    ): Prisma__RankingDataClient<RankingDataGetPayload<T>>

    /**
     * Count the number of RankingData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingDataCountArgs} args - Arguments to filter RankingData to count.
     * @example
     * // Count the number of RankingData
     * const count = await prisma.rankingData.count({
     *   where: {
     *     // ... the filter for the RankingData we want to count
     *   }
     * })
    **/
    count<T extends RankingDataCountArgs>(
      args?: Subset<T, RankingDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RankingDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RankingData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RankingDataAggregateArgs>(args: Subset<T, RankingDataAggregateArgs>): Prisma.PrismaPromise<GetRankingDataAggregateType<T>>

    /**
     * Group by RankingData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RankingDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RankingDataGroupByArgs['orderBy'] }
        : { orderBy?: RankingDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RankingDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRankingDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for RankingData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RankingDataClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    achievements_assignement<T extends RankingData$achievements_assignementArgs= {}>(args?: Subset<T, RankingData$achievements_assignementArgs>): Prisma.PrismaPromise<Array<AchievementsAssignementGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * RankingData base type for findUnique actions
   */
  export type RankingDataFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the RankingData
     */
    select?: RankingDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankingDataInclude | null
    /**
     * Filter, which RankingData to fetch.
     */
    where: RankingDataWhereUniqueInput
  }

  /**
   * RankingData findUnique
   */
  export interface RankingDataFindUniqueArgs extends RankingDataFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * RankingData findUniqueOrThrow
   */
  export type RankingDataFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the RankingData
     */
    select?: RankingDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankingDataInclude | null
    /**
     * Filter, which RankingData to fetch.
     */
    where: RankingDataWhereUniqueInput
  }


  /**
   * RankingData base type for findFirst actions
   */
  export type RankingDataFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the RankingData
     */
    select?: RankingDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankingDataInclude | null
    /**
     * Filter, which RankingData to fetch.
     */
    where?: RankingDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingData to fetch.
     */
    orderBy?: Enumerable<RankingDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RankingData.
     */
    cursor?: RankingDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RankingData.
     */
    distinct?: Enumerable<RankingDataScalarFieldEnum>
  }

  /**
   * RankingData findFirst
   */
  export interface RankingDataFindFirstArgs extends RankingDataFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * RankingData findFirstOrThrow
   */
  export type RankingDataFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the RankingData
     */
    select?: RankingDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankingDataInclude | null
    /**
     * Filter, which RankingData to fetch.
     */
    where?: RankingDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingData to fetch.
     */
    orderBy?: Enumerable<RankingDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RankingData.
     */
    cursor?: RankingDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RankingData.
     */
    distinct?: Enumerable<RankingDataScalarFieldEnum>
  }


  /**
   * RankingData findMany
   */
  export type RankingDataFindManyArgs = {
    /**
     * Select specific fields to fetch from the RankingData
     */
    select?: RankingDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankingDataInclude | null
    /**
     * Filter, which RankingData to fetch.
     */
    where?: RankingDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingData to fetch.
     */
    orderBy?: Enumerable<RankingDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RankingData.
     */
    cursor?: RankingDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingData.
     */
    skip?: number
    distinct?: Enumerable<RankingDataScalarFieldEnum>
  }


  /**
   * RankingData create
   */
  export type RankingDataCreateArgs = {
    /**
     * Select specific fields to fetch from the RankingData
     */
    select?: RankingDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankingDataInclude | null
    /**
     * The data needed to create a RankingData.
     */
    data: XOR<RankingDataCreateInput, RankingDataUncheckedCreateInput>
  }


  /**
   * RankingData createMany
   */
  export type RankingDataCreateManyArgs = {
    /**
     * The data used to create many RankingData.
     */
    data: Enumerable<RankingDataCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * RankingData update
   */
  export type RankingDataUpdateArgs = {
    /**
     * Select specific fields to fetch from the RankingData
     */
    select?: RankingDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankingDataInclude | null
    /**
     * The data needed to update a RankingData.
     */
    data: XOR<RankingDataUpdateInput, RankingDataUncheckedUpdateInput>
    /**
     * Choose, which RankingData to update.
     */
    where: RankingDataWhereUniqueInput
  }


  /**
   * RankingData updateMany
   */
  export type RankingDataUpdateManyArgs = {
    /**
     * The data used to update RankingData.
     */
    data: XOR<RankingDataUpdateManyMutationInput, RankingDataUncheckedUpdateManyInput>
    /**
     * Filter which RankingData to update
     */
    where?: RankingDataWhereInput
  }


  /**
   * RankingData upsert
   */
  export type RankingDataUpsertArgs = {
    /**
     * Select specific fields to fetch from the RankingData
     */
    select?: RankingDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankingDataInclude | null
    /**
     * The filter to search for the RankingData to update in case it exists.
     */
    where: RankingDataWhereUniqueInput
    /**
     * In case the RankingData found by the `where` argument doesn't exist, create a new RankingData with this data.
     */
    create: XOR<RankingDataCreateInput, RankingDataUncheckedCreateInput>
    /**
     * In case the RankingData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RankingDataUpdateInput, RankingDataUncheckedUpdateInput>
  }


  /**
   * RankingData delete
   */
  export type RankingDataDeleteArgs = {
    /**
     * Select specific fields to fetch from the RankingData
     */
    select?: RankingDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankingDataInclude | null
    /**
     * Filter which RankingData to delete.
     */
    where: RankingDataWhereUniqueInput
  }


  /**
   * RankingData deleteMany
   */
  export type RankingDataDeleteManyArgs = {
    /**
     * Filter which RankingData to delete
     */
    where?: RankingDataWhereInput
  }


  /**
   * RankingData.achievements_assignement
   */
  export type RankingData$achievements_assignementArgs = {
    /**
     * Select specific fields to fetch from the AchievementsAssignement
     */
    select?: AchievementsAssignementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsAssignementInclude | null
    where?: AchievementsAssignementWhereInput
    orderBy?: Enumerable<AchievementsAssignementOrderByWithRelationInput>
    cursor?: AchievementsAssignementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AchievementsAssignementScalarFieldEnum>
  }


  /**
   * RankingData without action
   */
  export type RankingDataArgs = {
    /**
     * Select specific fields to fetch from the RankingData
     */
    select?: RankingDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankingDataInclude | null
  }



  /**
   * Model Achievements
   */


  export type AggregateAchievements = {
    _count: AchievementsCountAggregateOutputType | null
    _avg: AchievementsAvgAggregateOutputType | null
    _sum: AchievementsSumAggregateOutputType | null
    _min: AchievementsMinAggregateOutputType | null
    _max: AchievementsMaxAggregateOutputType | null
  }

  export type AchievementsAvgAggregateOutputType = {
    achievement_id: number | null
  }

  export type AchievementsSumAggregateOutputType = {
    achievement_id: number | null
  }

  export type AchievementsMinAggregateOutputType = {
    achievement_id: number | null
    name: string | null
    description: string | null
    image: string | null
  }

  export type AchievementsMaxAggregateOutputType = {
    achievement_id: number | null
    name: string | null
    description: string | null
    image: string | null
  }

  export type AchievementsCountAggregateOutputType = {
    achievement_id: number
    name: number
    description: number
    image: number
    _all: number
  }


  export type AchievementsAvgAggregateInputType = {
    achievement_id?: true
  }

  export type AchievementsSumAggregateInputType = {
    achievement_id?: true
  }

  export type AchievementsMinAggregateInputType = {
    achievement_id?: true
    name?: true
    description?: true
    image?: true
  }

  export type AchievementsMaxAggregateInputType = {
    achievement_id?: true
    name?: true
    description?: true
    image?: true
  }

  export type AchievementsCountAggregateInputType = {
    achievement_id?: true
    name?: true
    description?: true
    image?: true
    _all?: true
  }

  export type AchievementsAggregateArgs = {
    /**
     * Filter which Achievements to aggregate.
     */
    where?: AchievementsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: Enumerable<AchievementsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AchievementsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Achievements
    **/
    _count?: true | AchievementsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AchievementsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AchievementsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AchievementsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AchievementsMaxAggregateInputType
  }

  export type GetAchievementsAggregateType<T extends AchievementsAggregateArgs> = {
        [P in keyof T & keyof AggregateAchievements]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAchievements[P]>
      : GetScalarType<T[P], AggregateAchievements[P]>
  }




  export type AchievementsGroupByArgs = {
    where?: AchievementsWhereInput
    orderBy?: Enumerable<AchievementsOrderByWithAggregationInput>
    by: AchievementsScalarFieldEnum[]
    having?: AchievementsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AchievementsCountAggregateInputType | true
    _avg?: AchievementsAvgAggregateInputType
    _sum?: AchievementsSumAggregateInputType
    _min?: AchievementsMinAggregateInputType
    _max?: AchievementsMaxAggregateInputType
  }


  export type AchievementsGroupByOutputType = {
    achievement_id: number
    name: string
    description: string
    image: string
    _count: AchievementsCountAggregateOutputType | null
    _avg: AchievementsAvgAggregateOutputType | null
    _sum: AchievementsSumAggregateOutputType | null
    _min: AchievementsMinAggregateOutputType | null
    _max: AchievementsMaxAggregateOutputType | null
  }

  type GetAchievementsGroupByPayload<T extends AchievementsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AchievementsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AchievementsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AchievementsGroupByOutputType[P]>
            : GetScalarType<T[P], AchievementsGroupByOutputType[P]>
        }
      >
    >


  export type AchievementsSelect = {
    achievement_id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    achievements_assignement?: boolean | Achievements$achievements_assignementArgs
    _count?: boolean | AchievementsCountOutputTypeArgs
  }


  export type AchievementsInclude = {
    achievements_assignement?: boolean | Achievements$achievements_assignementArgs
    _count?: boolean | AchievementsCountOutputTypeArgs
  }

  export type AchievementsGetPayload<S extends boolean | null | undefined | AchievementsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Achievements :
    S extends undefined ? never :
    S extends { include: any } & (AchievementsArgs | AchievementsFindManyArgs)
    ? Achievements  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'achievements_assignement' ? Array < AchievementsAssignementGetPayload<S['include'][P]>>  :
        P extends '_count' ? AchievementsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AchievementsArgs | AchievementsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'achievements_assignement' ? Array < AchievementsAssignementGetPayload<S['select'][P]>>  :
        P extends '_count' ? AchievementsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Achievements ? Achievements[P] : never
  } 
      : Achievements


  type AchievementsCountArgs = 
    Omit<AchievementsFindManyArgs, 'select' | 'include'> & {
      select?: AchievementsCountAggregateInputType | true
    }

  export interface AchievementsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Achievements that matches the filter.
     * @param {AchievementsFindUniqueArgs} args - Arguments to find a Achievements
     * @example
     * // Get one Achievements
     * const achievements = await prisma.achievements.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AchievementsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AchievementsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Achievements'> extends True ? Prisma__AchievementsClient<AchievementsGetPayload<T>> : Prisma__AchievementsClient<AchievementsGetPayload<T> | null, null>

    /**
     * Find one Achievements that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AchievementsFindUniqueOrThrowArgs} args - Arguments to find a Achievements
     * @example
     * // Get one Achievements
     * const achievements = await prisma.achievements.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AchievementsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AchievementsFindUniqueOrThrowArgs>
    ): Prisma__AchievementsClient<AchievementsGetPayload<T>>

    /**
     * Find the first Achievements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementsFindFirstArgs} args - Arguments to find a Achievements
     * @example
     * // Get one Achievements
     * const achievements = await prisma.achievements.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AchievementsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AchievementsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Achievements'> extends True ? Prisma__AchievementsClient<AchievementsGetPayload<T>> : Prisma__AchievementsClient<AchievementsGetPayload<T> | null, null>

    /**
     * Find the first Achievements that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementsFindFirstOrThrowArgs} args - Arguments to find a Achievements
     * @example
     * // Get one Achievements
     * const achievements = await prisma.achievements.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AchievementsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AchievementsFindFirstOrThrowArgs>
    ): Prisma__AchievementsClient<AchievementsGetPayload<T>>

    /**
     * Find zero or more Achievements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Achievements
     * const achievements = await prisma.achievements.findMany()
     * 
     * // Get first 10 Achievements
     * const achievements = await prisma.achievements.findMany({ take: 10 })
     * 
     * // Only select the `achievement_id`
     * const achievementsWithAchievement_idOnly = await prisma.achievements.findMany({ select: { achievement_id: true } })
     * 
    **/
    findMany<T extends AchievementsFindManyArgs>(
      args?: SelectSubset<T, AchievementsFindManyArgs>
    ): Prisma.PrismaPromise<Array<AchievementsGetPayload<T>>>

    /**
     * Create a Achievements.
     * @param {AchievementsCreateArgs} args - Arguments to create a Achievements.
     * @example
     * // Create one Achievements
     * const Achievements = await prisma.achievements.create({
     *   data: {
     *     // ... data to create a Achievements
     *   }
     * })
     * 
    **/
    create<T extends AchievementsCreateArgs>(
      args: SelectSubset<T, AchievementsCreateArgs>
    ): Prisma__AchievementsClient<AchievementsGetPayload<T>>

    /**
     * Create many Achievements.
     *     @param {AchievementsCreateManyArgs} args - Arguments to create many Achievements.
     *     @example
     *     // Create many Achievements
     *     const achievements = await prisma.achievements.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AchievementsCreateManyArgs>(
      args?: SelectSubset<T, AchievementsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Achievements.
     * @param {AchievementsDeleteArgs} args - Arguments to delete one Achievements.
     * @example
     * // Delete one Achievements
     * const Achievements = await prisma.achievements.delete({
     *   where: {
     *     // ... filter to delete one Achievements
     *   }
     * })
     * 
    **/
    delete<T extends AchievementsDeleteArgs>(
      args: SelectSubset<T, AchievementsDeleteArgs>
    ): Prisma__AchievementsClient<AchievementsGetPayload<T>>

    /**
     * Update one Achievements.
     * @param {AchievementsUpdateArgs} args - Arguments to update one Achievements.
     * @example
     * // Update one Achievements
     * const achievements = await prisma.achievements.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AchievementsUpdateArgs>(
      args: SelectSubset<T, AchievementsUpdateArgs>
    ): Prisma__AchievementsClient<AchievementsGetPayload<T>>

    /**
     * Delete zero or more Achievements.
     * @param {AchievementsDeleteManyArgs} args - Arguments to filter Achievements to delete.
     * @example
     * // Delete a few Achievements
     * const { count } = await prisma.achievements.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AchievementsDeleteManyArgs>(
      args?: SelectSubset<T, AchievementsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Achievements
     * const achievements = await prisma.achievements.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AchievementsUpdateManyArgs>(
      args: SelectSubset<T, AchievementsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Achievements.
     * @param {AchievementsUpsertArgs} args - Arguments to update or create a Achievements.
     * @example
     * // Update or create a Achievements
     * const achievements = await prisma.achievements.upsert({
     *   create: {
     *     // ... data to create a Achievements
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Achievements we want to update
     *   }
     * })
    **/
    upsert<T extends AchievementsUpsertArgs>(
      args: SelectSubset<T, AchievementsUpsertArgs>
    ): Prisma__AchievementsClient<AchievementsGetPayload<T>>

    /**
     * Count the number of Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementsCountArgs} args - Arguments to filter Achievements to count.
     * @example
     * // Count the number of Achievements
     * const count = await prisma.achievements.count({
     *   where: {
     *     // ... the filter for the Achievements we want to count
     *   }
     * })
    **/
    count<T extends AchievementsCountArgs>(
      args?: Subset<T, AchievementsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AchievementsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AchievementsAggregateArgs>(args: Subset<T, AchievementsAggregateArgs>): Prisma.PrismaPromise<GetAchievementsAggregateType<T>>

    /**
     * Group by Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AchievementsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AchievementsGroupByArgs['orderBy'] }
        : { orderBy?: AchievementsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AchievementsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAchievementsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Achievements.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AchievementsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    achievements_assignement<T extends Achievements$achievements_assignementArgs= {}>(args?: Subset<T, Achievements$achievements_assignementArgs>): Prisma.PrismaPromise<Array<AchievementsAssignementGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Achievements base type for findUnique actions
   */
  export type AchievementsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Achievements
     */
    select?: AchievementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsInclude | null
    /**
     * Filter, which Achievements to fetch.
     */
    where: AchievementsWhereUniqueInput
  }

  /**
   * Achievements findUnique
   */
  export interface AchievementsFindUniqueArgs extends AchievementsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Achievements findUniqueOrThrow
   */
  export type AchievementsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Achievements
     */
    select?: AchievementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsInclude | null
    /**
     * Filter, which Achievements to fetch.
     */
    where: AchievementsWhereUniqueInput
  }


  /**
   * Achievements base type for findFirst actions
   */
  export type AchievementsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Achievements
     */
    select?: AchievementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsInclude | null
    /**
     * Filter, which Achievements to fetch.
     */
    where?: AchievementsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: Enumerable<AchievementsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievements.
     */
    cursor?: AchievementsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievements.
     */
    distinct?: Enumerable<AchievementsScalarFieldEnum>
  }

  /**
   * Achievements findFirst
   */
  export interface AchievementsFindFirstArgs extends AchievementsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Achievements findFirstOrThrow
   */
  export type AchievementsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Achievements
     */
    select?: AchievementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsInclude | null
    /**
     * Filter, which Achievements to fetch.
     */
    where?: AchievementsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: Enumerable<AchievementsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievements.
     */
    cursor?: AchievementsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievements.
     */
    distinct?: Enumerable<AchievementsScalarFieldEnum>
  }


  /**
   * Achievements findMany
   */
  export type AchievementsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Achievements
     */
    select?: AchievementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsInclude | null
    /**
     * Filter, which Achievements to fetch.
     */
    where?: AchievementsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: Enumerable<AchievementsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Achievements.
     */
    cursor?: AchievementsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    distinct?: Enumerable<AchievementsScalarFieldEnum>
  }


  /**
   * Achievements create
   */
  export type AchievementsCreateArgs = {
    /**
     * Select specific fields to fetch from the Achievements
     */
    select?: AchievementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsInclude | null
    /**
     * The data needed to create a Achievements.
     */
    data: XOR<AchievementsCreateInput, AchievementsUncheckedCreateInput>
  }


  /**
   * Achievements createMany
   */
  export type AchievementsCreateManyArgs = {
    /**
     * The data used to create many Achievements.
     */
    data: Enumerable<AchievementsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Achievements update
   */
  export type AchievementsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Achievements
     */
    select?: AchievementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsInclude | null
    /**
     * The data needed to update a Achievements.
     */
    data: XOR<AchievementsUpdateInput, AchievementsUncheckedUpdateInput>
    /**
     * Choose, which Achievements to update.
     */
    where: AchievementsWhereUniqueInput
  }


  /**
   * Achievements updateMany
   */
  export type AchievementsUpdateManyArgs = {
    /**
     * The data used to update Achievements.
     */
    data: XOR<AchievementsUpdateManyMutationInput, AchievementsUncheckedUpdateManyInput>
    /**
     * Filter which Achievements to update
     */
    where?: AchievementsWhereInput
  }


  /**
   * Achievements upsert
   */
  export type AchievementsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Achievements
     */
    select?: AchievementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsInclude | null
    /**
     * The filter to search for the Achievements to update in case it exists.
     */
    where: AchievementsWhereUniqueInput
    /**
     * In case the Achievements found by the `where` argument doesn't exist, create a new Achievements with this data.
     */
    create: XOR<AchievementsCreateInput, AchievementsUncheckedCreateInput>
    /**
     * In case the Achievements was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AchievementsUpdateInput, AchievementsUncheckedUpdateInput>
  }


  /**
   * Achievements delete
   */
  export type AchievementsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Achievements
     */
    select?: AchievementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsInclude | null
    /**
     * Filter which Achievements to delete.
     */
    where: AchievementsWhereUniqueInput
  }


  /**
   * Achievements deleteMany
   */
  export type AchievementsDeleteManyArgs = {
    /**
     * Filter which Achievements to delete
     */
    where?: AchievementsWhereInput
  }


  /**
   * Achievements.achievements_assignement
   */
  export type Achievements$achievements_assignementArgs = {
    /**
     * Select specific fields to fetch from the AchievementsAssignement
     */
    select?: AchievementsAssignementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsAssignementInclude | null
    where?: AchievementsAssignementWhereInput
    orderBy?: Enumerable<AchievementsAssignementOrderByWithRelationInput>
    cursor?: AchievementsAssignementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AchievementsAssignementScalarFieldEnum>
  }


  /**
   * Achievements without action
   */
  export type AchievementsArgs = {
    /**
     * Select specific fields to fetch from the Achievements
     */
    select?: AchievementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsInclude | null
  }



  /**
   * Model AchievementsAssignement
   */


  export type AggregateAchievementsAssignement = {
    _count: AchievementsAssignementCountAggregateOutputType | null
    _avg: AchievementsAssignementAvgAggregateOutputType | null
    _sum: AchievementsAssignementSumAggregateOutputType | null
    _min: AchievementsAssignementMinAggregateOutputType | null
    _max: AchievementsAssignementMaxAggregateOutputType | null
  }

  export type AchievementsAssignementAvgAggregateOutputType = {
    achievement_id: number | null
  }

  export type AchievementsAssignementSumAggregateOutputType = {
    achievement_id: number | null
  }

  export type AchievementsAssignementMinAggregateOutputType = {
    achievement_id: number | null
    player_id: string | null
  }

  export type AchievementsAssignementMaxAggregateOutputType = {
    achievement_id: number | null
    player_id: string | null
  }

  export type AchievementsAssignementCountAggregateOutputType = {
    achievement_id: number
    player_id: number
    _all: number
  }


  export type AchievementsAssignementAvgAggregateInputType = {
    achievement_id?: true
  }

  export type AchievementsAssignementSumAggregateInputType = {
    achievement_id?: true
  }

  export type AchievementsAssignementMinAggregateInputType = {
    achievement_id?: true
    player_id?: true
  }

  export type AchievementsAssignementMaxAggregateInputType = {
    achievement_id?: true
    player_id?: true
  }

  export type AchievementsAssignementCountAggregateInputType = {
    achievement_id?: true
    player_id?: true
    _all?: true
  }

  export type AchievementsAssignementAggregateArgs = {
    /**
     * Filter which AchievementsAssignement to aggregate.
     */
    where?: AchievementsAssignementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AchievementsAssignements to fetch.
     */
    orderBy?: Enumerable<AchievementsAssignementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AchievementsAssignementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AchievementsAssignements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AchievementsAssignements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AchievementsAssignements
    **/
    _count?: true | AchievementsAssignementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AchievementsAssignementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AchievementsAssignementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AchievementsAssignementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AchievementsAssignementMaxAggregateInputType
  }

  export type GetAchievementsAssignementAggregateType<T extends AchievementsAssignementAggregateArgs> = {
        [P in keyof T & keyof AggregateAchievementsAssignement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAchievementsAssignement[P]>
      : GetScalarType<T[P], AggregateAchievementsAssignement[P]>
  }




  export type AchievementsAssignementGroupByArgs = {
    where?: AchievementsAssignementWhereInput
    orderBy?: Enumerable<AchievementsAssignementOrderByWithAggregationInput>
    by: AchievementsAssignementScalarFieldEnum[]
    having?: AchievementsAssignementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AchievementsAssignementCountAggregateInputType | true
    _avg?: AchievementsAssignementAvgAggregateInputType
    _sum?: AchievementsAssignementSumAggregateInputType
    _min?: AchievementsAssignementMinAggregateInputType
    _max?: AchievementsAssignementMaxAggregateInputType
  }


  export type AchievementsAssignementGroupByOutputType = {
    achievement_id: number
    player_id: string
    _count: AchievementsAssignementCountAggregateOutputType | null
    _avg: AchievementsAssignementAvgAggregateOutputType | null
    _sum: AchievementsAssignementSumAggregateOutputType | null
    _min: AchievementsAssignementMinAggregateOutputType | null
    _max: AchievementsAssignementMaxAggregateOutputType | null
  }

  type GetAchievementsAssignementGroupByPayload<T extends AchievementsAssignementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AchievementsAssignementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AchievementsAssignementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AchievementsAssignementGroupByOutputType[P]>
            : GetScalarType<T[P], AchievementsAssignementGroupByOutputType[P]>
        }
      >
    >


  export type AchievementsAssignementSelect = {
    achievement_id?: boolean
    player_id?: boolean
    achievement?: boolean | AchievementsArgs
    player?: boolean | RankingDataArgs
  }


  export type AchievementsAssignementInclude = {
    achievement?: boolean | AchievementsArgs
    player?: boolean | RankingDataArgs
  }

  export type AchievementsAssignementGetPayload<S extends boolean | null | undefined | AchievementsAssignementArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AchievementsAssignement :
    S extends undefined ? never :
    S extends { include: any } & (AchievementsAssignementArgs | AchievementsAssignementFindManyArgs)
    ? AchievementsAssignement  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'achievement' ? AchievementsGetPayload<S['include'][P]> :
        P extends 'player' ? RankingDataGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AchievementsAssignementArgs | AchievementsAssignementFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'achievement' ? AchievementsGetPayload<S['select'][P]> :
        P extends 'player' ? RankingDataGetPayload<S['select'][P]> :  P extends keyof AchievementsAssignement ? AchievementsAssignement[P] : never
  } 
      : AchievementsAssignement


  type AchievementsAssignementCountArgs = 
    Omit<AchievementsAssignementFindManyArgs, 'select' | 'include'> & {
      select?: AchievementsAssignementCountAggregateInputType | true
    }

  export interface AchievementsAssignementDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one AchievementsAssignement that matches the filter.
     * @param {AchievementsAssignementFindUniqueArgs} args - Arguments to find a AchievementsAssignement
     * @example
     * // Get one AchievementsAssignement
     * const achievementsAssignement = await prisma.achievementsAssignement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AchievementsAssignementFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AchievementsAssignementFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'AchievementsAssignement'> extends True ? Prisma__AchievementsAssignementClient<AchievementsAssignementGetPayload<T>> : Prisma__AchievementsAssignementClient<AchievementsAssignementGetPayload<T> | null, null>

    /**
     * Find one AchievementsAssignement that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AchievementsAssignementFindUniqueOrThrowArgs} args - Arguments to find a AchievementsAssignement
     * @example
     * // Get one AchievementsAssignement
     * const achievementsAssignement = await prisma.achievementsAssignement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AchievementsAssignementFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AchievementsAssignementFindUniqueOrThrowArgs>
    ): Prisma__AchievementsAssignementClient<AchievementsAssignementGetPayload<T>>

    /**
     * Find the first AchievementsAssignement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementsAssignementFindFirstArgs} args - Arguments to find a AchievementsAssignement
     * @example
     * // Get one AchievementsAssignement
     * const achievementsAssignement = await prisma.achievementsAssignement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AchievementsAssignementFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AchievementsAssignementFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'AchievementsAssignement'> extends True ? Prisma__AchievementsAssignementClient<AchievementsAssignementGetPayload<T>> : Prisma__AchievementsAssignementClient<AchievementsAssignementGetPayload<T> | null, null>

    /**
     * Find the first AchievementsAssignement that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementsAssignementFindFirstOrThrowArgs} args - Arguments to find a AchievementsAssignement
     * @example
     * // Get one AchievementsAssignement
     * const achievementsAssignement = await prisma.achievementsAssignement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AchievementsAssignementFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AchievementsAssignementFindFirstOrThrowArgs>
    ): Prisma__AchievementsAssignementClient<AchievementsAssignementGetPayload<T>>

    /**
     * Find zero or more AchievementsAssignements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementsAssignementFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AchievementsAssignements
     * const achievementsAssignements = await prisma.achievementsAssignement.findMany()
     * 
     * // Get first 10 AchievementsAssignements
     * const achievementsAssignements = await prisma.achievementsAssignement.findMany({ take: 10 })
     * 
     * // Only select the `achievement_id`
     * const achievementsAssignementWithAchievement_idOnly = await prisma.achievementsAssignement.findMany({ select: { achievement_id: true } })
     * 
    **/
    findMany<T extends AchievementsAssignementFindManyArgs>(
      args?: SelectSubset<T, AchievementsAssignementFindManyArgs>
    ): Prisma.PrismaPromise<Array<AchievementsAssignementGetPayload<T>>>

    /**
     * Create a AchievementsAssignement.
     * @param {AchievementsAssignementCreateArgs} args - Arguments to create a AchievementsAssignement.
     * @example
     * // Create one AchievementsAssignement
     * const AchievementsAssignement = await prisma.achievementsAssignement.create({
     *   data: {
     *     // ... data to create a AchievementsAssignement
     *   }
     * })
     * 
    **/
    create<T extends AchievementsAssignementCreateArgs>(
      args: SelectSubset<T, AchievementsAssignementCreateArgs>
    ): Prisma__AchievementsAssignementClient<AchievementsAssignementGetPayload<T>>

    /**
     * Create many AchievementsAssignements.
     *     @param {AchievementsAssignementCreateManyArgs} args - Arguments to create many AchievementsAssignements.
     *     @example
     *     // Create many AchievementsAssignements
     *     const achievementsAssignement = await prisma.achievementsAssignement.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AchievementsAssignementCreateManyArgs>(
      args?: SelectSubset<T, AchievementsAssignementCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AchievementsAssignement.
     * @param {AchievementsAssignementDeleteArgs} args - Arguments to delete one AchievementsAssignement.
     * @example
     * // Delete one AchievementsAssignement
     * const AchievementsAssignement = await prisma.achievementsAssignement.delete({
     *   where: {
     *     // ... filter to delete one AchievementsAssignement
     *   }
     * })
     * 
    **/
    delete<T extends AchievementsAssignementDeleteArgs>(
      args: SelectSubset<T, AchievementsAssignementDeleteArgs>
    ): Prisma__AchievementsAssignementClient<AchievementsAssignementGetPayload<T>>

    /**
     * Update one AchievementsAssignement.
     * @param {AchievementsAssignementUpdateArgs} args - Arguments to update one AchievementsAssignement.
     * @example
     * // Update one AchievementsAssignement
     * const achievementsAssignement = await prisma.achievementsAssignement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AchievementsAssignementUpdateArgs>(
      args: SelectSubset<T, AchievementsAssignementUpdateArgs>
    ): Prisma__AchievementsAssignementClient<AchievementsAssignementGetPayload<T>>

    /**
     * Delete zero or more AchievementsAssignements.
     * @param {AchievementsAssignementDeleteManyArgs} args - Arguments to filter AchievementsAssignements to delete.
     * @example
     * // Delete a few AchievementsAssignements
     * const { count } = await prisma.achievementsAssignement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AchievementsAssignementDeleteManyArgs>(
      args?: SelectSubset<T, AchievementsAssignementDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AchievementsAssignements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementsAssignementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AchievementsAssignements
     * const achievementsAssignement = await prisma.achievementsAssignement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AchievementsAssignementUpdateManyArgs>(
      args: SelectSubset<T, AchievementsAssignementUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AchievementsAssignement.
     * @param {AchievementsAssignementUpsertArgs} args - Arguments to update or create a AchievementsAssignement.
     * @example
     * // Update or create a AchievementsAssignement
     * const achievementsAssignement = await prisma.achievementsAssignement.upsert({
     *   create: {
     *     // ... data to create a AchievementsAssignement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AchievementsAssignement we want to update
     *   }
     * })
    **/
    upsert<T extends AchievementsAssignementUpsertArgs>(
      args: SelectSubset<T, AchievementsAssignementUpsertArgs>
    ): Prisma__AchievementsAssignementClient<AchievementsAssignementGetPayload<T>>

    /**
     * Count the number of AchievementsAssignements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementsAssignementCountArgs} args - Arguments to filter AchievementsAssignements to count.
     * @example
     * // Count the number of AchievementsAssignements
     * const count = await prisma.achievementsAssignement.count({
     *   where: {
     *     // ... the filter for the AchievementsAssignements we want to count
     *   }
     * })
    **/
    count<T extends AchievementsAssignementCountArgs>(
      args?: Subset<T, AchievementsAssignementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AchievementsAssignementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AchievementsAssignement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementsAssignementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AchievementsAssignementAggregateArgs>(args: Subset<T, AchievementsAssignementAggregateArgs>): Prisma.PrismaPromise<GetAchievementsAssignementAggregateType<T>>

    /**
     * Group by AchievementsAssignement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementsAssignementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AchievementsAssignementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AchievementsAssignementGroupByArgs['orderBy'] }
        : { orderBy?: AchievementsAssignementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AchievementsAssignementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAchievementsAssignementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for AchievementsAssignement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AchievementsAssignementClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    achievement<T extends AchievementsArgs= {}>(args?: Subset<T, AchievementsArgs>): Prisma__AchievementsClient<AchievementsGetPayload<T> | Null>;

    player<T extends RankingDataArgs= {}>(args?: Subset<T, RankingDataArgs>): Prisma__RankingDataClient<RankingDataGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * AchievementsAssignement base type for findUnique actions
   */
  export type AchievementsAssignementFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the AchievementsAssignement
     */
    select?: AchievementsAssignementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsAssignementInclude | null
    /**
     * Filter, which AchievementsAssignement to fetch.
     */
    where: AchievementsAssignementWhereUniqueInput
  }

  /**
   * AchievementsAssignement findUnique
   */
  export interface AchievementsAssignementFindUniqueArgs extends AchievementsAssignementFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AchievementsAssignement findUniqueOrThrow
   */
  export type AchievementsAssignementFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the AchievementsAssignement
     */
    select?: AchievementsAssignementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsAssignementInclude | null
    /**
     * Filter, which AchievementsAssignement to fetch.
     */
    where: AchievementsAssignementWhereUniqueInput
  }


  /**
   * AchievementsAssignement base type for findFirst actions
   */
  export type AchievementsAssignementFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the AchievementsAssignement
     */
    select?: AchievementsAssignementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsAssignementInclude | null
    /**
     * Filter, which AchievementsAssignement to fetch.
     */
    where?: AchievementsAssignementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AchievementsAssignements to fetch.
     */
    orderBy?: Enumerable<AchievementsAssignementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AchievementsAssignements.
     */
    cursor?: AchievementsAssignementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AchievementsAssignements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AchievementsAssignements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AchievementsAssignements.
     */
    distinct?: Enumerable<AchievementsAssignementScalarFieldEnum>
  }

  /**
   * AchievementsAssignement findFirst
   */
  export interface AchievementsAssignementFindFirstArgs extends AchievementsAssignementFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AchievementsAssignement findFirstOrThrow
   */
  export type AchievementsAssignementFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the AchievementsAssignement
     */
    select?: AchievementsAssignementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsAssignementInclude | null
    /**
     * Filter, which AchievementsAssignement to fetch.
     */
    where?: AchievementsAssignementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AchievementsAssignements to fetch.
     */
    orderBy?: Enumerable<AchievementsAssignementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AchievementsAssignements.
     */
    cursor?: AchievementsAssignementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AchievementsAssignements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AchievementsAssignements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AchievementsAssignements.
     */
    distinct?: Enumerable<AchievementsAssignementScalarFieldEnum>
  }


  /**
   * AchievementsAssignement findMany
   */
  export type AchievementsAssignementFindManyArgs = {
    /**
     * Select specific fields to fetch from the AchievementsAssignement
     */
    select?: AchievementsAssignementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsAssignementInclude | null
    /**
     * Filter, which AchievementsAssignements to fetch.
     */
    where?: AchievementsAssignementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AchievementsAssignements to fetch.
     */
    orderBy?: Enumerable<AchievementsAssignementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AchievementsAssignements.
     */
    cursor?: AchievementsAssignementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AchievementsAssignements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AchievementsAssignements.
     */
    skip?: number
    distinct?: Enumerable<AchievementsAssignementScalarFieldEnum>
  }


  /**
   * AchievementsAssignement create
   */
  export type AchievementsAssignementCreateArgs = {
    /**
     * Select specific fields to fetch from the AchievementsAssignement
     */
    select?: AchievementsAssignementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsAssignementInclude | null
    /**
     * The data needed to create a AchievementsAssignement.
     */
    data: XOR<AchievementsAssignementCreateInput, AchievementsAssignementUncheckedCreateInput>
  }


  /**
   * AchievementsAssignement createMany
   */
  export type AchievementsAssignementCreateManyArgs = {
    /**
     * The data used to create many AchievementsAssignements.
     */
    data: Enumerable<AchievementsAssignementCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * AchievementsAssignement update
   */
  export type AchievementsAssignementUpdateArgs = {
    /**
     * Select specific fields to fetch from the AchievementsAssignement
     */
    select?: AchievementsAssignementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsAssignementInclude | null
    /**
     * The data needed to update a AchievementsAssignement.
     */
    data: XOR<AchievementsAssignementUpdateInput, AchievementsAssignementUncheckedUpdateInput>
    /**
     * Choose, which AchievementsAssignement to update.
     */
    where: AchievementsAssignementWhereUniqueInput
  }


  /**
   * AchievementsAssignement updateMany
   */
  export type AchievementsAssignementUpdateManyArgs = {
    /**
     * The data used to update AchievementsAssignements.
     */
    data: XOR<AchievementsAssignementUpdateManyMutationInput, AchievementsAssignementUncheckedUpdateManyInput>
    /**
     * Filter which AchievementsAssignements to update
     */
    where?: AchievementsAssignementWhereInput
  }


  /**
   * AchievementsAssignement upsert
   */
  export type AchievementsAssignementUpsertArgs = {
    /**
     * Select specific fields to fetch from the AchievementsAssignement
     */
    select?: AchievementsAssignementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsAssignementInclude | null
    /**
     * The filter to search for the AchievementsAssignement to update in case it exists.
     */
    where: AchievementsAssignementWhereUniqueInput
    /**
     * In case the AchievementsAssignement found by the `where` argument doesn't exist, create a new AchievementsAssignement with this data.
     */
    create: XOR<AchievementsAssignementCreateInput, AchievementsAssignementUncheckedCreateInput>
    /**
     * In case the AchievementsAssignement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AchievementsAssignementUpdateInput, AchievementsAssignementUncheckedUpdateInput>
  }


  /**
   * AchievementsAssignement delete
   */
  export type AchievementsAssignementDeleteArgs = {
    /**
     * Select specific fields to fetch from the AchievementsAssignement
     */
    select?: AchievementsAssignementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsAssignementInclude | null
    /**
     * Filter which AchievementsAssignement to delete.
     */
    where: AchievementsAssignementWhereUniqueInput
  }


  /**
   * AchievementsAssignement deleteMany
   */
  export type AchievementsAssignementDeleteManyArgs = {
    /**
     * Filter which AchievementsAssignements to delete
     */
    where?: AchievementsAssignementWhereInput
  }


  /**
   * AchievementsAssignement without action
   */
  export type AchievementsAssignementArgs = {
    /**
     * Select specific fields to fetch from the AchievementsAssignement
     */
    select?: AchievementsAssignementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AchievementsAssignementInclude | null
  }



  /**
   * Model GameHistoryTab
   */


  export type AggregateGameHistoryTab = {
    _count: GameHistoryTabCountAggregateOutputType | null
    _min: GameHistoryTabMinAggregateOutputType | null
    _max: GameHistoryTabMaxAggregateOutputType | null
  }

  export type GameHistoryTabMinAggregateOutputType = {
    game_id: string | null
    user_id: string | null
  }

  export type GameHistoryTabMaxAggregateOutputType = {
    game_id: string | null
    user_id: string | null
  }

  export type GameHistoryTabCountAggregateOutputType = {
    game_id: number
    user_id: number
    _all: number
  }


  export type GameHistoryTabMinAggregateInputType = {
    game_id?: true
    user_id?: true
  }

  export type GameHistoryTabMaxAggregateInputType = {
    game_id?: true
    user_id?: true
  }

  export type GameHistoryTabCountAggregateInputType = {
    game_id?: true
    user_id?: true
    _all?: true
  }

  export type GameHistoryTabAggregateArgs = {
    /**
     * Filter which GameHistoryTab to aggregate.
     */
    where?: GameHistoryTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHistoryTabs to fetch.
     */
    orderBy?: Enumerable<GameHistoryTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameHistoryTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHistoryTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHistoryTabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameHistoryTabs
    **/
    _count?: true | GameHistoryTabCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameHistoryTabMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameHistoryTabMaxAggregateInputType
  }

  export type GetGameHistoryTabAggregateType<T extends GameHistoryTabAggregateArgs> = {
        [P in keyof T & keyof AggregateGameHistoryTab]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameHistoryTab[P]>
      : GetScalarType<T[P], AggregateGameHistoryTab[P]>
  }




  export type GameHistoryTabGroupByArgs = {
    where?: GameHistoryTabWhereInput
    orderBy?: Enumerable<GameHistoryTabOrderByWithAggregationInput>
    by: GameHistoryTabScalarFieldEnum[]
    having?: GameHistoryTabScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameHistoryTabCountAggregateInputType | true
    _min?: GameHistoryTabMinAggregateInputType
    _max?: GameHistoryTabMaxAggregateInputType
  }


  export type GameHistoryTabGroupByOutputType = {
    game_id: string
    user_id: string
    _count: GameHistoryTabCountAggregateOutputType | null
    _min: GameHistoryTabMinAggregateOutputType | null
    _max: GameHistoryTabMaxAggregateOutputType | null
  }

  type GetGameHistoryTabGroupByPayload<T extends GameHistoryTabGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GameHistoryTabGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameHistoryTabGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameHistoryTabGroupByOutputType[P]>
            : GetScalarType<T[P], GameHistoryTabGroupByOutputType[P]>
        }
      >
    >


  export type GameHistoryTabSelect = {
    game_id?: boolean
    user_id?: boolean
    game?: boolean | GameArgs
    user?: boolean | UserArgs
  }


  export type GameHistoryTabInclude = {
    game?: boolean | GameArgs
    user?: boolean | UserArgs
  }

  export type GameHistoryTabGetPayload<S extends boolean | null | undefined | GameHistoryTabArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? GameHistoryTab :
    S extends undefined ? never :
    S extends { include: any } & (GameHistoryTabArgs | GameHistoryTabFindManyArgs)
    ? GameHistoryTab  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'game' ? GameGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (GameHistoryTabArgs | GameHistoryTabFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'game' ? GameGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof GameHistoryTab ? GameHistoryTab[P] : never
  } 
      : GameHistoryTab


  type GameHistoryTabCountArgs = 
    Omit<GameHistoryTabFindManyArgs, 'select' | 'include'> & {
      select?: GameHistoryTabCountAggregateInputType | true
    }

  export interface GameHistoryTabDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one GameHistoryTab that matches the filter.
     * @param {GameHistoryTabFindUniqueArgs} args - Arguments to find a GameHistoryTab
     * @example
     * // Get one GameHistoryTab
     * const gameHistoryTab = await prisma.gameHistoryTab.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GameHistoryTabFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GameHistoryTabFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GameHistoryTab'> extends True ? Prisma__GameHistoryTabClient<GameHistoryTabGetPayload<T>> : Prisma__GameHistoryTabClient<GameHistoryTabGetPayload<T> | null, null>

    /**
     * Find one GameHistoryTab that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GameHistoryTabFindUniqueOrThrowArgs} args - Arguments to find a GameHistoryTab
     * @example
     * // Get one GameHistoryTab
     * const gameHistoryTab = await prisma.gameHistoryTab.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GameHistoryTabFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GameHistoryTabFindUniqueOrThrowArgs>
    ): Prisma__GameHistoryTabClient<GameHistoryTabGetPayload<T>>

    /**
     * Find the first GameHistoryTab that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHistoryTabFindFirstArgs} args - Arguments to find a GameHistoryTab
     * @example
     * // Get one GameHistoryTab
     * const gameHistoryTab = await prisma.gameHistoryTab.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GameHistoryTabFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GameHistoryTabFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GameHistoryTab'> extends True ? Prisma__GameHistoryTabClient<GameHistoryTabGetPayload<T>> : Prisma__GameHistoryTabClient<GameHistoryTabGetPayload<T> | null, null>

    /**
     * Find the first GameHistoryTab that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHistoryTabFindFirstOrThrowArgs} args - Arguments to find a GameHistoryTab
     * @example
     * // Get one GameHistoryTab
     * const gameHistoryTab = await prisma.gameHistoryTab.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GameHistoryTabFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GameHistoryTabFindFirstOrThrowArgs>
    ): Prisma__GameHistoryTabClient<GameHistoryTabGetPayload<T>>

    /**
     * Find zero or more GameHistoryTabs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHistoryTabFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameHistoryTabs
     * const gameHistoryTabs = await prisma.gameHistoryTab.findMany()
     * 
     * // Get first 10 GameHistoryTabs
     * const gameHistoryTabs = await prisma.gameHistoryTab.findMany({ take: 10 })
     * 
     * // Only select the `game_id`
     * const gameHistoryTabWithGame_idOnly = await prisma.gameHistoryTab.findMany({ select: { game_id: true } })
     * 
    **/
    findMany<T extends GameHistoryTabFindManyArgs>(
      args?: SelectSubset<T, GameHistoryTabFindManyArgs>
    ): Prisma.PrismaPromise<Array<GameHistoryTabGetPayload<T>>>

    /**
     * Create a GameHistoryTab.
     * @param {GameHistoryTabCreateArgs} args - Arguments to create a GameHistoryTab.
     * @example
     * // Create one GameHistoryTab
     * const GameHistoryTab = await prisma.gameHistoryTab.create({
     *   data: {
     *     // ... data to create a GameHistoryTab
     *   }
     * })
     * 
    **/
    create<T extends GameHistoryTabCreateArgs>(
      args: SelectSubset<T, GameHistoryTabCreateArgs>
    ): Prisma__GameHistoryTabClient<GameHistoryTabGetPayload<T>>

    /**
     * Create many GameHistoryTabs.
     *     @param {GameHistoryTabCreateManyArgs} args - Arguments to create many GameHistoryTabs.
     *     @example
     *     // Create many GameHistoryTabs
     *     const gameHistoryTab = await prisma.gameHistoryTab.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GameHistoryTabCreateManyArgs>(
      args?: SelectSubset<T, GameHistoryTabCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GameHistoryTab.
     * @param {GameHistoryTabDeleteArgs} args - Arguments to delete one GameHistoryTab.
     * @example
     * // Delete one GameHistoryTab
     * const GameHistoryTab = await prisma.gameHistoryTab.delete({
     *   where: {
     *     // ... filter to delete one GameHistoryTab
     *   }
     * })
     * 
    **/
    delete<T extends GameHistoryTabDeleteArgs>(
      args: SelectSubset<T, GameHistoryTabDeleteArgs>
    ): Prisma__GameHistoryTabClient<GameHistoryTabGetPayload<T>>

    /**
     * Update one GameHistoryTab.
     * @param {GameHistoryTabUpdateArgs} args - Arguments to update one GameHistoryTab.
     * @example
     * // Update one GameHistoryTab
     * const gameHistoryTab = await prisma.gameHistoryTab.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GameHistoryTabUpdateArgs>(
      args: SelectSubset<T, GameHistoryTabUpdateArgs>
    ): Prisma__GameHistoryTabClient<GameHistoryTabGetPayload<T>>

    /**
     * Delete zero or more GameHistoryTabs.
     * @param {GameHistoryTabDeleteManyArgs} args - Arguments to filter GameHistoryTabs to delete.
     * @example
     * // Delete a few GameHistoryTabs
     * const { count } = await prisma.gameHistoryTab.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GameHistoryTabDeleteManyArgs>(
      args?: SelectSubset<T, GameHistoryTabDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameHistoryTabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHistoryTabUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameHistoryTabs
     * const gameHistoryTab = await prisma.gameHistoryTab.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GameHistoryTabUpdateManyArgs>(
      args: SelectSubset<T, GameHistoryTabUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GameHistoryTab.
     * @param {GameHistoryTabUpsertArgs} args - Arguments to update or create a GameHistoryTab.
     * @example
     * // Update or create a GameHistoryTab
     * const gameHistoryTab = await prisma.gameHistoryTab.upsert({
     *   create: {
     *     // ... data to create a GameHistoryTab
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameHistoryTab we want to update
     *   }
     * })
    **/
    upsert<T extends GameHistoryTabUpsertArgs>(
      args: SelectSubset<T, GameHistoryTabUpsertArgs>
    ): Prisma__GameHistoryTabClient<GameHistoryTabGetPayload<T>>

    /**
     * Count the number of GameHistoryTabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHistoryTabCountArgs} args - Arguments to filter GameHistoryTabs to count.
     * @example
     * // Count the number of GameHistoryTabs
     * const count = await prisma.gameHistoryTab.count({
     *   where: {
     *     // ... the filter for the GameHistoryTabs we want to count
     *   }
     * })
    **/
    count<T extends GameHistoryTabCountArgs>(
      args?: Subset<T, GameHistoryTabCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameHistoryTabCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameHistoryTab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHistoryTabAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameHistoryTabAggregateArgs>(args: Subset<T, GameHistoryTabAggregateArgs>): Prisma.PrismaPromise<GetGameHistoryTabAggregateType<T>>

    /**
     * Group by GameHistoryTab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHistoryTabGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameHistoryTabGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameHistoryTabGroupByArgs['orderBy'] }
        : { orderBy?: GameHistoryTabGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameHistoryTabGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameHistoryTabGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for GameHistoryTab.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GameHistoryTabClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    game<T extends GameArgs= {}>(args?: Subset<T, GameArgs>): Prisma__GameClient<GameGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * GameHistoryTab base type for findUnique actions
   */
  export type GameHistoryTabFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the GameHistoryTab
     */
    select?: GameHistoryTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameHistoryTabInclude | null
    /**
     * Filter, which GameHistoryTab to fetch.
     */
    where: GameHistoryTabWhereUniqueInput
  }

  /**
   * GameHistoryTab findUnique
   */
  export interface GameHistoryTabFindUniqueArgs extends GameHistoryTabFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GameHistoryTab findUniqueOrThrow
   */
  export type GameHistoryTabFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the GameHistoryTab
     */
    select?: GameHistoryTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameHistoryTabInclude | null
    /**
     * Filter, which GameHistoryTab to fetch.
     */
    where: GameHistoryTabWhereUniqueInput
  }


  /**
   * GameHistoryTab base type for findFirst actions
   */
  export type GameHistoryTabFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the GameHistoryTab
     */
    select?: GameHistoryTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameHistoryTabInclude | null
    /**
     * Filter, which GameHistoryTab to fetch.
     */
    where?: GameHistoryTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHistoryTabs to fetch.
     */
    orderBy?: Enumerable<GameHistoryTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameHistoryTabs.
     */
    cursor?: GameHistoryTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHistoryTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHistoryTabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameHistoryTabs.
     */
    distinct?: Enumerable<GameHistoryTabScalarFieldEnum>
  }

  /**
   * GameHistoryTab findFirst
   */
  export interface GameHistoryTabFindFirstArgs extends GameHistoryTabFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GameHistoryTab findFirstOrThrow
   */
  export type GameHistoryTabFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the GameHistoryTab
     */
    select?: GameHistoryTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameHistoryTabInclude | null
    /**
     * Filter, which GameHistoryTab to fetch.
     */
    where?: GameHistoryTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHistoryTabs to fetch.
     */
    orderBy?: Enumerable<GameHistoryTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameHistoryTabs.
     */
    cursor?: GameHistoryTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHistoryTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHistoryTabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameHistoryTabs.
     */
    distinct?: Enumerable<GameHistoryTabScalarFieldEnum>
  }


  /**
   * GameHistoryTab findMany
   */
  export type GameHistoryTabFindManyArgs = {
    /**
     * Select specific fields to fetch from the GameHistoryTab
     */
    select?: GameHistoryTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameHistoryTabInclude | null
    /**
     * Filter, which GameHistoryTabs to fetch.
     */
    where?: GameHistoryTabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHistoryTabs to fetch.
     */
    orderBy?: Enumerable<GameHistoryTabOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameHistoryTabs.
     */
    cursor?: GameHistoryTabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHistoryTabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHistoryTabs.
     */
    skip?: number
    distinct?: Enumerable<GameHistoryTabScalarFieldEnum>
  }


  /**
   * GameHistoryTab create
   */
  export type GameHistoryTabCreateArgs = {
    /**
     * Select specific fields to fetch from the GameHistoryTab
     */
    select?: GameHistoryTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameHistoryTabInclude | null
    /**
     * The data needed to create a GameHistoryTab.
     */
    data: XOR<GameHistoryTabCreateInput, GameHistoryTabUncheckedCreateInput>
  }


  /**
   * GameHistoryTab createMany
   */
  export type GameHistoryTabCreateManyArgs = {
    /**
     * The data used to create many GameHistoryTabs.
     */
    data: Enumerable<GameHistoryTabCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GameHistoryTab update
   */
  export type GameHistoryTabUpdateArgs = {
    /**
     * Select specific fields to fetch from the GameHistoryTab
     */
    select?: GameHistoryTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameHistoryTabInclude | null
    /**
     * The data needed to update a GameHistoryTab.
     */
    data: XOR<GameHistoryTabUpdateInput, GameHistoryTabUncheckedUpdateInput>
    /**
     * Choose, which GameHistoryTab to update.
     */
    where: GameHistoryTabWhereUniqueInput
  }


  /**
   * GameHistoryTab updateMany
   */
  export type GameHistoryTabUpdateManyArgs = {
    /**
     * The data used to update GameHistoryTabs.
     */
    data: XOR<GameHistoryTabUpdateManyMutationInput, GameHistoryTabUncheckedUpdateManyInput>
    /**
     * Filter which GameHistoryTabs to update
     */
    where?: GameHistoryTabWhereInput
  }


  /**
   * GameHistoryTab upsert
   */
  export type GameHistoryTabUpsertArgs = {
    /**
     * Select specific fields to fetch from the GameHistoryTab
     */
    select?: GameHistoryTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameHistoryTabInclude | null
    /**
     * The filter to search for the GameHistoryTab to update in case it exists.
     */
    where: GameHistoryTabWhereUniqueInput
    /**
     * In case the GameHistoryTab found by the `where` argument doesn't exist, create a new GameHistoryTab with this data.
     */
    create: XOR<GameHistoryTabCreateInput, GameHistoryTabUncheckedCreateInput>
    /**
     * In case the GameHistoryTab was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameHistoryTabUpdateInput, GameHistoryTabUncheckedUpdateInput>
  }


  /**
   * GameHistoryTab delete
   */
  export type GameHistoryTabDeleteArgs = {
    /**
     * Select specific fields to fetch from the GameHistoryTab
     */
    select?: GameHistoryTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameHistoryTabInclude | null
    /**
     * Filter which GameHistoryTab to delete.
     */
    where: GameHistoryTabWhereUniqueInput
  }


  /**
   * GameHistoryTab deleteMany
   */
  export type GameHistoryTabDeleteManyArgs = {
    /**
     * Filter which GameHistoryTabs to delete
     */
    where?: GameHistoryTabWhereInput
  }


  /**
   * GameHistoryTab without action
   */
  export type GameHistoryTabArgs = {
    /**
     * Select specific fields to fetch from the GameHistoryTab
     */
    select?: GameHistoryTabSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameHistoryTabInclude | null
  }



  /**
   * Enums
   */

  export const AchievementsAssignementScalarFieldEnum: {
    achievement_id: 'achievement_id',
    player_id: 'player_id'
  };

  export type AchievementsAssignementScalarFieldEnum = (typeof AchievementsAssignementScalarFieldEnum)[keyof typeof AchievementsAssignementScalarFieldEnum]


  export const AchievementsScalarFieldEnum: {
    achievement_id: 'achievement_id',
    name: 'name',
    description: 'description',
    image: 'image'
  };

  export type AchievementsScalarFieldEnum = (typeof AchievementsScalarFieldEnum)[keyof typeof AchievementsScalarFieldEnum]


  export const AdminMembersScalarFieldEnum: {
    channel_id: 'channel_id',
    admin_id: 'admin_id'
  };

  export type AdminMembersScalarFieldEnum = (typeof AdminMembersScalarFieldEnum)[keyof typeof AdminMembersScalarFieldEnum]


  export const BannedMembersScalarFieldEnum: {
    channel_id: 'channel_id',
    banned_id: 'banned_id',
    status: 'status',
    status_end_time: 'status_end_time'
  };

  export type BannedMembersScalarFieldEnum = (typeof BannedMembersScalarFieldEnum)[keyof typeof BannedMembersScalarFieldEnum]


  export const BlockTabScalarFieldEnum: {
    user_id: 'user_id',
    blockedUser_id: 'blockedUser_id',
    uuid: 'uuid'
  };

  export type BlockTabScalarFieldEnum = (typeof BlockTabScalarFieldEnum)[keyof typeof BlockTabScalarFieldEnum]


  export const ChannelScalarFieldEnum: {
    id: 'id',
    name: 'name',
    dateCreated: 'dateCreated',
    chann_type: 'chann_type',
    owner_id: 'owner_id',
    password: 'password',
    limit_members: 'limit_members'
  };

  export type ChannelScalarFieldEnum = (typeof ChannelScalarFieldEnum)[keyof typeof ChannelScalarFieldEnum]


  export const ChannelsJoinTabScalarFieldEnum: {
    user_id: 'user_id',
    channel_id: 'channel_id',
    channel_name: 'channel_name',
    role: 'role'
  };

  export type ChannelsJoinTabScalarFieldEnum = (typeof ChannelsJoinTabScalarFieldEnum)[keyof typeof ChannelsJoinTabScalarFieldEnum]


  export const FriendsTabScalarFieldEnum: {
    user_id: 'user_id',
    friendUser_id: 'friendUser_id'
  };

  export type FriendsTabScalarFieldEnum = (typeof FriendsTabScalarFieldEnum)[keyof typeof FriendsTabScalarFieldEnum]


  export const FriendshipInvitesScalarFieldEnum: {
    sender_id: 'sender_id',
    receiver_id: 'receiver_id',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type FriendshipInvitesScalarFieldEnum = (typeof FriendshipInvitesScalarFieldEnum)[keyof typeof FriendshipInvitesScalarFieldEnum]


  export const GameHistoryTabScalarFieldEnum: {
    game_id: 'game_id',
    user_id: 'user_id'
  };

  export type GameHistoryTabScalarFieldEnum = (typeof GameHistoryTabScalarFieldEnum)[keyof typeof GameHistoryTabScalarFieldEnum]


  export const GameInvitesScalarFieldEnum: {
    sender_id: 'sender_id',
    receiver_id: 'receiver_id',
    status: 'status',
    validUntil: 'validUntil'
  };

  export type GameInvitesScalarFieldEnum = (typeof GameInvitesScalarFieldEnum)[keyof typeof GameInvitesScalarFieldEnum]


  export const GameScalarFieldEnum: {
    id: 'id',
    dateCreated: 'dateCreated',
    gameStatus: 'gameStatus',
    player1_id: 'player1_id',
    player2_id: 'player2_id',
    player1_pts: 'player1_pts',
    player2_pts: 'player2_pts'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const KickedMembersScalarFieldEnum: {
    channel_id: 'channel_id',
    kicked_id: 'kicked_id'
  };

  export type KickedMembersScalarFieldEnum = (typeof KickedMembersScalarFieldEnum)[keyof typeof KickedMembersScalarFieldEnum]


  export const MembersTabScalarFieldEnum: {
    channel_id: 'channel_id',
    member_id: 'member_id'
  };

  export type MembersTabScalarFieldEnum = (typeof MembersTabScalarFieldEnum)[keyof typeof MembersTabScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    dateCreated: 'dateCreated',
    sender_id: 'sender_id',
    receiver_id: 'receiver_id',
    content: 'content',
    seen: 'seen'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const MutedMembersScalarFieldEnum: {
    channel_id: 'channel_id',
    muted_id: 'muted_id',
    status: 'status',
    status_end_time: 'status_end_time'
  };

  export type MutedMembersScalarFieldEnum = (typeof MutedMembersScalarFieldEnum)[keyof typeof MutedMembersScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    notification_id: 'notification_id',
    user_id: 'user_id'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const PrivateChatRoomScalarFieldEnum: {
    id: 'id',
    sender_id: 'sender_id',
    receiver_id: 'receiver_id',
    lastUpdatedTime: 'lastUpdatedTime',
    blocked: 'blocked'
  };

  export type PrivateChatRoomScalarFieldEnum = (typeof PrivateChatRoomScalarFieldEnum)[keyof typeof PrivateChatRoomScalarFieldEnum]


  export const PrivateMessageScalarFieldEnum: {
    id: 'id',
    dateCreated: 'dateCreated',
    content: 'content',
    seen: 'seen',
    chatRoom_id: 'chatRoom_id',
    sender_id: 'sender_id',
    receiver_id: 'receiver_id'
  };

  export type PrivateMessageScalarFieldEnum = (typeof PrivateMessageScalarFieldEnum)[keyof typeof PrivateMessageScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RankingDataScalarFieldEnum: {
    user_id: 'user_id',
    games: 'games',
    wins: 'wins',
    loses: 'loses',
    draws: 'draws',
    xp: 'xp',
    winning_streak: 'winning_streak',
    losing_streak: 'losing_streak',
    points: 'points',
    rank: 'rank'
  };

  export type RankingDataScalarFieldEnum = (typeof RankingDataScalarFieldEnum)[keyof typeof RankingDataScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    login: 'login',
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    dateJoined: 'dateJoined',
    updated: 'updated',
    avatar: 'avatar',
    status: 'status',
    tfa: 'tfa',
    otp_verified: 'otp_verified',
    otp_base32: 'otp_base32',
    realStatus: 'realStatus'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    login?: StringFilter | string
    email?: StringFilter | string
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    dateJoined?: DateTimeFilter | Date | string
    updated?: DateTimeFilter | Date | string
    avatar?: StringFilter | string
    status?: EnumStatusFilter | Status
    tfa?: BoolFilter | boolean
    otp_verified?: BoolFilter | boolean
    otp_base32?: StringNullableFilter | string | null
    realStatus?: BoolFilter | boolean
    friends?: FriendsTabListRelationFilter
    blockedUsers?: BlockTabListRelationFilter
    channelsJoined?: ChannelsJoinTabListRelationFilter
    gameHistory?: GameHistoryTabListRelationFilter
    rankingData?: RankingDataListRelationFilter
    notification?: NotificationListRelationFilter
    frendshipInvites?: FriendshipInvitesListRelationFilter
    gameInvites?: GameInvitesListRelationFilter
    MsgSender?: PrivateMessageListRelationFilter
    MsgReceiver?: PrivateMessageListRelationFilter
    privateChatRoomSender?: PrivateChatRoomListRelationFilter
    privateChatRoomReceiver?: PrivateChatRoomListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    login?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateJoined?: SortOrder
    updated?: SortOrder
    avatar?: SortOrder
    status?: SortOrder
    tfa?: SortOrder
    otp_verified?: SortOrder
    otp_base32?: SortOrder
    realStatus?: SortOrder
    friends?: FriendsTabOrderByRelationAggregateInput
    blockedUsers?: BlockTabOrderByRelationAggregateInput
    channelsJoined?: ChannelsJoinTabOrderByRelationAggregateInput
    gameHistory?: GameHistoryTabOrderByRelationAggregateInput
    rankingData?: RankingDataOrderByRelationAggregateInput
    notification?: NotificationOrderByRelationAggregateInput
    frendshipInvites?: FriendshipInvitesOrderByRelationAggregateInput
    gameInvites?: GameInvitesOrderByRelationAggregateInput
    MsgSender?: PrivateMessageOrderByRelationAggregateInput
    MsgReceiver?: PrivateMessageOrderByRelationAggregateInput
    privateChatRoomSender?: PrivateChatRoomOrderByRelationAggregateInput
    privateChatRoomReceiver?: PrivateChatRoomOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    login?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    login?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateJoined?: SortOrder
    updated?: SortOrder
    avatar?: SortOrder
    status?: SortOrder
    tfa?: SortOrder
    otp_verified?: SortOrder
    otp_base32?: SortOrder
    realStatus?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    login?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    dateJoined?: DateTimeWithAggregatesFilter | Date | string
    updated?: DateTimeWithAggregatesFilter | Date | string
    avatar?: StringWithAggregatesFilter | string
    status?: EnumStatusWithAggregatesFilter | Status
    tfa?: BoolWithAggregatesFilter | boolean
    otp_verified?: BoolWithAggregatesFilter | boolean
    otp_base32?: StringNullableWithAggregatesFilter | string | null
    realStatus?: BoolWithAggregatesFilter | boolean
  }

  export type FriendshipInvitesWhereInput = {
    AND?: Enumerable<FriendshipInvitesWhereInput>
    OR?: Enumerable<FriendshipInvitesWhereInput>
    NOT?: Enumerable<FriendshipInvitesWhereInput>
    sender_id?: StringFilter | string
    receiver_id?: StringFilter | string
    status?: EnumInviteStatusFilter | InviteStatus
    createdAt?: DateTimeFilter | Date | string
    sender?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FriendshipInvitesOrderByWithRelationInput = {
    sender_id?: SortOrder
    receiver_id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    sender?: UserOrderByWithRelationInput
  }

  export type FriendshipInvitesWhereUniqueInput = {
    sender_id_receiver_id?: FriendshipInvitesSender_idReceiver_idCompoundUniqueInput
  }

  export type FriendshipInvitesOrderByWithAggregationInput = {
    sender_id?: SortOrder
    receiver_id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: FriendshipInvitesCountOrderByAggregateInput
    _max?: FriendshipInvitesMaxOrderByAggregateInput
    _min?: FriendshipInvitesMinOrderByAggregateInput
  }

  export type FriendshipInvitesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FriendshipInvitesScalarWhereWithAggregatesInput>
    OR?: Enumerable<FriendshipInvitesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FriendshipInvitesScalarWhereWithAggregatesInput>
    sender_id?: StringWithAggregatesFilter | string
    receiver_id?: StringWithAggregatesFilter | string
    status?: EnumInviteStatusWithAggregatesFilter | InviteStatus
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FriendsTabWhereInput = {
    AND?: Enumerable<FriendsTabWhereInput>
    OR?: Enumerable<FriendsTabWhereInput>
    NOT?: Enumerable<FriendsTabWhereInput>
    user_id?: StringFilter | string
    friendUser_id?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FriendsTabOrderByWithRelationInput = {
    user_id?: SortOrder
    friendUser_id?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type FriendsTabWhereUniqueInput = {
    user_id_friendUser_id?: FriendsTabUser_idFriendUser_idCompoundUniqueInput
  }

  export type FriendsTabOrderByWithAggregationInput = {
    user_id?: SortOrder
    friendUser_id?: SortOrder
    _count?: FriendsTabCountOrderByAggregateInput
    _max?: FriendsTabMaxOrderByAggregateInput
    _min?: FriendsTabMinOrderByAggregateInput
  }

  export type FriendsTabScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FriendsTabScalarWhereWithAggregatesInput>
    OR?: Enumerable<FriendsTabScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FriendsTabScalarWhereWithAggregatesInput>
    user_id?: StringWithAggregatesFilter | string
    friendUser_id?: StringWithAggregatesFilter | string
  }

  export type PrivateMessageWhereInput = {
    AND?: Enumerable<PrivateMessageWhereInput>
    OR?: Enumerable<PrivateMessageWhereInput>
    NOT?: Enumerable<PrivateMessageWhereInput>
    id?: StringFilter | string
    dateCreated?: DateTimeFilter | Date | string
    content?: StringFilter | string
    seen?: BoolFilter | boolean
    chatRoom_id?: StringFilter | string
    sender_id?: StringFilter | string
    receiver_id?: StringFilter | string
    sender?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
    chatRoom?: XOR<PrivateChatRoomRelationFilter, PrivateChatRoomWhereInput>
  }

  export type PrivateMessageOrderByWithRelationInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    content?: SortOrder
    seen?: SortOrder
    chatRoom_id?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
    sender?: UserOrderByWithRelationInput
    receiver?: UserOrderByWithRelationInput
    chatRoom?: PrivateChatRoomOrderByWithRelationInput
  }

  export type PrivateMessageWhereUniqueInput = {
    id?: string
  }

  export type PrivateMessageOrderByWithAggregationInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    content?: SortOrder
    seen?: SortOrder
    chatRoom_id?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
    _count?: PrivateMessageCountOrderByAggregateInput
    _max?: PrivateMessageMaxOrderByAggregateInput
    _min?: PrivateMessageMinOrderByAggregateInput
  }

  export type PrivateMessageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PrivateMessageScalarWhereWithAggregatesInput>
    OR?: Enumerable<PrivateMessageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PrivateMessageScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    dateCreated?: DateTimeWithAggregatesFilter | Date | string
    content?: StringWithAggregatesFilter | string
    seen?: BoolWithAggregatesFilter | boolean
    chatRoom_id?: StringWithAggregatesFilter | string
    sender_id?: StringWithAggregatesFilter | string
    receiver_id?: StringWithAggregatesFilter | string
  }

  export type PrivateChatRoomWhereInput = {
    AND?: Enumerable<PrivateChatRoomWhereInput>
    OR?: Enumerable<PrivateChatRoomWhereInput>
    NOT?: Enumerable<PrivateChatRoomWhereInput>
    id?: StringFilter | string
    sender_id?: StringFilter | string
    receiver_id?: StringFilter | string
    lastUpdatedTime?: DateTimeFilter | Date | string
    blocked?: BoolFilter | boolean
    messages?: PrivateMessageListRelationFilter
    sender?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PrivateChatRoomOrderByWithRelationInput = {
    id?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
    lastUpdatedTime?: SortOrder
    blocked?: SortOrder
    messages?: PrivateMessageOrderByRelationAggregateInput
    sender?: UserOrderByWithRelationInput
    receiver?: UserOrderByWithRelationInput
  }

  export type PrivateChatRoomWhereUniqueInput = {
    id?: string
  }

  export type PrivateChatRoomOrderByWithAggregationInput = {
    id?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
    lastUpdatedTime?: SortOrder
    blocked?: SortOrder
    _count?: PrivateChatRoomCountOrderByAggregateInput
    _max?: PrivateChatRoomMaxOrderByAggregateInput
    _min?: PrivateChatRoomMinOrderByAggregateInput
  }

  export type PrivateChatRoomScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PrivateChatRoomScalarWhereWithAggregatesInput>
    OR?: Enumerable<PrivateChatRoomScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PrivateChatRoomScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    sender_id?: StringWithAggregatesFilter | string
    receiver_id?: StringWithAggregatesFilter | string
    lastUpdatedTime?: DateTimeWithAggregatesFilter | Date | string
    blocked?: BoolWithAggregatesFilter | boolean
  }

  export type BlockTabWhereInput = {
    AND?: Enumerable<BlockTabWhereInput>
    OR?: Enumerable<BlockTabWhereInput>
    NOT?: Enumerable<BlockTabWhereInput>
    user_id?: StringFilter | string
    blockedUser_id?: StringFilter | string
    uuid?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type BlockTabOrderByWithRelationInput = {
    user_id?: SortOrder
    blockedUser_id?: SortOrder
    uuid?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type BlockTabWhereUniqueInput = {
    uuid?: string
  }

  export type BlockTabOrderByWithAggregationInput = {
    user_id?: SortOrder
    blockedUser_id?: SortOrder
    uuid?: SortOrder
    _count?: BlockTabCountOrderByAggregateInput
    _max?: BlockTabMaxOrderByAggregateInput
    _min?: BlockTabMinOrderByAggregateInput
  }

  export type BlockTabScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BlockTabScalarWhereWithAggregatesInput>
    OR?: Enumerable<BlockTabScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BlockTabScalarWhereWithAggregatesInput>
    user_id?: StringWithAggregatesFilter | string
    blockedUser_id?: StringWithAggregatesFilter | string
    uuid?: StringWithAggregatesFilter | string
  }

  export type ChannelsJoinTabWhereInput = {
    AND?: Enumerable<ChannelsJoinTabWhereInput>
    OR?: Enumerable<ChannelsJoinTabWhereInput>
    NOT?: Enumerable<ChannelsJoinTabWhereInput>
    user_id?: StringFilter | string
    channel_id?: StringFilter | string
    channel_name?: StringFilter | string
    role?: EnumChanRolesFilter | ChanRoles
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ChannelsJoinTabOrderByWithRelationInput = {
    user_id?: SortOrder
    channel_id?: SortOrder
    channel_name?: SortOrder
    role?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ChannelsJoinTabWhereUniqueInput = {
    user_id_channel_id?: ChannelsJoinTabUser_idChannel_idCompoundUniqueInput
  }

  export type ChannelsJoinTabOrderByWithAggregationInput = {
    user_id?: SortOrder
    channel_id?: SortOrder
    channel_name?: SortOrder
    role?: SortOrder
    _count?: ChannelsJoinTabCountOrderByAggregateInput
    _max?: ChannelsJoinTabMaxOrderByAggregateInput
    _min?: ChannelsJoinTabMinOrderByAggregateInput
  }

  export type ChannelsJoinTabScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChannelsJoinTabScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChannelsJoinTabScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChannelsJoinTabScalarWhereWithAggregatesInput>
    user_id?: StringWithAggregatesFilter | string
    channel_id?: StringWithAggregatesFilter | string
    channel_name?: StringWithAggregatesFilter | string
    role?: EnumChanRolesWithAggregatesFilter | ChanRoles
  }

  export type ChannelWhereInput = {
    AND?: Enumerable<ChannelWhereInput>
    OR?: Enumerable<ChannelWhereInput>
    NOT?: Enumerable<ChannelWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    dateCreated?: DateTimeFilter | Date | string
    chann_type?: EnumChanTypeFilter | ChanType
    owner_id?: StringFilter | string
    password?: StringNullableFilter | string | null
    limit_members?: IntFilter | number
    members?: MembersTabListRelationFilter
    messages?: MessageListRelationFilter
    bannedUsers?: BannedMembersListRelationFilter
    adminstrators?: AdminMembersListRelationFilter
    mutedMembers?: MutedMembersListRelationFilter
    kickedMembers?: KickedMembersListRelationFilter
  }

  export type ChannelOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    dateCreated?: SortOrder
    chann_type?: SortOrder
    owner_id?: SortOrder
    password?: SortOrder
    limit_members?: SortOrder
    members?: MembersTabOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
    bannedUsers?: BannedMembersOrderByRelationAggregateInput
    adminstrators?: AdminMembersOrderByRelationAggregateInput
    mutedMembers?: MutedMembersOrderByRelationAggregateInput
    kickedMembers?: kickedMembersOrderByRelationAggregateInput
  }

  export type ChannelWhereUniqueInput = {
    id?: string
    name?: string
  }

  export type ChannelOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    dateCreated?: SortOrder
    chann_type?: SortOrder
    owner_id?: SortOrder
    password?: SortOrder
    limit_members?: SortOrder
    _count?: ChannelCountOrderByAggregateInput
    _avg?: ChannelAvgOrderByAggregateInput
    _max?: ChannelMaxOrderByAggregateInput
    _min?: ChannelMinOrderByAggregateInput
    _sum?: ChannelSumOrderByAggregateInput
  }

  export type ChannelScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChannelScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChannelScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChannelScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    dateCreated?: DateTimeWithAggregatesFilter | Date | string
    chann_type?: EnumChanTypeWithAggregatesFilter | ChanType
    owner_id?: StringWithAggregatesFilter | string
    password?: StringNullableWithAggregatesFilter | string | null
    limit_members?: IntWithAggregatesFilter | number
  }

  export type MembersTabWhereInput = {
    AND?: Enumerable<MembersTabWhereInput>
    OR?: Enumerable<MembersTabWhereInput>
    NOT?: Enumerable<MembersTabWhereInput>
    channel_id?: StringFilter | string
    member_id?: StringFilter | string
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
  }

  export type MembersTabOrderByWithRelationInput = {
    channel_id?: SortOrder
    member_id?: SortOrder
    channel?: ChannelOrderByWithRelationInput
  }

  export type MembersTabWhereUniqueInput = {
    channel_id_member_id?: MembersTabChannel_idMember_idCompoundUniqueInput
  }

  export type MembersTabOrderByWithAggregationInput = {
    channel_id?: SortOrder
    member_id?: SortOrder
    _count?: MembersTabCountOrderByAggregateInput
    _max?: MembersTabMaxOrderByAggregateInput
    _min?: MembersTabMinOrderByAggregateInput
  }

  export type MembersTabScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MembersTabScalarWhereWithAggregatesInput>
    OR?: Enumerable<MembersTabScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MembersTabScalarWhereWithAggregatesInput>
    channel_id?: StringWithAggregatesFilter | string
    member_id?: StringWithAggregatesFilter | string
  }

  export type BannedMembersWhereInput = {
    AND?: Enumerable<BannedMembersWhereInput>
    OR?: Enumerable<BannedMembersWhereInput>
    NOT?: Enumerable<BannedMembersWhereInput>
    channel_id?: StringFilter | string
    banned_id?: StringFilter | string
    status?: EnumMemeberStatusTimeNullableFilter | MemeberStatusTime | null
    status_end_time?: DateTimeNullableFilter | Date | string | null
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
  }

  export type BannedMembersOrderByWithRelationInput = {
    channel_id?: SortOrder
    banned_id?: SortOrder
    status?: SortOrder
    status_end_time?: SortOrder
    channel?: ChannelOrderByWithRelationInput
  }

  export type BannedMembersWhereUniqueInput = {
    channel_id_banned_id?: BannedMembersChannel_idBanned_idCompoundUniqueInput
  }

  export type BannedMembersOrderByWithAggregationInput = {
    channel_id?: SortOrder
    banned_id?: SortOrder
    status?: SortOrder
    status_end_time?: SortOrder
    _count?: BannedMembersCountOrderByAggregateInput
    _max?: BannedMembersMaxOrderByAggregateInput
    _min?: BannedMembersMinOrderByAggregateInput
  }

  export type BannedMembersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BannedMembersScalarWhereWithAggregatesInput>
    OR?: Enumerable<BannedMembersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BannedMembersScalarWhereWithAggregatesInput>
    channel_id?: StringWithAggregatesFilter | string
    banned_id?: StringWithAggregatesFilter | string
    status?: EnumMemeberStatusTimeNullableWithAggregatesFilter | MemeberStatusTime | null
    status_end_time?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type AdminMembersWhereInput = {
    AND?: Enumerable<AdminMembersWhereInput>
    OR?: Enumerable<AdminMembersWhereInput>
    NOT?: Enumerable<AdminMembersWhereInput>
    channel_id?: StringFilter | string
    admin_id?: StringFilter | string
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
  }

  export type AdminMembersOrderByWithRelationInput = {
    channel_id?: SortOrder
    admin_id?: SortOrder
    channel?: ChannelOrderByWithRelationInput
  }

  export type AdminMembersWhereUniqueInput = {
    channel_id_admin_id?: AdminMembersChannel_idAdmin_idCompoundUniqueInput
  }

  export type AdminMembersOrderByWithAggregationInput = {
    channel_id?: SortOrder
    admin_id?: SortOrder
    _count?: AdminMembersCountOrderByAggregateInput
    _max?: AdminMembersMaxOrderByAggregateInput
    _min?: AdminMembersMinOrderByAggregateInput
  }

  export type AdminMembersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AdminMembersScalarWhereWithAggregatesInput>
    OR?: Enumerable<AdminMembersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AdminMembersScalarWhereWithAggregatesInput>
    channel_id?: StringWithAggregatesFilter | string
    admin_id?: StringWithAggregatesFilter | string
  }

  export type kickedMembersWhereInput = {
    AND?: Enumerable<kickedMembersWhereInput>
    OR?: Enumerable<kickedMembersWhereInput>
    NOT?: Enumerable<kickedMembersWhereInput>
    channel_id?: StringFilter | string
    kicked_id?: StringFilter | string
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
  }

  export type kickedMembersOrderByWithRelationInput = {
    channel_id?: SortOrder
    kicked_id?: SortOrder
    channel?: ChannelOrderByWithRelationInput
  }

  export type kickedMembersWhereUniqueInput = {
    channel_id_kicked_id?: kickedMembersChannel_idKicked_idCompoundUniqueInput
  }

  export type kickedMembersOrderByWithAggregationInput = {
    channel_id?: SortOrder
    kicked_id?: SortOrder
    _count?: kickedMembersCountOrderByAggregateInput
    _max?: kickedMembersMaxOrderByAggregateInput
    _min?: kickedMembersMinOrderByAggregateInput
  }

  export type kickedMembersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<kickedMembersScalarWhereWithAggregatesInput>
    OR?: Enumerable<kickedMembersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<kickedMembersScalarWhereWithAggregatesInput>
    channel_id?: StringWithAggregatesFilter | string
    kicked_id?: StringWithAggregatesFilter | string
  }

  export type MutedMembersWhereInput = {
    AND?: Enumerable<MutedMembersWhereInput>
    OR?: Enumerable<MutedMembersWhereInput>
    NOT?: Enumerable<MutedMembersWhereInput>
    channel_id?: StringFilter | string
    muted_id?: StringFilter | string
    status?: EnumMemeberStatusTimeNullableFilter | MemeberStatusTime | null
    status_end_time?: DateTimeNullableFilter | Date | string | null
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
  }

  export type MutedMembersOrderByWithRelationInput = {
    channel_id?: SortOrder
    muted_id?: SortOrder
    status?: SortOrder
    status_end_time?: SortOrder
    channel?: ChannelOrderByWithRelationInput
  }

  export type MutedMembersWhereUniqueInput = {
    channel_id_muted_id?: MutedMembersChannel_idMuted_idCompoundUniqueInput
  }

  export type MutedMembersOrderByWithAggregationInput = {
    channel_id?: SortOrder
    muted_id?: SortOrder
    status?: SortOrder
    status_end_time?: SortOrder
    _count?: MutedMembersCountOrderByAggregateInput
    _max?: MutedMembersMaxOrderByAggregateInput
    _min?: MutedMembersMinOrderByAggregateInput
  }

  export type MutedMembersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MutedMembersScalarWhereWithAggregatesInput>
    OR?: Enumerable<MutedMembersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MutedMembersScalarWhereWithAggregatesInput>
    channel_id?: StringWithAggregatesFilter | string
    muted_id?: StringWithAggregatesFilter | string
    status?: EnumMemeberStatusTimeNullableWithAggregatesFilter | MemeberStatusTime | null
    status_end_time?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type MessageWhereInput = {
    AND?: Enumerable<MessageWhereInput>
    OR?: Enumerable<MessageWhereInput>
    NOT?: Enumerable<MessageWhereInput>
    id?: StringFilter | string
    dateCreated?: DateTimeFilter | Date | string
    sender_id?: StringFilter | string
    receiver_id?: StringFilter | string
    content?: StringFilter | string
    seen?: BoolFilter | boolean
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
    content?: SortOrder
    seen?: SortOrder
    channel?: ChannelOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = {
    id?: string
  }

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
    content?: SortOrder
    seen?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MessageScalarWhereWithAggregatesInput>
    OR?: Enumerable<MessageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MessageScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    dateCreated?: DateTimeWithAggregatesFilter | Date | string
    sender_id?: StringWithAggregatesFilter | string
    receiver_id?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
    seen?: BoolWithAggregatesFilter | boolean
  }

  export type NotificationWhereInput = {
    AND?: Enumerable<NotificationWhereInput>
    OR?: Enumerable<NotificationWhereInput>
    NOT?: Enumerable<NotificationWhereInput>
    notification_id?: StringFilter | string
    user_id?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    notification_id?: SortOrder
    user_id?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = {
    notification_id?: string
  }

  export type NotificationOrderByWithAggregationInput = {
    notification_id?: SortOrder
    user_id?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NotificationScalarWhereWithAggregatesInput>
    OR?: Enumerable<NotificationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NotificationScalarWhereWithAggregatesInput>
    notification_id?: StringWithAggregatesFilter | string
    user_id?: StringWithAggregatesFilter | string
  }

  export type GameWhereInput = {
    AND?: Enumerable<GameWhereInput>
    OR?: Enumerable<GameWhereInput>
    NOT?: Enumerable<GameWhereInput>
    id?: StringFilter | string
    dateCreated?: DateTimeFilter | Date | string
    gameStatus?: EnumGameStatusFilter | GameStatus
    player1_id?: StringFilter | string
    player2_id?: StringFilter | string
    player1_pts?: IntFilter | number
    player2_pts?: IntFilter | number
    gameHistory?: GameHistoryTabListRelationFilter
  }

  export type GameOrderByWithRelationInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    gameStatus?: SortOrder
    player1_id?: SortOrder
    player2_id?: SortOrder
    player1_pts?: SortOrder
    player2_pts?: SortOrder
    gameHistory?: GameHistoryTabOrderByRelationAggregateInput
  }

  export type GameWhereUniqueInput = {
    id?: string
  }

  export type GameOrderByWithAggregationInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    gameStatus?: SortOrder
    player1_id?: SortOrder
    player2_id?: SortOrder
    player1_pts?: SortOrder
    player2_pts?: SortOrder
    _count?: GameCountOrderByAggregateInput
    _avg?: GameAvgOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
    _sum?: GameSumOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GameScalarWhereWithAggregatesInput>
    OR?: Enumerable<GameScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GameScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    dateCreated?: DateTimeWithAggregatesFilter | Date | string
    gameStatus?: EnumGameStatusWithAggregatesFilter | GameStatus
    player1_id?: StringWithAggregatesFilter | string
    player2_id?: StringWithAggregatesFilter | string
    player1_pts?: IntWithAggregatesFilter | number
    player2_pts?: IntWithAggregatesFilter | number
  }

  export type GameInvitesWhereInput = {
    AND?: Enumerable<GameInvitesWhereInput>
    OR?: Enumerable<GameInvitesWhereInput>
    NOT?: Enumerable<GameInvitesWhereInput>
    sender_id?: StringFilter | string
    receiver_id?: StringFilter | string
    status?: EnumInviteStatusFilter | InviteStatus
    validUntil?: DateTimeFilter | Date | string
    sender?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type GameInvitesOrderByWithRelationInput = {
    sender_id?: SortOrder
    receiver_id?: SortOrder
    status?: SortOrder
    validUntil?: SortOrder
    sender?: UserOrderByWithRelationInput
  }

  export type GameInvitesWhereUniqueInput = {
    sender_id_receiver_id?: GameInvitesSender_idReceiver_idCompoundUniqueInput
  }

  export type GameInvitesOrderByWithAggregationInput = {
    sender_id?: SortOrder
    receiver_id?: SortOrder
    status?: SortOrder
    validUntil?: SortOrder
    _count?: GameInvitesCountOrderByAggregateInput
    _max?: GameInvitesMaxOrderByAggregateInput
    _min?: GameInvitesMinOrderByAggregateInput
  }

  export type GameInvitesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GameInvitesScalarWhereWithAggregatesInput>
    OR?: Enumerable<GameInvitesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GameInvitesScalarWhereWithAggregatesInput>
    sender_id?: StringWithAggregatesFilter | string
    receiver_id?: StringWithAggregatesFilter | string
    status?: EnumInviteStatusWithAggregatesFilter | InviteStatus
    validUntil?: DateTimeWithAggregatesFilter | Date | string
  }

  export type RankingDataWhereInput = {
    AND?: Enumerable<RankingDataWhereInput>
    OR?: Enumerable<RankingDataWhereInput>
    NOT?: Enumerable<RankingDataWhereInput>
    user_id?: StringFilter | string
    games?: IntFilter | number
    wins?: IntFilter | number
    loses?: IntFilter | number
    draws?: IntFilter | number
    xp?: FloatFilter | number
    winning_streak?: IntFilter | number
    losing_streak?: IntFilter | number
    points?: IntFilter | number
    rank?: EnumRankFilter | Rank
    user?: XOR<UserRelationFilter, UserWhereInput>
    achievements_assignement?: AchievementsAssignementListRelationFilter
  }

  export type RankingDataOrderByWithRelationInput = {
    user_id?: SortOrder
    games?: SortOrder
    wins?: SortOrder
    loses?: SortOrder
    draws?: SortOrder
    xp?: SortOrder
    winning_streak?: SortOrder
    losing_streak?: SortOrder
    points?: SortOrder
    rank?: SortOrder
    user?: UserOrderByWithRelationInput
    achievements_assignement?: AchievementsAssignementOrderByRelationAggregateInput
  }

  export type RankingDataWhereUniqueInput = {
    user_id?: string
  }

  export type RankingDataOrderByWithAggregationInput = {
    user_id?: SortOrder
    games?: SortOrder
    wins?: SortOrder
    loses?: SortOrder
    draws?: SortOrder
    xp?: SortOrder
    winning_streak?: SortOrder
    losing_streak?: SortOrder
    points?: SortOrder
    rank?: SortOrder
    _count?: RankingDataCountOrderByAggregateInput
    _avg?: RankingDataAvgOrderByAggregateInput
    _max?: RankingDataMaxOrderByAggregateInput
    _min?: RankingDataMinOrderByAggregateInput
    _sum?: RankingDataSumOrderByAggregateInput
  }

  export type RankingDataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RankingDataScalarWhereWithAggregatesInput>
    OR?: Enumerable<RankingDataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RankingDataScalarWhereWithAggregatesInput>
    user_id?: StringWithAggregatesFilter | string
    games?: IntWithAggregatesFilter | number
    wins?: IntWithAggregatesFilter | number
    loses?: IntWithAggregatesFilter | number
    draws?: IntWithAggregatesFilter | number
    xp?: FloatWithAggregatesFilter | number
    winning_streak?: IntWithAggregatesFilter | number
    losing_streak?: IntWithAggregatesFilter | number
    points?: IntWithAggregatesFilter | number
    rank?: EnumRankWithAggregatesFilter | Rank
  }

  export type AchievementsWhereInput = {
    AND?: Enumerable<AchievementsWhereInput>
    OR?: Enumerable<AchievementsWhereInput>
    NOT?: Enumerable<AchievementsWhereInput>
    achievement_id?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    image?: StringFilter | string
    achievements_assignement?: AchievementsAssignementListRelationFilter
  }

  export type AchievementsOrderByWithRelationInput = {
    achievement_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    achievements_assignement?: AchievementsAssignementOrderByRelationAggregateInput
  }

  export type AchievementsWhereUniqueInput = {
    achievement_id?: number
  }

  export type AchievementsOrderByWithAggregationInput = {
    achievement_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    _count?: AchievementsCountOrderByAggregateInput
    _avg?: AchievementsAvgOrderByAggregateInput
    _max?: AchievementsMaxOrderByAggregateInput
    _min?: AchievementsMinOrderByAggregateInput
    _sum?: AchievementsSumOrderByAggregateInput
  }

  export type AchievementsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AchievementsScalarWhereWithAggregatesInput>
    OR?: Enumerable<AchievementsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AchievementsScalarWhereWithAggregatesInput>
    achievement_id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
  }

  export type AchievementsAssignementWhereInput = {
    AND?: Enumerable<AchievementsAssignementWhereInput>
    OR?: Enumerable<AchievementsAssignementWhereInput>
    NOT?: Enumerable<AchievementsAssignementWhereInput>
    achievement_id?: IntFilter | number
    player_id?: StringFilter | string
    achievement?: XOR<AchievementsRelationFilter, AchievementsWhereInput>
    player?: XOR<RankingDataRelationFilter, RankingDataWhereInput>
  }

  export type AchievementsAssignementOrderByWithRelationInput = {
    achievement_id?: SortOrder
    player_id?: SortOrder
    achievement?: AchievementsOrderByWithRelationInput
    player?: RankingDataOrderByWithRelationInput
  }

  export type AchievementsAssignementWhereUniqueInput = {
    achievement_id_player_id?: AchievementsAssignementAchievement_idPlayer_idCompoundUniqueInput
  }

  export type AchievementsAssignementOrderByWithAggregationInput = {
    achievement_id?: SortOrder
    player_id?: SortOrder
    _count?: AchievementsAssignementCountOrderByAggregateInput
    _avg?: AchievementsAssignementAvgOrderByAggregateInput
    _max?: AchievementsAssignementMaxOrderByAggregateInput
    _min?: AchievementsAssignementMinOrderByAggregateInput
    _sum?: AchievementsAssignementSumOrderByAggregateInput
  }

  export type AchievementsAssignementScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AchievementsAssignementScalarWhereWithAggregatesInput>
    OR?: Enumerable<AchievementsAssignementScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AchievementsAssignementScalarWhereWithAggregatesInput>
    achievement_id?: IntWithAggregatesFilter | number
    player_id?: StringWithAggregatesFilter | string
  }

  export type GameHistoryTabWhereInput = {
    AND?: Enumerable<GameHistoryTabWhereInput>
    OR?: Enumerable<GameHistoryTabWhereInput>
    NOT?: Enumerable<GameHistoryTabWhereInput>
    game_id?: StringFilter | string
    user_id?: StringFilter | string
    game?: XOR<GameRelationFilter, GameWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type GameHistoryTabOrderByWithRelationInput = {
    game_id?: SortOrder
    user_id?: SortOrder
    game?: GameOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type GameHistoryTabWhereUniqueInput = {
    user_id?: string
  }

  export type GameHistoryTabOrderByWithAggregationInput = {
    game_id?: SortOrder
    user_id?: SortOrder
    _count?: GameHistoryTabCountOrderByAggregateInput
    _max?: GameHistoryTabMaxOrderByAggregateInput
    _min?: GameHistoryTabMinOrderByAggregateInput
  }

  export type GameHistoryTabScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GameHistoryTabScalarWhereWithAggregatesInput>
    OR?: Enumerable<GameHistoryTabScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GameHistoryTabScalarWhereWithAggregatesInput>
    game_id?: StringWithAggregatesFilter | string
    user_id?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabCreateNestedManyWithoutUserInput
    rankingData?: RankingDataCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabUncheckedCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabUncheckedCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabUncheckedCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabUncheckedCreateNestedManyWithoutUserInput
    rankingData?: RankingDataUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesUncheckedCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesUncheckedCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageUncheckedCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageUncheckedCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomUncheckedCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUncheckedUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUncheckedUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUncheckedUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUncheckedUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUncheckedUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUncheckedUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUncheckedUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUncheckedUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUncheckedUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipInvitesCreateInput = {
    receiver_id: string
    status?: InviteStatus
    createdAt?: Date | string
    sender: UserCreateNestedOneWithoutFrendshipInvitesInput
  }

  export type FriendshipInvitesUncheckedCreateInput = {
    sender_id: string
    receiver_id: string
    status?: InviteStatus
    createdAt?: Date | string
  }

  export type FriendshipInvitesUpdateInput = {
    receiver_id?: StringFieldUpdateOperationsInput | string
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutFrendshipInvitesNestedInput
  }

  export type FriendshipInvitesUncheckedUpdateInput = {
    sender_id?: StringFieldUpdateOperationsInput | string
    receiver_id?: StringFieldUpdateOperationsInput | string
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendshipInvitesCreateManyInput = {
    sender_id: string
    receiver_id: string
    status?: InviteStatus
    createdAt?: Date | string
  }

  export type FriendshipInvitesUpdateManyMutationInput = {
    receiver_id?: StringFieldUpdateOperationsInput | string
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendshipInvitesUncheckedUpdateManyInput = {
    sender_id?: StringFieldUpdateOperationsInput | string
    receiver_id?: StringFieldUpdateOperationsInput | string
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendsTabCreateInput = {
    friendUser_id: string
    user: UserCreateNestedOneWithoutFriendsInput
  }

  export type FriendsTabUncheckedCreateInput = {
    user_id: string
    friendUser_id: string
  }

  export type FriendsTabUpdateInput = {
    friendUser_id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutFriendsNestedInput
  }

  export type FriendsTabUncheckedUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    friendUser_id?: StringFieldUpdateOperationsInput | string
  }

  export type FriendsTabCreateManyInput = {
    user_id: string
    friendUser_id: string
  }

  export type FriendsTabUpdateManyMutationInput = {
    friendUser_id?: StringFieldUpdateOperationsInput | string
  }

  export type FriendsTabUncheckedUpdateManyInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    friendUser_id?: StringFieldUpdateOperationsInput | string
  }

  export type PrivateMessageCreateInput = {
    id?: string
    dateCreated?: Date | string
    content: string
    seen?: boolean
    sender: UserCreateNestedOneWithoutMsgSenderInput
    receiver: UserCreateNestedOneWithoutMsgReceiverInput
    chatRoom: PrivateChatRoomCreateNestedOneWithoutMessagesInput
  }

  export type PrivateMessageUncheckedCreateInput = {
    id?: string
    dateCreated?: Date | string
    content: string
    seen?: boolean
    chatRoom_id: string
    sender_id: string
    receiver_id: string
  }

  export type PrivateMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    sender?: UserUpdateOneRequiredWithoutMsgSenderNestedInput
    receiver?: UserUpdateOneRequiredWithoutMsgReceiverNestedInput
    chatRoom?: PrivateChatRoomUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type PrivateMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    chatRoom_id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    receiver_id?: StringFieldUpdateOperationsInput | string
  }

  export type PrivateMessageCreateManyInput = {
    id?: string
    dateCreated?: Date | string
    content: string
    seen?: boolean
    chatRoom_id: string
    sender_id: string
    receiver_id: string
  }

  export type PrivateMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PrivateMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    chatRoom_id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    receiver_id?: StringFieldUpdateOperationsInput | string
  }

  export type PrivateChatRoomCreateInput = {
    id: string
    lastUpdatedTime?: Date | string
    blocked?: boolean
    messages?: PrivateMessageCreateNestedManyWithoutChatRoomInput
    sender: UserCreateNestedOneWithoutPrivateChatRoomSenderInput
    receiver: UserCreateNestedOneWithoutPrivateChatRoomReceiverInput
  }

  export type PrivateChatRoomUncheckedCreateInput = {
    id: string
    sender_id: string
    receiver_id: string
    lastUpdatedTime?: Date | string
    blocked?: boolean
    messages?: PrivateMessageUncheckedCreateNestedManyWithoutChatRoomInput
  }

  export type PrivateChatRoomUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastUpdatedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    blocked?: BoolFieldUpdateOperationsInput | boolean
    messages?: PrivateMessageUpdateManyWithoutChatRoomNestedInput
    sender?: UserUpdateOneRequiredWithoutPrivateChatRoomSenderNestedInput
    receiver?: UserUpdateOneRequiredWithoutPrivateChatRoomReceiverNestedInput
  }

  export type PrivateChatRoomUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    receiver_id?: StringFieldUpdateOperationsInput | string
    lastUpdatedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    blocked?: BoolFieldUpdateOperationsInput | boolean
    messages?: PrivateMessageUncheckedUpdateManyWithoutChatRoomNestedInput
  }

  export type PrivateChatRoomCreateManyInput = {
    id: string
    sender_id: string
    receiver_id: string
    lastUpdatedTime?: Date | string
    blocked?: boolean
  }

  export type PrivateChatRoomUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastUpdatedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    blocked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PrivateChatRoomUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    receiver_id?: StringFieldUpdateOperationsInput | string
    lastUpdatedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    blocked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BlockTabCreateInput = {
    blockedUser_id: string
    uuid?: string
    user: UserCreateNestedOneWithoutBlockedUsersInput
  }

  export type BlockTabUncheckedCreateInput = {
    user_id: string
    blockedUser_id: string
    uuid?: string
  }

  export type BlockTabUpdateInput = {
    blockedUser_id?: StringFieldUpdateOperationsInput | string
    uuid?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutBlockedUsersNestedInput
  }

  export type BlockTabUncheckedUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    blockedUser_id?: StringFieldUpdateOperationsInput | string
    uuid?: StringFieldUpdateOperationsInput | string
  }

  export type BlockTabCreateManyInput = {
    user_id: string
    blockedUser_id: string
    uuid?: string
  }

  export type BlockTabUpdateManyMutationInput = {
    blockedUser_id?: StringFieldUpdateOperationsInput | string
    uuid?: StringFieldUpdateOperationsInput | string
  }

  export type BlockTabUncheckedUpdateManyInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    blockedUser_id?: StringFieldUpdateOperationsInput | string
    uuid?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelsJoinTabCreateInput = {
    channel_id: string
    channel_name: string
    role: ChanRoles
    user: UserCreateNestedOneWithoutChannelsJoinedInput
  }

  export type ChannelsJoinTabUncheckedCreateInput = {
    user_id: string
    channel_id: string
    channel_name: string
    role: ChanRoles
  }

  export type ChannelsJoinTabUpdateInput = {
    channel_id?: StringFieldUpdateOperationsInput | string
    channel_name?: StringFieldUpdateOperationsInput | string
    role?: EnumChanRolesFieldUpdateOperationsInput | ChanRoles
    user?: UserUpdateOneRequiredWithoutChannelsJoinedNestedInput
  }

  export type ChannelsJoinTabUncheckedUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    channel_id?: StringFieldUpdateOperationsInput | string
    channel_name?: StringFieldUpdateOperationsInput | string
    role?: EnumChanRolesFieldUpdateOperationsInput | ChanRoles
  }

  export type ChannelsJoinTabCreateManyInput = {
    user_id: string
    channel_id: string
    channel_name: string
    role: ChanRoles
  }

  export type ChannelsJoinTabUpdateManyMutationInput = {
    channel_id?: StringFieldUpdateOperationsInput | string
    channel_name?: StringFieldUpdateOperationsInput | string
    role?: EnumChanRolesFieldUpdateOperationsInput | ChanRoles
  }

  export type ChannelsJoinTabUncheckedUpdateManyInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    channel_id?: StringFieldUpdateOperationsInput | string
    channel_name?: StringFieldUpdateOperationsInput | string
    role?: EnumChanRolesFieldUpdateOperationsInput | ChanRoles
  }

  export type ChannelCreateInput = {
    id?: string
    name: string
    dateCreated?: Date | string
    chann_type: ChanType
    owner_id: string
    password?: string | null
    limit_members: number
    members?: MembersTabCreateNestedManyWithoutChannelInput
    messages?: MessageCreateNestedManyWithoutChannelInput
    bannedUsers?: BannedMembersCreateNestedManyWithoutChannelInput
    adminstrators?: AdminMembersCreateNestedManyWithoutChannelInput
    mutedMembers?: MutedMembersCreateNestedManyWithoutChannelInput
    kickedMembers?: kickedMembersCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateInput = {
    id?: string
    name: string
    dateCreated?: Date | string
    chann_type: ChanType
    owner_id: string
    password?: string | null
    limit_members: number
    members?: MembersTabUncheckedCreateNestedManyWithoutChannelInput
    messages?: MessageUncheckedCreateNestedManyWithoutChannelInput
    bannedUsers?: BannedMembersUncheckedCreateNestedManyWithoutChannelInput
    adminstrators?: AdminMembersUncheckedCreateNestedManyWithoutChannelInput
    mutedMembers?: MutedMembersUncheckedCreateNestedManyWithoutChannelInput
    kickedMembers?: kickedMembersUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    chann_type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    owner_id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    limit_members?: IntFieldUpdateOperationsInput | number
    members?: MembersTabUpdateManyWithoutChannelNestedInput
    messages?: MessageUpdateManyWithoutChannelNestedInput
    bannedUsers?: BannedMembersUpdateManyWithoutChannelNestedInput
    adminstrators?: AdminMembersUpdateManyWithoutChannelNestedInput
    mutedMembers?: MutedMembersUpdateManyWithoutChannelNestedInput
    kickedMembers?: kickedMembersUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    chann_type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    owner_id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    limit_members?: IntFieldUpdateOperationsInput | number
    members?: MembersTabUncheckedUpdateManyWithoutChannelNestedInput
    messages?: MessageUncheckedUpdateManyWithoutChannelNestedInput
    bannedUsers?: BannedMembersUncheckedUpdateManyWithoutChannelNestedInput
    adminstrators?: AdminMembersUncheckedUpdateManyWithoutChannelNestedInput
    mutedMembers?: MutedMembersUncheckedUpdateManyWithoutChannelNestedInput
    kickedMembers?: kickedMembersUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type ChannelCreateManyInput = {
    id?: string
    name: string
    dateCreated?: Date | string
    chann_type: ChanType
    owner_id: string
    password?: string | null
    limit_members: number
  }

  export type ChannelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    chann_type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    owner_id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    limit_members?: IntFieldUpdateOperationsInput | number
  }

  export type ChannelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    chann_type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    owner_id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    limit_members?: IntFieldUpdateOperationsInput | number
  }

  export type MembersTabCreateInput = {
    member_id: string
    channel: ChannelCreateNestedOneWithoutMembersInput
  }

  export type MembersTabUncheckedCreateInput = {
    channel_id: string
    member_id: string
  }

  export type MembersTabUpdateInput = {
    member_id?: StringFieldUpdateOperationsInput | string
    channel?: ChannelUpdateOneRequiredWithoutMembersNestedInput
  }

  export type MembersTabUncheckedUpdateInput = {
    channel_id?: StringFieldUpdateOperationsInput | string
    member_id?: StringFieldUpdateOperationsInput | string
  }

  export type MembersTabCreateManyInput = {
    channel_id: string
    member_id: string
  }

  export type MembersTabUpdateManyMutationInput = {
    member_id?: StringFieldUpdateOperationsInput | string
  }

  export type MembersTabUncheckedUpdateManyInput = {
    channel_id?: StringFieldUpdateOperationsInput | string
    member_id?: StringFieldUpdateOperationsInput | string
  }

  export type BannedMembersCreateInput = {
    banned_id: string
    status?: MemeberStatusTime | null
    status_end_time?: Date | string | null
    channel: ChannelCreateNestedOneWithoutBannedUsersInput
  }

  export type BannedMembersUncheckedCreateInput = {
    channel_id: string
    banned_id: string
    status?: MemeberStatusTime | null
    status_end_time?: Date | string | null
  }

  export type BannedMembersUpdateInput = {
    banned_id?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMemeberStatusTimeFieldUpdateOperationsInput | MemeberStatusTime | null
    status_end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    channel?: ChannelUpdateOneRequiredWithoutBannedUsersNestedInput
  }

  export type BannedMembersUncheckedUpdateInput = {
    channel_id?: StringFieldUpdateOperationsInput | string
    banned_id?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMemeberStatusTimeFieldUpdateOperationsInput | MemeberStatusTime | null
    status_end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BannedMembersCreateManyInput = {
    channel_id: string
    banned_id: string
    status?: MemeberStatusTime | null
    status_end_time?: Date | string | null
  }

  export type BannedMembersUpdateManyMutationInput = {
    banned_id?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMemeberStatusTimeFieldUpdateOperationsInput | MemeberStatusTime | null
    status_end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BannedMembersUncheckedUpdateManyInput = {
    channel_id?: StringFieldUpdateOperationsInput | string
    banned_id?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMemeberStatusTimeFieldUpdateOperationsInput | MemeberStatusTime | null
    status_end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AdminMembersCreateInput = {
    admin_id: string
    channel: ChannelCreateNestedOneWithoutAdminstratorsInput
  }

  export type AdminMembersUncheckedCreateInput = {
    channel_id: string
    admin_id: string
  }

  export type AdminMembersUpdateInput = {
    admin_id?: StringFieldUpdateOperationsInput | string
    channel?: ChannelUpdateOneRequiredWithoutAdminstratorsNestedInput
  }

  export type AdminMembersUncheckedUpdateInput = {
    channel_id?: StringFieldUpdateOperationsInput | string
    admin_id?: StringFieldUpdateOperationsInput | string
  }

  export type AdminMembersCreateManyInput = {
    channel_id: string
    admin_id: string
  }

  export type AdminMembersUpdateManyMutationInput = {
    admin_id?: StringFieldUpdateOperationsInput | string
  }

  export type AdminMembersUncheckedUpdateManyInput = {
    channel_id?: StringFieldUpdateOperationsInput | string
    admin_id?: StringFieldUpdateOperationsInput | string
  }

  export type kickedMembersCreateInput = {
    kicked_id: string
    channel: ChannelCreateNestedOneWithoutKickedMembersInput
  }

  export type kickedMembersUncheckedCreateInput = {
    channel_id: string
    kicked_id: string
  }

  export type kickedMembersUpdateInput = {
    kicked_id?: StringFieldUpdateOperationsInput | string
    channel?: ChannelUpdateOneRequiredWithoutKickedMembersNestedInput
  }

  export type kickedMembersUncheckedUpdateInput = {
    channel_id?: StringFieldUpdateOperationsInput | string
    kicked_id?: StringFieldUpdateOperationsInput | string
  }

  export type kickedMembersCreateManyInput = {
    channel_id: string
    kicked_id: string
  }

  export type kickedMembersUpdateManyMutationInput = {
    kicked_id?: StringFieldUpdateOperationsInput | string
  }

  export type kickedMembersUncheckedUpdateManyInput = {
    channel_id?: StringFieldUpdateOperationsInput | string
    kicked_id?: StringFieldUpdateOperationsInput | string
  }

  export type MutedMembersCreateInput = {
    muted_id: string
    status?: MemeberStatusTime | null
    status_end_time?: Date | string | null
    channel: ChannelCreateNestedOneWithoutMutedMembersInput
  }

  export type MutedMembersUncheckedCreateInput = {
    channel_id: string
    muted_id: string
    status?: MemeberStatusTime | null
    status_end_time?: Date | string | null
  }

  export type MutedMembersUpdateInput = {
    muted_id?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMemeberStatusTimeFieldUpdateOperationsInput | MemeberStatusTime | null
    status_end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    channel?: ChannelUpdateOneRequiredWithoutMutedMembersNestedInput
  }

  export type MutedMembersUncheckedUpdateInput = {
    channel_id?: StringFieldUpdateOperationsInput | string
    muted_id?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMemeberStatusTimeFieldUpdateOperationsInput | MemeberStatusTime | null
    status_end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MutedMembersCreateManyInput = {
    channel_id: string
    muted_id: string
    status?: MemeberStatusTime | null
    status_end_time?: Date | string | null
  }

  export type MutedMembersUpdateManyMutationInput = {
    muted_id?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMemeberStatusTimeFieldUpdateOperationsInput | MemeberStatusTime | null
    status_end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MutedMembersUncheckedUpdateManyInput = {
    channel_id?: StringFieldUpdateOperationsInput | string
    muted_id?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMemeberStatusTimeFieldUpdateOperationsInput | MemeberStatusTime | null
    status_end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageCreateInput = {
    id?: string
    dateCreated?: Date | string
    sender_id: string
    content: string
    seen?: boolean
    channel: ChannelCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    dateCreated?: Date | string
    sender_id: string
    receiver_id: string
    content: string
    seen?: boolean
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    sender_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    channel?: ChannelUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    sender_id?: StringFieldUpdateOperationsInput | string
    receiver_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageCreateManyInput = {
    id?: string
    dateCreated?: Date | string
    sender_id: string
    receiver_id: string
    content: string
    seen?: boolean
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    sender_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    sender_id?: StringFieldUpdateOperationsInput | string
    receiver_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationCreateInput = {
    user_id: string
    user?: UserCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateInput = {
    notification_id?: string
    user_id: string
  }

  export type NotificationUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    notification_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateManyInput = {
    notification_id?: string
    user_id: string
  }

  export type NotificationUpdateManyMutationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    notification_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type GameCreateInput = {
    id?: string
    dateCreated?: Date | string
    gameStatus: GameStatus
    player1_id: string
    player2_id: string
    player1_pts: number
    player2_pts: number
    gameHistory?: GameHistoryTabCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateInput = {
    id?: string
    dateCreated?: Date | string
    gameStatus: GameStatus
    player1_id: string
    player2_id: string
    player1_pts: number
    player2_pts: number
    gameHistory?: GameHistoryTabUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    gameStatus?: EnumGameStatusFieldUpdateOperationsInput | GameStatus
    player1_id?: StringFieldUpdateOperationsInput | string
    player2_id?: StringFieldUpdateOperationsInput | string
    player1_pts?: IntFieldUpdateOperationsInput | number
    player2_pts?: IntFieldUpdateOperationsInput | number
    gameHistory?: GameHistoryTabUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    gameStatus?: EnumGameStatusFieldUpdateOperationsInput | GameStatus
    player1_id?: StringFieldUpdateOperationsInput | string
    player2_id?: StringFieldUpdateOperationsInput | string
    player1_pts?: IntFieldUpdateOperationsInput | number
    player2_pts?: IntFieldUpdateOperationsInput | number
    gameHistory?: GameHistoryTabUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameCreateManyInput = {
    id?: string
    dateCreated?: Date | string
    gameStatus: GameStatus
    player1_id: string
    player2_id: string
    player1_pts: number
    player2_pts: number
  }

  export type GameUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    gameStatus?: EnumGameStatusFieldUpdateOperationsInput | GameStatus
    player1_id?: StringFieldUpdateOperationsInput | string
    player2_id?: StringFieldUpdateOperationsInput | string
    player1_pts?: IntFieldUpdateOperationsInput | number
    player2_pts?: IntFieldUpdateOperationsInput | number
  }

  export type GameUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    gameStatus?: EnumGameStatusFieldUpdateOperationsInput | GameStatus
    player1_id?: StringFieldUpdateOperationsInput | string
    player2_id?: StringFieldUpdateOperationsInput | string
    player1_pts?: IntFieldUpdateOperationsInput | number
    player2_pts?: IntFieldUpdateOperationsInput | number
  }

  export type GameInvitesCreateInput = {
    receiver_id: string
    status?: InviteStatus
    validUntil: Date | string
    sender: UserCreateNestedOneWithoutGameInvitesInput
  }

  export type GameInvitesUncheckedCreateInput = {
    sender_id: string
    receiver_id: string
    status?: InviteStatus
    validUntil: Date | string
  }

  export type GameInvitesUpdateInput = {
    receiver_id?: StringFieldUpdateOperationsInput | string
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutGameInvitesNestedInput
  }

  export type GameInvitesUncheckedUpdateInput = {
    sender_id?: StringFieldUpdateOperationsInput | string
    receiver_id?: StringFieldUpdateOperationsInput | string
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameInvitesCreateManyInput = {
    sender_id: string
    receiver_id: string
    status?: InviteStatus
    validUntil: Date | string
  }

  export type GameInvitesUpdateManyMutationInput = {
    receiver_id?: StringFieldUpdateOperationsInput | string
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameInvitesUncheckedUpdateManyInput = {
    sender_id?: StringFieldUpdateOperationsInput | string
    receiver_id?: StringFieldUpdateOperationsInput | string
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankingDataCreateInput = {
    games?: number
    wins?: number
    loses?: number
    draws?: number
    xp?: number
    winning_streak?: number
    losing_streak?: number
    points?: number
    rank?: Rank
    user: UserCreateNestedOneWithoutRankingDataInput
    achievements_assignement?: AchievementsAssignementCreateNestedManyWithoutPlayerInput
  }

  export type RankingDataUncheckedCreateInput = {
    user_id: string
    games?: number
    wins?: number
    loses?: number
    draws?: number
    xp?: number
    winning_streak?: number
    losing_streak?: number
    points?: number
    rank?: Rank
    achievements_assignement?: AchievementsAssignementUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type RankingDataUpdateInput = {
    games?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    draws?: IntFieldUpdateOperationsInput | number
    xp?: FloatFieldUpdateOperationsInput | number
    winning_streak?: IntFieldUpdateOperationsInput | number
    losing_streak?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    rank?: EnumRankFieldUpdateOperationsInput | Rank
    user?: UserUpdateOneRequiredWithoutRankingDataNestedInput
    achievements_assignement?: AchievementsAssignementUpdateManyWithoutPlayerNestedInput
  }

  export type RankingDataUncheckedUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    games?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    draws?: IntFieldUpdateOperationsInput | number
    xp?: FloatFieldUpdateOperationsInput | number
    winning_streak?: IntFieldUpdateOperationsInput | number
    losing_streak?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    rank?: EnumRankFieldUpdateOperationsInput | Rank
    achievements_assignement?: AchievementsAssignementUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type RankingDataCreateManyInput = {
    user_id: string
    games?: number
    wins?: number
    loses?: number
    draws?: number
    xp?: number
    winning_streak?: number
    losing_streak?: number
    points?: number
    rank?: Rank
  }

  export type RankingDataUpdateManyMutationInput = {
    games?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    draws?: IntFieldUpdateOperationsInput | number
    xp?: FloatFieldUpdateOperationsInput | number
    winning_streak?: IntFieldUpdateOperationsInput | number
    losing_streak?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    rank?: EnumRankFieldUpdateOperationsInput | Rank
  }

  export type RankingDataUncheckedUpdateManyInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    games?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    draws?: IntFieldUpdateOperationsInput | number
    xp?: FloatFieldUpdateOperationsInput | number
    winning_streak?: IntFieldUpdateOperationsInput | number
    losing_streak?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    rank?: EnumRankFieldUpdateOperationsInput | Rank
  }

  export type AchievementsCreateInput = {
    name: string
    description: string
    image: string
    achievements_assignement?: AchievementsAssignementCreateNestedManyWithoutAchievementInput
  }

  export type AchievementsUncheckedCreateInput = {
    achievement_id?: number
    name: string
    description: string
    image: string
    achievements_assignement?: AchievementsAssignementUncheckedCreateNestedManyWithoutAchievementInput
  }

  export type AchievementsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    achievements_assignement?: AchievementsAssignementUpdateManyWithoutAchievementNestedInput
  }

  export type AchievementsUncheckedUpdateInput = {
    achievement_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    achievements_assignement?: AchievementsAssignementUncheckedUpdateManyWithoutAchievementNestedInput
  }

  export type AchievementsCreateManyInput = {
    achievement_id?: number
    name: string
    description: string
    image: string
  }

  export type AchievementsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type AchievementsUncheckedUpdateManyInput = {
    achievement_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type AchievementsAssignementCreateInput = {
    achievement: AchievementsCreateNestedOneWithoutAchievements_assignementInput
    player: RankingDataCreateNestedOneWithoutAchievements_assignementInput
  }

  export type AchievementsAssignementUncheckedCreateInput = {
    achievement_id: number
    player_id: string
  }

  export type AchievementsAssignementUpdateInput = {
    achievement?: AchievementsUpdateOneRequiredWithoutAchievements_assignementNestedInput
    player?: RankingDataUpdateOneRequiredWithoutAchievements_assignementNestedInput
  }

  export type AchievementsAssignementUncheckedUpdateInput = {
    achievement_id?: IntFieldUpdateOperationsInput | number
    player_id?: StringFieldUpdateOperationsInput | string
  }

  export type AchievementsAssignementCreateManyInput = {
    achievement_id: number
    player_id: string
  }

  export type AchievementsAssignementUpdateManyMutationInput = {

  }

  export type AchievementsAssignementUncheckedUpdateManyInput = {
    achievement_id?: IntFieldUpdateOperationsInput | number
    player_id?: StringFieldUpdateOperationsInput | string
  }

  export type GameHistoryTabCreateInput = {
    game: GameCreateNestedOneWithoutGameHistoryInput
    user: UserCreateNestedOneWithoutGameHistoryInput
  }

  export type GameHistoryTabUncheckedCreateInput = {
    game_id: string
    user_id: string
  }

  export type GameHistoryTabUpdateInput = {
    game?: GameUpdateOneRequiredWithoutGameHistoryNestedInput
    user?: UserUpdateOneRequiredWithoutGameHistoryNestedInput
  }

  export type GameHistoryTabUncheckedUpdateInput = {
    game_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type GameHistoryTabCreateManyInput = {
    game_id: string
    user_id: string
  }

  export type GameHistoryTabUpdateManyMutationInput = {

  }

  export type GameHistoryTabUncheckedUpdateManyInput = {
    game_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type EnumStatusFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusFilter | Status
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type FriendsTabListRelationFilter = {
    every?: FriendsTabWhereInput
    some?: FriendsTabWhereInput
    none?: FriendsTabWhereInput
  }

  export type BlockTabListRelationFilter = {
    every?: BlockTabWhereInput
    some?: BlockTabWhereInput
    none?: BlockTabWhereInput
  }

  export type ChannelsJoinTabListRelationFilter = {
    every?: ChannelsJoinTabWhereInput
    some?: ChannelsJoinTabWhereInput
    none?: ChannelsJoinTabWhereInput
  }

  export type GameHistoryTabListRelationFilter = {
    every?: GameHistoryTabWhereInput
    some?: GameHistoryTabWhereInput
    none?: GameHistoryTabWhereInput
  }

  export type RankingDataListRelationFilter = {
    every?: RankingDataWhereInput
    some?: RankingDataWhereInput
    none?: RankingDataWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type FriendshipInvitesListRelationFilter = {
    every?: FriendshipInvitesWhereInput
    some?: FriendshipInvitesWhereInput
    none?: FriendshipInvitesWhereInput
  }

  export type GameInvitesListRelationFilter = {
    every?: GameInvitesWhereInput
    some?: GameInvitesWhereInput
    none?: GameInvitesWhereInput
  }

  export type PrivateMessageListRelationFilter = {
    every?: PrivateMessageWhereInput
    some?: PrivateMessageWhereInput
    none?: PrivateMessageWhereInput
  }

  export type PrivateChatRoomListRelationFilter = {
    every?: PrivateChatRoomWhereInput
    some?: PrivateChatRoomWhereInput
    none?: PrivateChatRoomWhereInput
  }

  export type FriendsTabOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BlockTabOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChannelsJoinTabOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameHistoryTabOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RankingDataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FriendshipInvitesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameInvitesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PrivateMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PrivateChatRoomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateJoined?: SortOrder
    updated?: SortOrder
    avatar?: SortOrder
    status?: SortOrder
    tfa?: SortOrder
    otp_verified?: SortOrder
    otp_base32?: SortOrder
    realStatus?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateJoined?: SortOrder
    updated?: SortOrder
    avatar?: SortOrder
    status?: SortOrder
    tfa?: SortOrder
    otp_verified?: SortOrder
    otp_base32?: SortOrder
    realStatus?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateJoined?: SortOrder
    updated?: SortOrder
    avatar?: SortOrder
    status?: SortOrder
    tfa?: SortOrder
    otp_verified?: SortOrder
    otp_base32?: SortOrder
    realStatus?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type EnumStatusWithAggregatesFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusWithAggregatesFilter | Status
    _count?: NestedIntFilter
    _min?: NestedEnumStatusFilter
    _max?: NestedEnumStatusFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumInviteStatusFilter = {
    equals?: InviteStatus
    in?: Enumerable<InviteStatus>
    notIn?: Enumerable<InviteStatus>
    not?: NestedEnumInviteStatusFilter | InviteStatus
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FriendshipInvitesSender_idReceiver_idCompoundUniqueInput = {
    sender_id: string
    receiver_id: string
  }

  export type FriendshipInvitesCountOrderByAggregateInput = {
    sender_id?: SortOrder
    receiver_id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type FriendshipInvitesMaxOrderByAggregateInput = {
    sender_id?: SortOrder
    receiver_id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type FriendshipInvitesMinOrderByAggregateInput = {
    sender_id?: SortOrder
    receiver_id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumInviteStatusWithAggregatesFilter = {
    equals?: InviteStatus
    in?: Enumerable<InviteStatus>
    notIn?: Enumerable<InviteStatus>
    not?: NestedEnumInviteStatusWithAggregatesFilter | InviteStatus
    _count?: NestedIntFilter
    _min?: NestedEnumInviteStatusFilter
    _max?: NestedEnumInviteStatusFilter
  }

  export type FriendsTabUser_idFriendUser_idCompoundUniqueInput = {
    user_id: string
    friendUser_id: string
  }

  export type FriendsTabCountOrderByAggregateInput = {
    user_id?: SortOrder
    friendUser_id?: SortOrder
  }

  export type FriendsTabMaxOrderByAggregateInput = {
    user_id?: SortOrder
    friendUser_id?: SortOrder
  }

  export type FriendsTabMinOrderByAggregateInput = {
    user_id?: SortOrder
    friendUser_id?: SortOrder
  }

  export type PrivateChatRoomRelationFilter = {
    is?: PrivateChatRoomWhereInput
    isNot?: PrivateChatRoomWhereInput
  }

  export type PrivateMessageCountOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    content?: SortOrder
    seen?: SortOrder
    chatRoom_id?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
  }

  export type PrivateMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    content?: SortOrder
    seen?: SortOrder
    chatRoom_id?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
  }

  export type PrivateMessageMinOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    content?: SortOrder
    seen?: SortOrder
    chatRoom_id?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
  }

  export type PrivateChatRoomCountOrderByAggregateInput = {
    id?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
    lastUpdatedTime?: SortOrder
    blocked?: SortOrder
  }

  export type PrivateChatRoomMaxOrderByAggregateInput = {
    id?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
    lastUpdatedTime?: SortOrder
    blocked?: SortOrder
  }

  export type PrivateChatRoomMinOrderByAggregateInput = {
    id?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
    lastUpdatedTime?: SortOrder
    blocked?: SortOrder
  }

  export type BlockTabCountOrderByAggregateInput = {
    user_id?: SortOrder
    blockedUser_id?: SortOrder
    uuid?: SortOrder
  }

  export type BlockTabMaxOrderByAggregateInput = {
    user_id?: SortOrder
    blockedUser_id?: SortOrder
    uuid?: SortOrder
  }

  export type BlockTabMinOrderByAggregateInput = {
    user_id?: SortOrder
    blockedUser_id?: SortOrder
    uuid?: SortOrder
  }

  export type EnumChanRolesFilter = {
    equals?: ChanRoles
    in?: Enumerable<ChanRoles>
    notIn?: Enumerable<ChanRoles>
    not?: NestedEnumChanRolesFilter | ChanRoles
  }

  export type ChannelsJoinTabUser_idChannel_idCompoundUniqueInput = {
    user_id: string
    channel_id: string
  }

  export type ChannelsJoinTabCountOrderByAggregateInput = {
    user_id?: SortOrder
    channel_id?: SortOrder
    channel_name?: SortOrder
    role?: SortOrder
  }

  export type ChannelsJoinTabMaxOrderByAggregateInput = {
    user_id?: SortOrder
    channel_id?: SortOrder
    channel_name?: SortOrder
    role?: SortOrder
  }

  export type ChannelsJoinTabMinOrderByAggregateInput = {
    user_id?: SortOrder
    channel_id?: SortOrder
    channel_name?: SortOrder
    role?: SortOrder
  }

  export type EnumChanRolesWithAggregatesFilter = {
    equals?: ChanRoles
    in?: Enumerable<ChanRoles>
    notIn?: Enumerable<ChanRoles>
    not?: NestedEnumChanRolesWithAggregatesFilter | ChanRoles
    _count?: NestedIntFilter
    _min?: NestedEnumChanRolesFilter
    _max?: NestedEnumChanRolesFilter
  }

  export type EnumChanTypeFilter = {
    equals?: ChanType
    in?: Enumerable<ChanType>
    notIn?: Enumerable<ChanType>
    not?: NestedEnumChanTypeFilter | ChanType
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type MembersTabListRelationFilter = {
    every?: MembersTabWhereInput
    some?: MembersTabWhereInput
    none?: MembersTabWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type BannedMembersListRelationFilter = {
    every?: BannedMembersWhereInput
    some?: BannedMembersWhereInput
    none?: BannedMembersWhereInput
  }

  export type AdminMembersListRelationFilter = {
    every?: AdminMembersWhereInput
    some?: AdminMembersWhereInput
    none?: AdminMembersWhereInput
  }

  export type MutedMembersListRelationFilter = {
    every?: MutedMembersWhereInput
    some?: MutedMembersWhereInput
    none?: MutedMembersWhereInput
  }

  export type KickedMembersListRelationFilter = {
    every?: kickedMembersWhereInput
    some?: kickedMembersWhereInput
    none?: kickedMembersWhereInput
  }

  export type MembersTabOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BannedMembersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminMembersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MutedMembersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type kickedMembersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChannelCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    dateCreated?: SortOrder
    chann_type?: SortOrder
    owner_id?: SortOrder
    password?: SortOrder
    limit_members?: SortOrder
  }

  export type ChannelAvgOrderByAggregateInput = {
    limit_members?: SortOrder
  }

  export type ChannelMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    dateCreated?: SortOrder
    chann_type?: SortOrder
    owner_id?: SortOrder
    password?: SortOrder
    limit_members?: SortOrder
  }

  export type ChannelMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    dateCreated?: SortOrder
    chann_type?: SortOrder
    owner_id?: SortOrder
    password?: SortOrder
    limit_members?: SortOrder
  }

  export type ChannelSumOrderByAggregateInput = {
    limit_members?: SortOrder
  }

  export type EnumChanTypeWithAggregatesFilter = {
    equals?: ChanType
    in?: Enumerable<ChanType>
    notIn?: Enumerable<ChanType>
    not?: NestedEnumChanTypeWithAggregatesFilter | ChanType
    _count?: NestedIntFilter
    _min?: NestedEnumChanTypeFilter
    _max?: NestedEnumChanTypeFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type ChannelRelationFilter = {
    is?: ChannelWhereInput
    isNot?: ChannelWhereInput
  }

  export type MembersTabChannel_idMember_idCompoundUniqueInput = {
    channel_id: string
    member_id: string
  }

  export type MembersTabCountOrderByAggregateInput = {
    channel_id?: SortOrder
    member_id?: SortOrder
  }

  export type MembersTabMaxOrderByAggregateInput = {
    channel_id?: SortOrder
    member_id?: SortOrder
  }

  export type MembersTabMinOrderByAggregateInput = {
    channel_id?: SortOrder
    member_id?: SortOrder
  }

  export type EnumMemeberStatusTimeNullableFilter = {
    equals?: MemeberStatusTime | null
    in?: Enumerable<MemeberStatusTime> | null
    notIn?: Enumerable<MemeberStatusTime> | null
    not?: NestedEnumMemeberStatusTimeNullableFilter | MemeberStatusTime | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type BannedMembersChannel_idBanned_idCompoundUniqueInput = {
    channel_id: string
    banned_id: string
  }

  export type BannedMembersCountOrderByAggregateInput = {
    channel_id?: SortOrder
    banned_id?: SortOrder
    status?: SortOrder
    status_end_time?: SortOrder
  }

  export type BannedMembersMaxOrderByAggregateInput = {
    channel_id?: SortOrder
    banned_id?: SortOrder
    status?: SortOrder
    status_end_time?: SortOrder
  }

  export type BannedMembersMinOrderByAggregateInput = {
    channel_id?: SortOrder
    banned_id?: SortOrder
    status?: SortOrder
    status_end_time?: SortOrder
  }

  export type EnumMemeberStatusTimeNullableWithAggregatesFilter = {
    equals?: MemeberStatusTime | null
    in?: Enumerable<MemeberStatusTime> | null
    notIn?: Enumerable<MemeberStatusTime> | null
    not?: NestedEnumMemeberStatusTimeNullableWithAggregatesFilter | MemeberStatusTime | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumMemeberStatusTimeNullableFilter
    _max?: NestedEnumMemeberStatusTimeNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type AdminMembersChannel_idAdmin_idCompoundUniqueInput = {
    channel_id: string
    admin_id: string
  }

  export type AdminMembersCountOrderByAggregateInput = {
    channel_id?: SortOrder
    admin_id?: SortOrder
  }

  export type AdminMembersMaxOrderByAggregateInput = {
    channel_id?: SortOrder
    admin_id?: SortOrder
  }

  export type AdminMembersMinOrderByAggregateInput = {
    channel_id?: SortOrder
    admin_id?: SortOrder
  }

  export type kickedMembersChannel_idKicked_idCompoundUniqueInput = {
    channel_id: string
    kicked_id: string
  }

  export type kickedMembersCountOrderByAggregateInput = {
    channel_id?: SortOrder
    kicked_id?: SortOrder
  }

  export type kickedMembersMaxOrderByAggregateInput = {
    channel_id?: SortOrder
    kicked_id?: SortOrder
  }

  export type kickedMembersMinOrderByAggregateInput = {
    channel_id?: SortOrder
    kicked_id?: SortOrder
  }

  export type MutedMembersChannel_idMuted_idCompoundUniqueInput = {
    channel_id: string
    muted_id: string
  }

  export type MutedMembersCountOrderByAggregateInput = {
    channel_id?: SortOrder
    muted_id?: SortOrder
    status?: SortOrder
    status_end_time?: SortOrder
  }

  export type MutedMembersMaxOrderByAggregateInput = {
    channel_id?: SortOrder
    muted_id?: SortOrder
    status?: SortOrder
    status_end_time?: SortOrder
  }

  export type MutedMembersMinOrderByAggregateInput = {
    channel_id?: SortOrder
    muted_id?: SortOrder
    status?: SortOrder
    status_end_time?: SortOrder
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
    content?: SortOrder
    seen?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
    content?: SortOrder
    seen?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
    content?: SortOrder
    seen?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    notification_id?: SortOrder
    user_id?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    notification_id?: SortOrder
    user_id?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    notification_id?: SortOrder
    user_id?: SortOrder
  }

  export type EnumGameStatusFilter = {
    equals?: GameStatus
    in?: Enumerable<GameStatus>
    notIn?: Enumerable<GameStatus>
    not?: NestedEnumGameStatusFilter | GameStatus
  }

  export type GameCountOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    gameStatus?: SortOrder
    player1_id?: SortOrder
    player2_id?: SortOrder
    player1_pts?: SortOrder
    player2_pts?: SortOrder
  }

  export type GameAvgOrderByAggregateInput = {
    player1_pts?: SortOrder
    player2_pts?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    gameStatus?: SortOrder
    player1_id?: SortOrder
    player2_id?: SortOrder
    player1_pts?: SortOrder
    player2_pts?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    gameStatus?: SortOrder
    player1_id?: SortOrder
    player2_id?: SortOrder
    player1_pts?: SortOrder
    player2_pts?: SortOrder
  }

  export type GameSumOrderByAggregateInput = {
    player1_pts?: SortOrder
    player2_pts?: SortOrder
  }

  export type EnumGameStatusWithAggregatesFilter = {
    equals?: GameStatus
    in?: Enumerable<GameStatus>
    notIn?: Enumerable<GameStatus>
    not?: NestedEnumGameStatusWithAggregatesFilter | GameStatus
    _count?: NestedIntFilter
    _min?: NestedEnumGameStatusFilter
    _max?: NestedEnumGameStatusFilter
  }

  export type GameInvitesSender_idReceiver_idCompoundUniqueInput = {
    sender_id: string
    receiver_id: string
  }

  export type GameInvitesCountOrderByAggregateInput = {
    sender_id?: SortOrder
    receiver_id?: SortOrder
    status?: SortOrder
    validUntil?: SortOrder
  }

  export type GameInvitesMaxOrderByAggregateInput = {
    sender_id?: SortOrder
    receiver_id?: SortOrder
    status?: SortOrder
    validUntil?: SortOrder
  }

  export type GameInvitesMinOrderByAggregateInput = {
    sender_id?: SortOrder
    receiver_id?: SortOrder
    status?: SortOrder
    validUntil?: SortOrder
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type EnumRankFilter = {
    equals?: Rank
    in?: Enumerable<Rank>
    notIn?: Enumerable<Rank>
    not?: NestedEnumRankFilter | Rank
  }

  export type AchievementsAssignementListRelationFilter = {
    every?: AchievementsAssignementWhereInput
    some?: AchievementsAssignementWhereInput
    none?: AchievementsAssignementWhereInput
  }

  export type AchievementsAssignementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RankingDataCountOrderByAggregateInput = {
    user_id?: SortOrder
    games?: SortOrder
    wins?: SortOrder
    loses?: SortOrder
    draws?: SortOrder
    xp?: SortOrder
    winning_streak?: SortOrder
    losing_streak?: SortOrder
    points?: SortOrder
    rank?: SortOrder
  }

  export type RankingDataAvgOrderByAggregateInput = {
    games?: SortOrder
    wins?: SortOrder
    loses?: SortOrder
    draws?: SortOrder
    xp?: SortOrder
    winning_streak?: SortOrder
    losing_streak?: SortOrder
    points?: SortOrder
  }

  export type RankingDataMaxOrderByAggregateInput = {
    user_id?: SortOrder
    games?: SortOrder
    wins?: SortOrder
    loses?: SortOrder
    draws?: SortOrder
    xp?: SortOrder
    winning_streak?: SortOrder
    losing_streak?: SortOrder
    points?: SortOrder
    rank?: SortOrder
  }

  export type RankingDataMinOrderByAggregateInput = {
    user_id?: SortOrder
    games?: SortOrder
    wins?: SortOrder
    loses?: SortOrder
    draws?: SortOrder
    xp?: SortOrder
    winning_streak?: SortOrder
    losing_streak?: SortOrder
    points?: SortOrder
    rank?: SortOrder
  }

  export type RankingDataSumOrderByAggregateInput = {
    games?: SortOrder
    wins?: SortOrder
    loses?: SortOrder
    draws?: SortOrder
    xp?: SortOrder
    winning_streak?: SortOrder
    losing_streak?: SortOrder
    points?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type EnumRankWithAggregatesFilter = {
    equals?: Rank
    in?: Enumerable<Rank>
    notIn?: Enumerable<Rank>
    not?: NestedEnumRankWithAggregatesFilter | Rank
    _count?: NestedIntFilter
    _min?: NestedEnumRankFilter
    _max?: NestedEnumRankFilter
  }

  export type AchievementsCountOrderByAggregateInput = {
    achievement_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
  }

  export type AchievementsAvgOrderByAggregateInput = {
    achievement_id?: SortOrder
  }

  export type AchievementsMaxOrderByAggregateInput = {
    achievement_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
  }

  export type AchievementsMinOrderByAggregateInput = {
    achievement_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
  }

  export type AchievementsSumOrderByAggregateInput = {
    achievement_id?: SortOrder
  }

  export type AchievementsRelationFilter = {
    is?: AchievementsWhereInput
    isNot?: AchievementsWhereInput
  }

  export type RankingDataRelationFilter = {
    is?: RankingDataWhereInput
    isNot?: RankingDataWhereInput
  }

  export type AchievementsAssignementAchievement_idPlayer_idCompoundUniqueInput = {
    achievement_id: number
    player_id: string
  }

  export type AchievementsAssignementCountOrderByAggregateInput = {
    achievement_id?: SortOrder
    player_id?: SortOrder
  }

  export type AchievementsAssignementAvgOrderByAggregateInput = {
    achievement_id?: SortOrder
  }

  export type AchievementsAssignementMaxOrderByAggregateInput = {
    achievement_id?: SortOrder
    player_id?: SortOrder
  }

  export type AchievementsAssignementMinOrderByAggregateInput = {
    achievement_id?: SortOrder
    player_id?: SortOrder
  }

  export type AchievementsAssignementSumOrderByAggregateInput = {
    achievement_id?: SortOrder
  }

  export type GameRelationFilter = {
    is?: GameWhereInput
    isNot?: GameWhereInput
  }

  export type GameHistoryTabCountOrderByAggregateInput = {
    game_id?: SortOrder
    user_id?: SortOrder
  }

  export type GameHistoryTabMaxOrderByAggregateInput = {
    game_id?: SortOrder
    user_id?: SortOrder
  }

  export type GameHistoryTabMinOrderByAggregateInput = {
    game_id?: SortOrder
    user_id?: SortOrder
  }

  export type FriendsTabCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FriendsTabCreateWithoutUserInput>, Enumerable<FriendsTabUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FriendsTabCreateOrConnectWithoutUserInput>
    createMany?: FriendsTabCreateManyUserInputEnvelope
    connect?: Enumerable<FriendsTabWhereUniqueInput>
  }

  export type BlockTabCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BlockTabCreateWithoutUserInput>, Enumerable<BlockTabUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BlockTabCreateOrConnectWithoutUserInput>
    createMany?: BlockTabCreateManyUserInputEnvelope
    connect?: Enumerable<BlockTabWhereUniqueInput>
  }

  export type ChannelsJoinTabCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ChannelsJoinTabCreateWithoutUserInput>, Enumerable<ChannelsJoinTabUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChannelsJoinTabCreateOrConnectWithoutUserInput>
    createMany?: ChannelsJoinTabCreateManyUserInputEnvelope
    connect?: Enumerable<ChannelsJoinTabWhereUniqueInput>
  }

  export type GameHistoryTabCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<GameHistoryTabCreateWithoutUserInput>, Enumerable<GameHistoryTabUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GameHistoryTabCreateOrConnectWithoutUserInput>
    createMany?: GameHistoryTabCreateManyUserInputEnvelope
    connect?: Enumerable<GameHistoryTabWhereUniqueInput>
  }

  export type RankingDataCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RankingDataCreateWithoutUserInput>, Enumerable<RankingDataUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RankingDataCreateOrConnectWithoutUserInput>
    createMany?: RankingDataCreateManyUserInputEnvelope
    connect?: Enumerable<RankingDataWhereUniqueInput>
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutUserInput>, Enumerable<NotificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutUserInput>
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: Enumerable<NotificationWhereUniqueInput>
  }

  export type FriendshipInvitesCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<FriendshipInvitesCreateWithoutSenderInput>, Enumerable<FriendshipInvitesUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<FriendshipInvitesCreateOrConnectWithoutSenderInput>
    createMany?: FriendshipInvitesCreateManySenderInputEnvelope
    connect?: Enumerable<FriendshipInvitesWhereUniqueInput>
  }

  export type GameInvitesCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<GameInvitesCreateWithoutSenderInput>, Enumerable<GameInvitesUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<GameInvitesCreateOrConnectWithoutSenderInput>
    createMany?: GameInvitesCreateManySenderInputEnvelope
    connect?: Enumerable<GameInvitesWhereUniqueInput>
  }

  export type PrivateMessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<PrivateMessageCreateWithoutSenderInput>, Enumerable<PrivateMessageUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<PrivateMessageCreateOrConnectWithoutSenderInput>
    createMany?: PrivateMessageCreateManySenderInputEnvelope
    connect?: Enumerable<PrivateMessageWhereUniqueInput>
  }

  export type PrivateMessageCreateNestedManyWithoutReceiverInput = {
    create?: XOR<Enumerable<PrivateMessageCreateWithoutReceiverInput>, Enumerable<PrivateMessageUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<PrivateMessageCreateOrConnectWithoutReceiverInput>
    createMany?: PrivateMessageCreateManyReceiverInputEnvelope
    connect?: Enumerable<PrivateMessageWhereUniqueInput>
  }

  export type PrivateChatRoomCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<PrivateChatRoomCreateWithoutSenderInput>, Enumerable<PrivateChatRoomUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<PrivateChatRoomCreateOrConnectWithoutSenderInput>
    createMany?: PrivateChatRoomCreateManySenderInputEnvelope
    connect?: Enumerable<PrivateChatRoomWhereUniqueInput>
  }

  export type PrivateChatRoomCreateNestedManyWithoutReceiverInput = {
    create?: XOR<Enumerable<PrivateChatRoomCreateWithoutReceiverInput>, Enumerable<PrivateChatRoomUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<PrivateChatRoomCreateOrConnectWithoutReceiverInput>
    createMany?: PrivateChatRoomCreateManyReceiverInputEnvelope
    connect?: Enumerable<PrivateChatRoomWhereUniqueInput>
  }

  export type FriendsTabUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FriendsTabCreateWithoutUserInput>, Enumerable<FriendsTabUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FriendsTabCreateOrConnectWithoutUserInput>
    createMany?: FriendsTabCreateManyUserInputEnvelope
    connect?: Enumerable<FriendsTabWhereUniqueInput>
  }

  export type BlockTabUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BlockTabCreateWithoutUserInput>, Enumerable<BlockTabUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BlockTabCreateOrConnectWithoutUserInput>
    createMany?: BlockTabCreateManyUserInputEnvelope
    connect?: Enumerable<BlockTabWhereUniqueInput>
  }

  export type ChannelsJoinTabUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ChannelsJoinTabCreateWithoutUserInput>, Enumerable<ChannelsJoinTabUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChannelsJoinTabCreateOrConnectWithoutUserInput>
    createMany?: ChannelsJoinTabCreateManyUserInputEnvelope
    connect?: Enumerable<ChannelsJoinTabWhereUniqueInput>
  }

  export type GameHistoryTabUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<GameHistoryTabCreateWithoutUserInput>, Enumerable<GameHistoryTabUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GameHistoryTabCreateOrConnectWithoutUserInput>
    createMany?: GameHistoryTabCreateManyUserInputEnvelope
    connect?: Enumerable<GameHistoryTabWhereUniqueInput>
  }

  export type RankingDataUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RankingDataCreateWithoutUserInput>, Enumerable<RankingDataUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RankingDataCreateOrConnectWithoutUserInput>
    createMany?: RankingDataCreateManyUserInputEnvelope
    connect?: Enumerable<RankingDataWhereUniqueInput>
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutUserInput>, Enumerable<NotificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutUserInput>
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: Enumerable<NotificationWhereUniqueInput>
  }

  export type FriendshipInvitesUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<FriendshipInvitesCreateWithoutSenderInput>, Enumerable<FriendshipInvitesUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<FriendshipInvitesCreateOrConnectWithoutSenderInput>
    createMany?: FriendshipInvitesCreateManySenderInputEnvelope
    connect?: Enumerable<FriendshipInvitesWhereUniqueInput>
  }

  export type GameInvitesUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<GameInvitesCreateWithoutSenderInput>, Enumerable<GameInvitesUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<GameInvitesCreateOrConnectWithoutSenderInput>
    createMany?: GameInvitesCreateManySenderInputEnvelope
    connect?: Enumerable<GameInvitesWhereUniqueInput>
  }

  export type PrivateMessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<PrivateMessageCreateWithoutSenderInput>, Enumerable<PrivateMessageUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<PrivateMessageCreateOrConnectWithoutSenderInput>
    createMany?: PrivateMessageCreateManySenderInputEnvelope
    connect?: Enumerable<PrivateMessageWhereUniqueInput>
  }

  export type PrivateMessageUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<Enumerable<PrivateMessageCreateWithoutReceiverInput>, Enumerable<PrivateMessageUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<PrivateMessageCreateOrConnectWithoutReceiverInput>
    createMany?: PrivateMessageCreateManyReceiverInputEnvelope
    connect?: Enumerable<PrivateMessageWhereUniqueInput>
  }

  export type PrivateChatRoomUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<PrivateChatRoomCreateWithoutSenderInput>, Enumerable<PrivateChatRoomUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<PrivateChatRoomCreateOrConnectWithoutSenderInput>
    createMany?: PrivateChatRoomCreateManySenderInputEnvelope
    connect?: Enumerable<PrivateChatRoomWhereUniqueInput>
  }

  export type PrivateChatRoomUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<Enumerable<PrivateChatRoomCreateWithoutReceiverInput>, Enumerable<PrivateChatRoomUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<PrivateChatRoomCreateOrConnectWithoutReceiverInput>
    createMany?: PrivateChatRoomCreateManyReceiverInputEnvelope
    connect?: Enumerable<PrivateChatRoomWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: Status
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type FriendsTabUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<FriendsTabCreateWithoutUserInput>, Enumerable<FriendsTabUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FriendsTabCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FriendsTabUpsertWithWhereUniqueWithoutUserInput>
    createMany?: FriendsTabCreateManyUserInputEnvelope
    set?: Enumerable<FriendsTabWhereUniqueInput>
    disconnect?: Enumerable<FriendsTabWhereUniqueInput>
    delete?: Enumerable<FriendsTabWhereUniqueInput>
    connect?: Enumerable<FriendsTabWhereUniqueInput>
    update?: Enumerable<FriendsTabUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FriendsTabUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FriendsTabScalarWhereInput>
  }

  export type BlockTabUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<BlockTabCreateWithoutUserInput>, Enumerable<BlockTabUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BlockTabCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BlockTabUpsertWithWhereUniqueWithoutUserInput>
    createMany?: BlockTabCreateManyUserInputEnvelope
    set?: Enumerable<BlockTabWhereUniqueInput>
    disconnect?: Enumerable<BlockTabWhereUniqueInput>
    delete?: Enumerable<BlockTabWhereUniqueInput>
    connect?: Enumerable<BlockTabWhereUniqueInput>
    update?: Enumerable<BlockTabUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BlockTabUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BlockTabScalarWhereInput>
  }

  export type ChannelsJoinTabUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ChannelsJoinTabCreateWithoutUserInput>, Enumerable<ChannelsJoinTabUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChannelsJoinTabCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ChannelsJoinTabUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ChannelsJoinTabCreateManyUserInputEnvelope
    set?: Enumerable<ChannelsJoinTabWhereUniqueInput>
    disconnect?: Enumerable<ChannelsJoinTabWhereUniqueInput>
    delete?: Enumerable<ChannelsJoinTabWhereUniqueInput>
    connect?: Enumerable<ChannelsJoinTabWhereUniqueInput>
    update?: Enumerable<ChannelsJoinTabUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ChannelsJoinTabUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ChannelsJoinTabScalarWhereInput>
  }

  export type GameHistoryTabUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<GameHistoryTabCreateWithoutUserInput>, Enumerable<GameHistoryTabUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GameHistoryTabCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<GameHistoryTabUpsertWithWhereUniqueWithoutUserInput>
    createMany?: GameHistoryTabCreateManyUserInputEnvelope
    set?: Enumerable<GameHistoryTabWhereUniqueInput>
    disconnect?: Enumerable<GameHistoryTabWhereUniqueInput>
    delete?: Enumerable<GameHistoryTabWhereUniqueInput>
    connect?: Enumerable<GameHistoryTabWhereUniqueInput>
    update?: Enumerable<GameHistoryTabUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<GameHistoryTabUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<GameHistoryTabScalarWhereInput>
  }

  export type RankingDataUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<RankingDataCreateWithoutUserInput>, Enumerable<RankingDataUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RankingDataCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RankingDataUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RankingDataCreateManyUserInputEnvelope
    set?: Enumerable<RankingDataWhereUniqueInput>
    disconnect?: Enumerable<RankingDataWhereUniqueInput>
    delete?: Enumerable<RankingDataWhereUniqueInput>
    connect?: Enumerable<RankingDataWhereUniqueInput>
    update?: Enumerable<RankingDataUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RankingDataUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RankingDataScalarWhereInput>
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutUserInput>, Enumerable<NotificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<NotificationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: Enumerable<NotificationWhereUniqueInput>
    disconnect?: Enumerable<NotificationWhereUniqueInput>
    delete?: Enumerable<NotificationWhereUniqueInput>
    connect?: Enumerable<NotificationWhereUniqueInput>
    update?: Enumerable<NotificationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<NotificationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<NotificationScalarWhereInput>
  }

  export type FriendshipInvitesUpdateManyWithoutSenderNestedInput = {
    create?: XOR<Enumerable<FriendshipInvitesCreateWithoutSenderInput>, Enumerable<FriendshipInvitesUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<FriendshipInvitesCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<FriendshipInvitesUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: FriendshipInvitesCreateManySenderInputEnvelope
    set?: Enumerable<FriendshipInvitesWhereUniqueInput>
    disconnect?: Enumerable<FriendshipInvitesWhereUniqueInput>
    delete?: Enumerable<FriendshipInvitesWhereUniqueInput>
    connect?: Enumerable<FriendshipInvitesWhereUniqueInput>
    update?: Enumerable<FriendshipInvitesUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<FriendshipInvitesUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<FriendshipInvitesScalarWhereInput>
  }

  export type GameInvitesUpdateManyWithoutSenderNestedInput = {
    create?: XOR<Enumerable<GameInvitesCreateWithoutSenderInput>, Enumerable<GameInvitesUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<GameInvitesCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<GameInvitesUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: GameInvitesCreateManySenderInputEnvelope
    set?: Enumerable<GameInvitesWhereUniqueInput>
    disconnect?: Enumerable<GameInvitesWhereUniqueInput>
    delete?: Enumerable<GameInvitesWhereUniqueInput>
    connect?: Enumerable<GameInvitesWhereUniqueInput>
    update?: Enumerable<GameInvitesUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<GameInvitesUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<GameInvitesScalarWhereInput>
  }

  export type PrivateMessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<Enumerable<PrivateMessageCreateWithoutSenderInput>, Enumerable<PrivateMessageUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<PrivateMessageCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<PrivateMessageUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: PrivateMessageCreateManySenderInputEnvelope
    set?: Enumerable<PrivateMessageWhereUniqueInput>
    disconnect?: Enumerable<PrivateMessageWhereUniqueInput>
    delete?: Enumerable<PrivateMessageWhereUniqueInput>
    connect?: Enumerable<PrivateMessageWhereUniqueInput>
    update?: Enumerable<PrivateMessageUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<PrivateMessageUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<PrivateMessageScalarWhereInput>
  }

  export type PrivateMessageUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<Enumerable<PrivateMessageCreateWithoutReceiverInput>, Enumerable<PrivateMessageUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<PrivateMessageCreateOrConnectWithoutReceiverInput>
    upsert?: Enumerable<PrivateMessageUpsertWithWhereUniqueWithoutReceiverInput>
    createMany?: PrivateMessageCreateManyReceiverInputEnvelope
    set?: Enumerable<PrivateMessageWhereUniqueInput>
    disconnect?: Enumerable<PrivateMessageWhereUniqueInput>
    delete?: Enumerable<PrivateMessageWhereUniqueInput>
    connect?: Enumerable<PrivateMessageWhereUniqueInput>
    update?: Enumerable<PrivateMessageUpdateWithWhereUniqueWithoutReceiverInput>
    updateMany?: Enumerable<PrivateMessageUpdateManyWithWhereWithoutReceiverInput>
    deleteMany?: Enumerable<PrivateMessageScalarWhereInput>
  }

  export type PrivateChatRoomUpdateManyWithoutSenderNestedInput = {
    create?: XOR<Enumerable<PrivateChatRoomCreateWithoutSenderInput>, Enumerable<PrivateChatRoomUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<PrivateChatRoomCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<PrivateChatRoomUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: PrivateChatRoomCreateManySenderInputEnvelope
    set?: Enumerable<PrivateChatRoomWhereUniqueInput>
    disconnect?: Enumerable<PrivateChatRoomWhereUniqueInput>
    delete?: Enumerable<PrivateChatRoomWhereUniqueInput>
    connect?: Enumerable<PrivateChatRoomWhereUniqueInput>
    update?: Enumerable<PrivateChatRoomUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<PrivateChatRoomUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<PrivateChatRoomScalarWhereInput>
  }

  export type PrivateChatRoomUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<Enumerable<PrivateChatRoomCreateWithoutReceiverInput>, Enumerable<PrivateChatRoomUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<PrivateChatRoomCreateOrConnectWithoutReceiverInput>
    upsert?: Enumerable<PrivateChatRoomUpsertWithWhereUniqueWithoutReceiverInput>
    createMany?: PrivateChatRoomCreateManyReceiverInputEnvelope
    set?: Enumerable<PrivateChatRoomWhereUniqueInput>
    disconnect?: Enumerable<PrivateChatRoomWhereUniqueInput>
    delete?: Enumerable<PrivateChatRoomWhereUniqueInput>
    connect?: Enumerable<PrivateChatRoomWhereUniqueInput>
    update?: Enumerable<PrivateChatRoomUpdateWithWhereUniqueWithoutReceiverInput>
    updateMany?: Enumerable<PrivateChatRoomUpdateManyWithWhereWithoutReceiverInput>
    deleteMany?: Enumerable<PrivateChatRoomScalarWhereInput>
  }

  export type FriendsTabUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<FriendsTabCreateWithoutUserInput>, Enumerable<FriendsTabUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FriendsTabCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FriendsTabUpsertWithWhereUniqueWithoutUserInput>
    createMany?: FriendsTabCreateManyUserInputEnvelope
    set?: Enumerable<FriendsTabWhereUniqueInput>
    disconnect?: Enumerable<FriendsTabWhereUniqueInput>
    delete?: Enumerable<FriendsTabWhereUniqueInput>
    connect?: Enumerable<FriendsTabWhereUniqueInput>
    update?: Enumerable<FriendsTabUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FriendsTabUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FriendsTabScalarWhereInput>
  }

  export type BlockTabUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<BlockTabCreateWithoutUserInput>, Enumerable<BlockTabUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BlockTabCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BlockTabUpsertWithWhereUniqueWithoutUserInput>
    createMany?: BlockTabCreateManyUserInputEnvelope
    set?: Enumerable<BlockTabWhereUniqueInput>
    disconnect?: Enumerable<BlockTabWhereUniqueInput>
    delete?: Enumerable<BlockTabWhereUniqueInput>
    connect?: Enumerable<BlockTabWhereUniqueInput>
    update?: Enumerable<BlockTabUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BlockTabUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BlockTabScalarWhereInput>
  }

  export type ChannelsJoinTabUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ChannelsJoinTabCreateWithoutUserInput>, Enumerable<ChannelsJoinTabUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChannelsJoinTabCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ChannelsJoinTabUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ChannelsJoinTabCreateManyUserInputEnvelope
    set?: Enumerable<ChannelsJoinTabWhereUniqueInput>
    disconnect?: Enumerable<ChannelsJoinTabWhereUniqueInput>
    delete?: Enumerable<ChannelsJoinTabWhereUniqueInput>
    connect?: Enumerable<ChannelsJoinTabWhereUniqueInput>
    update?: Enumerable<ChannelsJoinTabUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ChannelsJoinTabUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ChannelsJoinTabScalarWhereInput>
  }

  export type GameHistoryTabUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<GameHistoryTabCreateWithoutUserInput>, Enumerable<GameHistoryTabUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GameHistoryTabCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<GameHistoryTabUpsertWithWhereUniqueWithoutUserInput>
    createMany?: GameHistoryTabCreateManyUserInputEnvelope
    set?: Enumerable<GameHistoryTabWhereUniqueInput>
    disconnect?: Enumerable<GameHistoryTabWhereUniqueInput>
    delete?: Enumerable<GameHistoryTabWhereUniqueInput>
    connect?: Enumerable<GameHistoryTabWhereUniqueInput>
    update?: Enumerable<GameHistoryTabUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<GameHistoryTabUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<GameHistoryTabScalarWhereInput>
  }

  export type RankingDataUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<RankingDataCreateWithoutUserInput>, Enumerable<RankingDataUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RankingDataCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RankingDataUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RankingDataCreateManyUserInputEnvelope
    set?: Enumerable<RankingDataWhereUniqueInput>
    disconnect?: Enumerable<RankingDataWhereUniqueInput>
    delete?: Enumerable<RankingDataWhereUniqueInput>
    connect?: Enumerable<RankingDataWhereUniqueInput>
    update?: Enumerable<RankingDataUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RankingDataUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RankingDataScalarWhereInput>
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutUserInput>, Enumerable<NotificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<NotificationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: Enumerable<NotificationWhereUniqueInput>
    disconnect?: Enumerable<NotificationWhereUniqueInput>
    delete?: Enumerable<NotificationWhereUniqueInput>
    connect?: Enumerable<NotificationWhereUniqueInput>
    update?: Enumerable<NotificationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<NotificationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<NotificationScalarWhereInput>
  }

  export type FriendshipInvitesUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<Enumerable<FriendshipInvitesCreateWithoutSenderInput>, Enumerable<FriendshipInvitesUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<FriendshipInvitesCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<FriendshipInvitesUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: FriendshipInvitesCreateManySenderInputEnvelope
    set?: Enumerable<FriendshipInvitesWhereUniqueInput>
    disconnect?: Enumerable<FriendshipInvitesWhereUniqueInput>
    delete?: Enumerable<FriendshipInvitesWhereUniqueInput>
    connect?: Enumerable<FriendshipInvitesWhereUniqueInput>
    update?: Enumerable<FriendshipInvitesUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<FriendshipInvitesUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<FriendshipInvitesScalarWhereInput>
  }

  export type GameInvitesUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<Enumerable<GameInvitesCreateWithoutSenderInput>, Enumerable<GameInvitesUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<GameInvitesCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<GameInvitesUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: GameInvitesCreateManySenderInputEnvelope
    set?: Enumerable<GameInvitesWhereUniqueInput>
    disconnect?: Enumerable<GameInvitesWhereUniqueInput>
    delete?: Enumerable<GameInvitesWhereUniqueInput>
    connect?: Enumerable<GameInvitesWhereUniqueInput>
    update?: Enumerable<GameInvitesUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<GameInvitesUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<GameInvitesScalarWhereInput>
  }

  export type PrivateMessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<Enumerable<PrivateMessageCreateWithoutSenderInput>, Enumerable<PrivateMessageUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<PrivateMessageCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<PrivateMessageUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: PrivateMessageCreateManySenderInputEnvelope
    set?: Enumerable<PrivateMessageWhereUniqueInput>
    disconnect?: Enumerable<PrivateMessageWhereUniqueInput>
    delete?: Enumerable<PrivateMessageWhereUniqueInput>
    connect?: Enumerable<PrivateMessageWhereUniqueInput>
    update?: Enumerable<PrivateMessageUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<PrivateMessageUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<PrivateMessageScalarWhereInput>
  }

  export type PrivateMessageUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<Enumerable<PrivateMessageCreateWithoutReceiverInput>, Enumerable<PrivateMessageUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<PrivateMessageCreateOrConnectWithoutReceiverInput>
    upsert?: Enumerable<PrivateMessageUpsertWithWhereUniqueWithoutReceiverInput>
    createMany?: PrivateMessageCreateManyReceiverInputEnvelope
    set?: Enumerable<PrivateMessageWhereUniqueInput>
    disconnect?: Enumerable<PrivateMessageWhereUniqueInput>
    delete?: Enumerable<PrivateMessageWhereUniqueInput>
    connect?: Enumerable<PrivateMessageWhereUniqueInput>
    update?: Enumerable<PrivateMessageUpdateWithWhereUniqueWithoutReceiverInput>
    updateMany?: Enumerable<PrivateMessageUpdateManyWithWhereWithoutReceiverInput>
    deleteMany?: Enumerable<PrivateMessageScalarWhereInput>
  }

  export type PrivateChatRoomUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<Enumerable<PrivateChatRoomCreateWithoutSenderInput>, Enumerable<PrivateChatRoomUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<PrivateChatRoomCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<PrivateChatRoomUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: PrivateChatRoomCreateManySenderInputEnvelope
    set?: Enumerable<PrivateChatRoomWhereUniqueInput>
    disconnect?: Enumerable<PrivateChatRoomWhereUniqueInput>
    delete?: Enumerable<PrivateChatRoomWhereUniqueInput>
    connect?: Enumerable<PrivateChatRoomWhereUniqueInput>
    update?: Enumerable<PrivateChatRoomUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<PrivateChatRoomUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<PrivateChatRoomScalarWhereInput>
  }

  export type PrivateChatRoomUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<Enumerable<PrivateChatRoomCreateWithoutReceiverInput>, Enumerable<PrivateChatRoomUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<PrivateChatRoomCreateOrConnectWithoutReceiverInput>
    upsert?: Enumerable<PrivateChatRoomUpsertWithWhereUniqueWithoutReceiverInput>
    createMany?: PrivateChatRoomCreateManyReceiverInputEnvelope
    set?: Enumerable<PrivateChatRoomWhereUniqueInput>
    disconnect?: Enumerable<PrivateChatRoomWhereUniqueInput>
    delete?: Enumerable<PrivateChatRoomWhereUniqueInput>
    connect?: Enumerable<PrivateChatRoomWhereUniqueInput>
    update?: Enumerable<PrivateChatRoomUpdateWithWhereUniqueWithoutReceiverInput>
    updateMany?: Enumerable<PrivateChatRoomUpdateManyWithWhereWithoutReceiverInput>
    deleteMany?: Enumerable<PrivateChatRoomScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutFrendshipInvitesInput = {
    create?: XOR<UserCreateWithoutFrendshipInvitesInput, UserUncheckedCreateWithoutFrendshipInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFrendshipInvitesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumInviteStatusFieldUpdateOperationsInput = {
    set?: InviteStatus
  }

  export type UserUpdateOneRequiredWithoutFrendshipInvitesNestedInput = {
    create?: XOR<UserCreateWithoutFrendshipInvitesInput, UserUncheckedCreateWithoutFrendshipInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFrendshipInvitesInput
    upsert?: UserUpsertWithoutFrendshipInvitesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFrendshipInvitesInput, UserUncheckedUpdateWithoutFrendshipInvitesInput>
  }

  export type UserCreateNestedOneWithoutFriendsInput = {
    create?: XOR<UserCreateWithoutFriendsInput, UserUncheckedCreateWithoutFriendsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFriendsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFriendsNestedInput = {
    create?: XOR<UserCreateWithoutFriendsInput, UserUncheckedCreateWithoutFriendsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFriendsInput
    upsert?: UserUpsertWithoutFriendsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFriendsInput, UserUncheckedUpdateWithoutFriendsInput>
  }

  export type UserCreateNestedOneWithoutMsgSenderInput = {
    create?: XOR<UserCreateWithoutMsgSenderInput, UserUncheckedCreateWithoutMsgSenderInput>
    connectOrCreate?: UserCreateOrConnectWithoutMsgSenderInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMsgReceiverInput = {
    create?: XOR<UserCreateWithoutMsgReceiverInput, UserUncheckedCreateWithoutMsgReceiverInput>
    connectOrCreate?: UserCreateOrConnectWithoutMsgReceiverInput
    connect?: UserWhereUniqueInput
  }

  export type PrivateChatRoomCreateNestedOneWithoutMessagesInput = {
    create?: XOR<PrivateChatRoomCreateWithoutMessagesInput, PrivateChatRoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: PrivateChatRoomCreateOrConnectWithoutMessagesInput
    connect?: PrivateChatRoomWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMsgSenderNestedInput = {
    create?: XOR<UserCreateWithoutMsgSenderInput, UserUncheckedCreateWithoutMsgSenderInput>
    connectOrCreate?: UserCreateOrConnectWithoutMsgSenderInput
    upsert?: UserUpsertWithoutMsgSenderInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMsgSenderInput, UserUncheckedUpdateWithoutMsgSenderInput>
  }

  export type UserUpdateOneRequiredWithoutMsgReceiverNestedInput = {
    create?: XOR<UserCreateWithoutMsgReceiverInput, UserUncheckedCreateWithoutMsgReceiverInput>
    connectOrCreate?: UserCreateOrConnectWithoutMsgReceiverInput
    upsert?: UserUpsertWithoutMsgReceiverInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMsgReceiverInput, UserUncheckedUpdateWithoutMsgReceiverInput>
  }

  export type PrivateChatRoomUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<PrivateChatRoomCreateWithoutMessagesInput, PrivateChatRoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: PrivateChatRoomCreateOrConnectWithoutMessagesInput
    upsert?: PrivateChatRoomUpsertWithoutMessagesInput
    connect?: PrivateChatRoomWhereUniqueInput
    update?: XOR<PrivateChatRoomUpdateWithoutMessagesInput, PrivateChatRoomUncheckedUpdateWithoutMessagesInput>
  }

  export type PrivateMessageCreateNestedManyWithoutChatRoomInput = {
    create?: XOR<Enumerable<PrivateMessageCreateWithoutChatRoomInput>, Enumerable<PrivateMessageUncheckedCreateWithoutChatRoomInput>>
    connectOrCreate?: Enumerable<PrivateMessageCreateOrConnectWithoutChatRoomInput>
    createMany?: PrivateMessageCreateManyChatRoomInputEnvelope
    connect?: Enumerable<PrivateMessageWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutPrivateChatRoomSenderInput = {
    create?: XOR<UserCreateWithoutPrivateChatRoomSenderInput, UserUncheckedCreateWithoutPrivateChatRoomSenderInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrivateChatRoomSenderInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPrivateChatRoomReceiverInput = {
    create?: XOR<UserCreateWithoutPrivateChatRoomReceiverInput, UserUncheckedCreateWithoutPrivateChatRoomReceiverInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrivateChatRoomReceiverInput
    connect?: UserWhereUniqueInput
  }

  export type PrivateMessageUncheckedCreateNestedManyWithoutChatRoomInput = {
    create?: XOR<Enumerable<PrivateMessageCreateWithoutChatRoomInput>, Enumerable<PrivateMessageUncheckedCreateWithoutChatRoomInput>>
    connectOrCreate?: Enumerable<PrivateMessageCreateOrConnectWithoutChatRoomInput>
    createMany?: PrivateMessageCreateManyChatRoomInputEnvelope
    connect?: Enumerable<PrivateMessageWhereUniqueInput>
  }

  export type PrivateMessageUpdateManyWithoutChatRoomNestedInput = {
    create?: XOR<Enumerable<PrivateMessageCreateWithoutChatRoomInput>, Enumerable<PrivateMessageUncheckedCreateWithoutChatRoomInput>>
    connectOrCreate?: Enumerable<PrivateMessageCreateOrConnectWithoutChatRoomInput>
    upsert?: Enumerable<PrivateMessageUpsertWithWhereUniqueWithoutChatRoomInput>
    createMany?: PrivateMessageCreateManyChatRoomInputEnvelope
    set?: Enumerable<PrivateMessageWhereUniqueInput>
    disconnect?: Enumerable<PrivateMessageWhereUniqueInput>
    delete?: Enumerable<PrivateMessageWhereUniqueInput>
    connect?: Enumerable<PrivateMessageWhereUniqueInput>
    update?: Enumerable<PrivateMessageUpdateWithWhereUniqueWithoutChatRoomInput>
    updateMany?: Enumerable<PrivateMessageUpdateManyWithWhereWithoutChatRoomInput>
    deleteMany?: Enumerable<PrivateMessageScalarWhereInput>
  }

  export type UserUpdateOneRequiredWithoutPrivateChatRoomSenderNestedInput = {
    create?: XOR<UserCreateWithoutPrivateChatRoomSenderInput, UserUncheckedCreateWithoutPrivateChatRoomSenderInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrivateChatRoomSenderInput
    upsert?: UserUpsertWithoutPrivateChatRoomSenderInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPrivateChatRoomSenderInput, UserUncheckedUpdateWithoutPrivateChatRoomSenderInput>
  }

  export type UserUpdateOneRequiredWithoutPrivateChatRoomReceiverNestedInput = {
    create?: XOR<UserCreateWithoutPrivateChatRoomReceiverInput, UserUncheckedCreateWithoutPrivateChatRoomReceiverInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrivateChatRoomReceiverInput
    upsert?: UserUpsertWithoutPrivateChatRoomReceiverInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPrivateChatRoomReceiverInput, UserUncheckedUpdateWithoutPrivateChatRoomReceiverInput>
  }

  export type PrivateMessageUncheckedUpdateManyWithoutChatRoomNestedInput = {
    create?: XOR<Enumerable<PrivateMessageCreateWithoutChatRoomInput>, Enumerable<PrivateMessageUncheckedCreateWithoutChatRoomInput>>
    connectOrCreate?: Enumerable<PrivateMessageCreateOrConnectWithoutChatRoomInput>
    upsert?: Enumerable<PrivateMessageUpsertWithWhereUniqueWithoutChatRoomInput>
    createMany?: PrivateMessageCreateManyChatRoomInputEnvelope
    set?: Enumerable<PrivateMessageWhereUniqueInput>
    disconnect?: Enumerable<PrivateMessageWhereUniqueInput>
    delete?: Enumerable<PrivateMessageWhereUniqueInput>
    connect?: Enumerable<PrivateMessageWhereUniqueInput>
    update?: Enumerable<PrivateMessageUpdateWithWhereUniqueWithoutChatRoomInput>
    updateMany?: Enumerable<PrivateMessageUpdateManyWithWhereWithoutChatRoomInput>
    deleteMany?: Enumerable<PrivateMessageScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutBlockedUsersInput = {
    create?: XOR<UserCreateWithoutBlockedUsersInput, UserUncheckedCreateWithoutBlockedUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutBlockedUsersInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBlockedUsersNestedInput = {
    create?: XOR<UserCreateWithoutBlockedUsersInput, UserUncheckedCreateWithoutBlockedUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutBlockedUsersInput
    upsert?: UserUpsertWithoutBlockedUsersInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutBlockedUsersInput, UserUncheckedUpdateWithoutBlockedUsersInput>
  }

  export type UserCreateNestedOneWithoutChannelsJoinedInput = {
    create?: XOR<UserCreateWithoutChannelsJoinedInput, UserUncheckedCreateWithoutChannelsJoinedInput>
    connectOrCreate?: UserCreateOrConnectWithoutChannelsJoinedInput
    connect?: UserWhereUniqueInput
  }

  export type EnumChanRolesFieldUpdateOperationsInput = {
    set?: ChanRoles
  }

  export type UserUpdateOneRequiredWithoutChannelsJoinedNestedInput = {
    create?: XOR<UserCreateWithoutChannelsJoinedInput, UserUncheckedCreateWithoutChannelsJoinedInput>
    connectOrCreate?: UserCreateOrConnectWithoutChannelsJoinedInput
    upsert?: UserUpsertWithoutChannelsJoinedInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutChannelsJoinedInput, UserUncheckedUpdateWithoutChannelsJoinedInput>
  }

  export type MembersTabCreateNestedManyWithoutChannelInput = {
    create?: XOR<Enumerable<MembersTabCreateWithoutChannelInput>, Enumerable<MembersTabUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<MembersTabCreateOrConnectWithoutChannelInput>
    createMany?: MembersTabCreateManyChannelInputEnvelope
    connect?: Enumerable<MembersTabWhereUniqueInput>
  }

  export type MessageCreateNestedManyWithoutChannelInput = {
    create?: XOR<Enumerable<MessageCreateWithoutChannelInput>, Enumerable<MessageUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutChannelInput>
    createMany?: MessageCreateManyChannelInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type BannedMembersCreateNestedManyWithoutChannelInput = {
    create?: XOR<Enumerable<BannedMembersCreateWithoutChannelInput>, Enumerable<BannedMembersUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<BannedMembersCreateOrConnectWithoutChannelInput>
    createMany?: BannedMembersCreateManyChannelInputEnvelope
    connect?: Enumerable<BannedMembersWhereUniqueInput>
  }

  export type AdminMembersCreateNestedManyWithoutChannelInput = {
    create?: XOR<Enumerable<AdminMembersCreateWithoutChannelInput>, Enumerable<AdminMembersUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<AdminMembersCreateOrConnectWithoutChannelInput>
    createMany?: AdminMembersCreateManyChannelInputEnvelope
    connect?: Enumerable<AdminMembersWhereUniqueInput>
  }

  export type MutedMembersCreateNestedManyWithoutChannelInput = {
    create?: XOR<Enumerable<MutedMembersCreateWithoutChannelInput>, Enumerable<MutedMembersUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<MutedMembersCreateOrConnectWithoutChannelInput>
    createMany?: MutedMembersCreateManyChannelInputEnvelope
    connect?: Enumerable<MutedMembersWhereUniqueInput>
  }

  export type kickedMembersCreateNestedManyWithoutChannelInput = {
    create?: XOR<Enumerable<kickedMembersCreateWithoutChannelInput>, Enumerable<kickedMembersUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<kickedMembersCreateOrConnectWithoutChannelInput>
    createMany?: kickedMembersCreateManyChannelInputEnvelope
    connect?: Enumerable<kickedMembersWhereUniqueInput>
  }

  export type MembersTabUncheckedCreateNestedManyWithoutChannelInput = {
    create?: XOR<Enumerable<MembersTabCreateWithoutChannelInput>, Enumerable<MembersTabUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<MembersTabCreateOrConnectWithoutChannelInput>
    createMany?: MembersTabCreateManyChannelInputEnvelope
    connect?: Enumerable<MembersTabWhereUniqueInput>
  }

  export type MessageUncheckedCreateNestedManyWithoutChannelInput = {
    create?: XOR<Enumerable<MessageCreateWithoutChannelInput>, Enumerable<MessageUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutChannelInput>
    createMany?: MessageCreateManyChannelInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type BannedMembersUncheckedCreateNestedManyWithoutChannelInput = {
    create?: XOR<Enumerable<BannedMembersCreateWithoutChannelInput>, Enumerable<BannedMembersUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<BannedMembersCreateOrConnectWithoutChannelInput>
    createMany?: BannedMembersCreateManyChannelInputEnvelope
    connect?: Enumerable<BannedMembersWhereUniqueInput>
  }

  export type AdminMembersUncheckedCreateNestedManyWithoutChannelInput = {
    create?: XOR<Enumerable<AdminMembersCreateWithoutChannelInput>, Enumerable<AdminMembersUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<AdminMembersCreateOrConnectWithoutChannelInput>
    createMany?: AdminMembersCreateManyChannelInputEnvelope
    connect?: Enumerable<AdminMembersWhereUniqueInput>
  }

  export type MutedMembersUncheckedCreateNestedManyWithoutChannelInput = {
    create?: XOR<Enumerable<MutedMembersCreateWithoutChannelInput>, Enumerable<MutedMembersUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<MutedMembersCreateOrConnectWithoutChannelInput>
    createMany?: MutedMembersCreateManyChannelInputEnvelope
    connect?: Enumerable<MutedMembersWhereUniqueInput>
  }

  export type kickedMembersUncheckedCreateNestedManyWithoutChannelInput = {
    create?: XOR<Enumerable<kickedMembersCreateWithoutChannelInput>, Enumerable<kickedMembersUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<kickedMembersCreateOrConnectWithoutChannelInput>
    createMany?: kickedMembersCreateManyChannelInputEnvelope
    connect?: Enumerable<kickedMembersWhereUniqueInput>
  }

  export type EnumChanTypeFieldUpdateOperationsInput = {
    set?: ChanType
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MembersTabUpdateManyWithoutChannelNestedInput = {
    create?: XOR<Enumerable<MembersTabCreateWithoutChannelInput>, Enumerable<MembersTabUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<MembersTabCreateOrConnectWithoutChannelInput>
    upsert?: Enumerable<MembersTabUpsertWithWhereUniqueWithoutChannelInput>
    createMany?: MembersTabCreateManyChannelInputEnvelope
    set?: Enumerable<MembersTabWhereUniqueInput>
    disconnect?: Enumerable<MembersTabWhereUniqueInput>
    delete?: Enumerable<MembersTabWhereUniqueInput>
    connect?: Enumerable<MembersTabWhereUniqueInput>
    update?: Enumerable<MembersTabUpdateWithWhereUniqueWithoutChannelInput>
    updateMany?: Enumerable<MembersTabUpdateManyWithWhereWithoutChannelInput>
    deleteMany?: Enumerable<MembersTabScalarWhereInput>
  }

  export type MessageUpdateManyWithoutChannelNestedInput = {
    create?: XOR<Enumerable<MessageCreateWithoutChannelInput>, Enumerable<MessageUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutChannelInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutChannelInput>
    createMany?: MessageCreateManyChannelInputEnvelope
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutChannelInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutChannelInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type BannedMembersUpdateManyWithoutChannelNestedInput = {
    create?: XOR<Enumerable<BannedMembersCreateWithoutChannelInput>, Enumerable<BannedMembersUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<BannedMembersCreateOrConnectWithoutChannelInput>
    upsert?: Enumerable<BannedMembersUpsertWithWhereUniqueWithoutChannelInput>
    createMany?: BannedMembersCreateManyChannelInputEnvelope
    set?: Enumerable<BannedMembersWhereUniqueInput>
    disconnect?: Enumerable<BannedMembersWhereUniqueInput>
    delete?: Enumerable<BannedMembersWhereUniqueInput>
    connect?: Enumerable<BannedMembersWhereUniqueInput>
    update?: Enumerable<BannedMembersUpdateWithWhereUniqueWithoutChannelInput>
    updateMany?: Enumerable<BannedMembersUpdateManyWithWhereWithoutChannelInput>
    deleteMany?: Enumerable<BannedMembersScalarWhereInput>
  }

  export type AdminMembersUpdateManyWithoutChannelNestedInput = {
    create?: XOR<Enumerable<AdminMembersCreateWithoutChannelInput>, Enumerable<AdminMembersUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<AdminMembersCreateOrConnectWithoutChannelInput>
    upsert?: Enumerable<AdminMembersUpsertWithWhereUniqueWithoutChannelInput>
    createMany?: AdminMembersCreateManyChannelInputEnvelope
    set?: Enumerable<AdminMembersWhereUniqueInput>
    disconnect?: Enumerable<AdminMembersWhereUniqueInput>
    delete?: Enumerable<AdminMembersWhereUniqueInput>
    connect?: Enumerable<AdminMembersWhereUniqueInput>
    update?: Enumerable<AdminMembersUpdateWithWhereUniqueWithoutChannelInput>
    updateMany?: Enumerable<AdminMembersUpdateManyWithWhereWithoutChannelInput>
    deleteMany?: Enumerable<AdminMembersScalarWhereInput>
  }

  export type MutedMembersUpdateManyWithoutChannelNestedInput = {
    create?: XOR<Enumerable<MutedMembersCreateWithoutChannelInput>, Enumerable<MutedMembersUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<MutedMembersCreateOrConnectWithoutChannelInput>
    upsert?: Enumerable<MutedMembersUpsertWithWhereUniqueWithoutChannelInput>
    createMany?: MutedMembersCreateManyChannelInputEnvelope
    set?: Enumerable<MutedMembersWhereUniqueInput>
    disconnect?: Enumerable<MutedMembersWhereUniqueInput>
    delete?: Enumerable<MutedMembersWhereUniqueInput>
    connect?: Enumerable<MutedMembersWhereUniqueInput>
    update?: Enumerable<MutedMembersUpdateWithWhereUniqueWithoutChannelInput>
    updateMany?: Enumerable<MutedMembersUpdateManyWithWhereWithoutChannelInput>
    deleteMany?: Enumerable<MutedMembersScalarWhereInput>
  }

  export type kickedMembersUpdateManyWithoutChannelNestedInput = {
    create?: XOR<Enumerable<kickedMembersCreateWithoutChannelInput>, Enumerable<kickedMembersUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<kickedMembersCreateOrConnectWithoutChannelInput>
    upsert?: Enumerable<kickedMembersUpsertWithWhereUniqueWithoutChannelInput>
    createMany?: kickedMembersCreateManyChannelInputEnvelope
    set?: Enumerable<kickedMembersWhereUniqueInput>
    disconnect?: Enumerable<kickedMembersWhereUniqueInput>
    delete?: Enumerable<kickedMembersWhereUniqueInput>
    connect?: Enumerable<kickedMembersWhereUniqueInput>
    update?: Enumerable<kickedMembersUpdateWithWhereUniqueWithoutChannelInput>
    updateMany?: Enumerable<kickedMembersUpdateManyWithWhereWithoutChannelInput>
    deleteMany?: Enumerable<kickedMembersScalarWhereInput>
  }

  export type MembersTabUncheckedUpdateManyWithoutChannelNestedInput = {
    create?: XOR<Enumerable<MembersTabCreateWithoutChannelInput>, Enumerable<MembersTabUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<MembersTabCreateOrConnectWithoutChannelInput>
    upsert?: Enumerable<MembersTabUpsertWithWhereUniqueWithoutChannelInput>
    createMany?: MembersTabCreateManyChannelInputEnvelope
    set?: Enumerable<MembersTabWhereUniqueInput>
    disconnect?: Enumerable<MembersTabWhereUniqueInput>
    delete?: Enumerable<MembersTabWhereUniqueInput>
    connect?: Enumerable<MembersTabWhereUniqueInput>
    update?: Enumerable<MembersTabUpdateWithWhereUniqueWithoutChannelInput>
    updateMany?: Enumerable<MembersTabUpdateManyWithWhereWithoutChannelInput>
    deleteMany?: Enumerable<MembersTabScalarWhereInput>
  }

  export type MessageUncheckedUpdateManyWithoutChannelNestedInput = {
    create?: XOR<Enumerable<MessageCreateWithoutChannelInput>, Enumerable<MessageUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutChannelInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutChannelInput>
    createMany?: MessageCreateManyChannelInputEnvelope
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutChannelInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutChannelInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type BannedMembersUncheckedUpdateManyWithoutChannelNestedInput = {
    create?: XOR<Enumerable<BannedMembersCreateWithoutChannelInput>, Enumerable<BannedMembersUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<BannedMembersCreateOrConnectWithoutChannelInput>
    upsert?: Enumerable<BannedMembersUpsertWithWhereUniqueWithoutChannelInput>
    createMany?: BannedMembersCreateManyChannelInputEnvelope
    set?: Enumerable<BannedMembersWhereUniqueInput>
    disconnect?: Enumerable<BannedMembersWhereUniqueInput>
    delete?: Enumerable<BannedMembersWhereUniqueInput>
    connect?: Enumerable<BannedMembersWhereUniqueInput>
    update?: Enumerable<BannedMembersUpdateWithWhereUniqueWithoutChannelInput>
    updateMany?: Enumerable<BannedMembersUpdateManyWithWhereWithoutChannelInput>
    deleteMany?: Enumerable<BannedMembersScalarWhereInput>
  }

  export type AdminMembersUncheckedUpdateManyWithoutChannelNestedInput = {
    create?: XOR<Enumerable<AdminMembersCreateWithoutChannelInput>, Enumerable<AdminMembersUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<AdminMembersCreateOrConnectWithoutChannelInput>
    upsert?: Enumerable<AdminMembersUpsertWithWhereUniqueWithoutChannelInput>
    createMany?: AdminMembersCreateManyChannelInputEnvelope
    set?: Enumerable<AdminMembersWhereUniqueInput>
    disconnect?: Enumerable<AdminMembersWhereUniqueInput>
    delete?: Enumerable<AdminMembersWhereUniqueInput>
    connect?: Enumerable<AdminMembersWhereUniqueInput>
    update?: Enumerable<AdminMembersUpdateWithWhereUniqueWithoutChannelInput>
    updateMany?: Enumerable<AdminMembersUpdateManyWithWhereWithoutChannelInput>
    deleteMany?: Enumerable<AdminMembersScalarWhereInput>
  }

  export type MutedMembersUncheckedUpdateManyWithoutChannelNestedInput = {
    create?: XOR<Enumerable<MutedMembersCreateWithoutChannelInput>, Enumerable<MutedMembersUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<MutedMembersCreateOrConnectWithoutChannelInput>
    upsert?: Enumerable<MutedMembersUpsertWithWhereUniqueWithoutChannelInput>
    createMany?: MutedMembersCreateManyChannelInputEnvelope
    set?: Enumerable<MutedMembersWhereUniqueInput>
    disconnect?: Enumerable<MutedMembersWhereUniqueInput>
    delete?: Enumerable<MutedMembersWhereUniqueInput>
    connect?: Enumerable<MutedMembersWhereUniqueInput>
    update?: Enumerable<MutedMembersUpdateWithWhereUniqueWithoutChannelInput>
    updateMany?: Enumerable<MutedMembersUpdateManyWithWhereWithoutChannelInput>
    deleteMany?: Enumerable<MutedMembersScalarWhereInput>
  }

  export type kickedMembersUncheckedUpdateManyWithoutChannelNestedInput = {
    create?: XOR<Enumerable<kickedMembersCreateWithoutChannelInput>, Enumerable<kickedMembersUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<kickedMembersCreateOrConnectWithoutChannelInput>
    upsert?: Enumerable<kickedMembersUpsertWithWhereUniqueWithoutChannelInput>
    createMany?: kickedMembersCreateManyChannelInputEnvelope
    set?: Enumerable<kickedMembersWhereUniqueInput>
    disconnect?: Enumerable<kickedMembersWhereUniqueInput>
    delete?: Enumerable<kickedMembersWhereUniqueInput>
    connect?: Enumerable<kickedMembersWhereUniqueInput>
    update?: Enumerable<kickedMembersUpdateWithWhereUniqueWithoutChannelInput>
    updateMany?: Enumerable<kickedMembersUpdateManyWithWhereWithoutChannelInput>
    deleteMany?: Enumerable<kickedMembersScalarWhereInput>
  }

  export type ChannelCreateNestedOneWithoutMembersInput = {
    create?: XOR<ChannelCreateWithoutMembersInput, ChannelUncheckedCreateWithoutMembersInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMembersInput
    connect?: ChannelWhereUniqueInput
  }

  export type ChannelUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<ChannelCreateWithoutMembersInput, ChannelUncheckedCreateWithoutMembersInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMembersInput
    upsert?: ChannelUpsertWithoutMembersInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<ChannelUpdateWithoutMembersInput, ChannelUncheckedUpdateWithoutMembersInput>
  }

  export type ChannelCreateNestedOneWithoutBannedUsersInput = {
    create?: XOR<ChannelCreateWithoutBannedUsersInput, ChannelUncheckedCreateWithoutBannedUsersInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutBannedUsersInput
    connect?: ChannelWhereUniqueInput
  }

  export type NullableEnumMemeberStatusTimeFieldUpdateOperationsInput = {
    set?: MemeberStatusTime | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ChannelUpdateOneRequiredWithoutBannedUsersNestedInput = {
    create?: XOR<ChannelCreateWithoutBannedUsersInput, ChannelUncheckedCreateWithoutBannedUsersInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutBannedUsersInput
    upsert?: ChannelUpsertWithoutBannedUsersInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<ChannelUpdateWithoutBannedUsersInput, ChannelUncheckedUpdateWithoutBannedUsersInput>
  }

  export type ChannelCreateNestedOneWithoutAdminstratorsInput = {
    create?: XOR<ChannelCreateWithoutAdminstratorsInput, ChannelUncheckedCreateWithoutAdminstratorsInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutAdminstratorsInput
    connect?: ChannelWhereUniqueInput
  }

  export type ChannelUpdateOneRequiredWithoutAdminstratorsNestedInput = {
    create?: XOR<ChannelCreateWithoutAdminstratorsInput, ChannelUncheckedCreateWithoutAdminstratorsInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutAdminstratorsInput
    upsert?: ChannelUpsertWithoutAdminstratorsInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<ChannelUpdateWithoutAdminstratorsInput, ChannelUncheckedUpdateWithoutAdminstratorsInput>
  }

  export type ChannelCreateNestedOneWithoutKickedMembersInput = {
    create?: XOR<ChannelCreateWithoutKickedMembersInput, ChannelUncheckedCreateWithoutKickedMembersInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutKickedMembersInput
    connect?: ChannelWhereUniqueInput
  }

  export type ChannelUpdateOneRequiredWithoutKickedMembersNestedInput = {
    create?: XOR<ChannelCreateWithoutKickedMembersInput, ChannelUncheckedCreateWithoutKickedMembersInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutKickedMembersInput
    upsert?: ChannelUpsertWithoutKickedMembersInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<ChannelUpdateWithoutKickedMembersInput, ChannelUncheckedUpdateWithoutKickedMembersInput>
  }

  export type ChannelCreateNestedOneWithoutMutedMembersInput = {
    create?: XOR<ChannelCreateWithoutMutedMembersInput, ChannelUncheckedCreateWithoutMutedMembersInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMutedMembersInput
    connect?: ChannelWhereUniqueInput
  }

  export type ChannelUpdateOneRequiredWithoutMutedMembersNestedInput = {
    create?: XOR<ChannelCreateWithoutMutedMembersInput, ChannelUncheckedCreateWithoutMutedMembersInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMutedMembersInput
    upsert?: ChannelUpsertWithoutMutedMembersInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<ChannelUpdateWithoutMutedMembersInput, ChannelUncheckedUpdateWithoutMutedMembersInput>
  }

  export type ChannelCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMessagesInput
    connect?: ChannelWhereUniqueInput
  }

  export type ChannelUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMessagesInput
    upsert?: ChannelUpsertWithoutMessagesInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<ChannelUpdateWithoutMessagesInput, ChannelUncheckedUpdateWithoutMessagesInput>
  }

  export type UserCreateNestedOneWithoutNotificationInput = {
    create?: XOR<UserCreateWithoutNotificationInput, UserUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationNestedInput = {
    create?: XOR<UserCreateWithoutNotificationInput, UserUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationInput
    upsert?: UserUpsertWithoutNotificationInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutNotificationInput, UserUncheckedUpdateWithoutNotificationInput>
  }

  export type GameHistoryTabCreateNestedManyWithoutGameInput = {
    create?: XOR<Enumerable<GameHistoryTabCreateWithoutGameInput>, Enumerable<GameHistoryTabUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<GameHistoryTabCreateOrConnectWithoutGameInput>
    createMany?: GameHistoryTabCreateManyGameInputEnvelope
    connect?: Enumerable<GameHistoryTabWhereUniqueInput>
  }

  export type GameHistoryTabUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<Enumerable<GameHistoryTabCreateWithoutGameInput>, Enumerable<GameHistoryTabUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<GameHistoryTabCreateOrConnectWithoutGameInput>
    createMany?: GameHistoryTabCreateManyGameInputEnvelope
    connect?: Enumerable<GameHistoryTabWhereUniqueInput>
  }

  export type EnumGameStatusFieldUpdateOperationsInput = {
    set?: GameStatus
  }

  export type GameHistoryTabUpdateManyWithoutGameNestedInput = {
    create?: XOR<Enumerable<GameHistoryTabCreateWithoutGameInput>, Enumerable<GameHistoryTabUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<GameHistoryTabCreateOrConnectWithoutGameInput>
    upsert?: Enumerable<GameHistoryTabUpsertWithWhereUniqueWithoutGameInput>
    createMany?: GameHistoryTabCreateManyGameInputEnvelope
    set?: Enumerable<GameHistoryTabWhereUniqueInput>
    disconnect?: Enumerable<GameHistoryTabWhereUniqueInput>
    delete?: Enumerable<GameHistoryTabWhereUniqueInput>
    connect?: Enumerable<GameHistoryTabWhereUniqueInput>
    update?: Enumerable<GameHistoryTabUpdateWithWhereUniqueWithoutGameInput>
    updateMany?: Enumerable<GameHistoryTabUpdateManyWithWhereWithoutGameInput>
    deleteMany?: Enumerable<GameHistoryTabScalarWhereInput>
  }

  export type GameHistoryTabUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<Enumerable<GameHistoryTabCreateWithoutGameInput>, Enumerable<GameHistoryTabUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<GameHistoryTabCreateOrConnectWithoutGameInput>
    upsert?: Enumerable<GameHistoryTabUpsertWithWhereUniqueWithoutGameInput>
    createMany?: GameHistoryTabCreateManyGameInputEnvelope
    set?: Enumerable<GameHistoryTabWhereUniqueInput>
    disconnect?: Enumerable<GameHistoryTabWhereUniqueInput>
    delete?: Enumerable<GameHistoryTabWhereUniqueInput>
    connect?: Enumerable<GameHistoryTabWhereUniqueInput>
    update?: Enumerable<GameHistoryTabUpdateWithWhereUniqueWithoutGameInput>
    updateMany?: Enumerable<GameHistoryTabUpdateManyWithWhereWithoutGameInput>
    deleteMany?: Enumerable<GameHistoryTabScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutGameInvitesInput = {
    create?: XOR<UserCreateWithoutGameInvitesInput, UserUncheckedCreateWithoutGameInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameInvitesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutGameInvitesNestedInput = {
    create?: XOR<UserCreateWithoutGameInvitesInput, UserUncheckedCreateWithoutGameInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameInvitesInput
    upsert?: UserUpsertWithoutGameInvitesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutGameInvitesInput, UserUncheckedUpdateWithoutGameInvitesInput>
  }

  export type UserCreateNestedOneWithoutRankingDataInput = {
    create?: XOR<UserCreateWithoutRankingDataInput, UserUncheckedCreateWithoutRankingDataInput>
    connectOrCreate?: UserCreateOrConnectWithoutRankingDataInput
    connect?: UserWhereUniqueInput
  }

  export type AchievementsAssignementCreateNestedManyWithoutPlayerInput = {
    create?: XOR<Enumerable<AchievementsAssignementCreateWithoutPlayerInput>, Enumerable<AchievementsAssignementUncheckedCreateWithoutPlayerInput>>
    connectOrCreate?: Enumerable<AchievementsAssignementCreateOrConnectWithoutPlayerInput>
    createMany?: AchievementsAssignementCreateManyPlayerInputEnvelope
    connect?: Enumerable<AchievementsAssignementWhereUniqueInput>
  }

  export type AchievementsAssignementUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<Enumerable<AchievementsAssignementCreateWithoutPlayerInput>, Enumerable<AchievementsAssignementUncheckedCreateWithoutPlayerInput>>
    connectOrCreate?: Enumerable<AchievementsAssignementCreateOrConnectWithoutPlayerInput>
    createMany?: AchievementsAssignementCreateManyPlayerInputEnvelope
    connect?: Enumerable<AchievementsAssignementWhereUniqueInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumRankFieldUpdateOperationsInput = {
    set?: Rank
  }

  export type UserUpdateOneRequiredWithoutRankingDataNestedInput = {
    create?: XOR<UserCreateWithoutRankingDataInput, UserUncheckedCreateWithoutRankingDataInput>
    connectOrCreate?: UserCreateOrConnectWithoutRankingDataInput
    upsert?: UserUpsertWithoutRankingDataInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRankingDataInput, UserUncheckedUpdateWithoutRankingDataInput>
  }

  export type AchievementsAssignementUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<Enumerable<AchievementsAssignementCreateWithoutPlayerInput>, Enumerable<AchievementsAssignementUncheckedCreateWithoutPlayerInput>>
    connectOrCreate?: Enumerable<AchievementsAssignementCreateOrConnectWithoutPlayerInput>
    upsert?: Enumerable<AchievementsAssignementUpsertWithWhereUniqueWithoutPlayerInput>
    createMany?: AchievementsAssignementCreateManyPlayerInputEnvelope
    set?: Enumerable<AchievementsAssignementWhereUniqueInput>
    disconnect?: Enumerable<AchievementsAssignementWhereUniqueInput>
    delete?: Enumerable<AchievementsAssignementWhereUniqueInput>
    connect?: Enumerable<AchievementsAssignementWhereUniqueInput>
    update?: Enumerable<AchievementsAssignementUpdateWithWhereUniqueWithoutPlayerInput>
    updateMany?: Enumerable<AchievementsAssignementUpdateManyWithWhereWithoutPlayerInput>
    deleteMany?: Enumerable<AchievementsAssignementScalarWhereInput>
  }

  export type AchievementsAssignementUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<Enumerable<AchievementsAssignementCreateWithoutPlayerInput>, Enumerable<AchievementsAssignementUncheckedCreateWithoutPlayerInput>>
    connectOrCreate?: Enumerable<AchievementsAssignementCreateOrConnectWithoutPlayerInput>
    upsert?: Enumerable<AchievementsAssignementUpsertWithWhereUniqueWithoutPlayerInput>
    createMany?: AchievementsAssignementCreateManyPlayerInputEnvelope
    set?: Enumerable<AchievementsAssignementWhereUniqueInput>
    disconnect?: Enumerable<AchievementsAssignementWhereUniqueInput>
    delete?: Enumerable<AchievementsAssignementWhereUniqueInput>
    connect?: Enumerable<AchievementsAssignementWhereUniqueInput>
    update?: Enumerable<AchievementsAssignementUpdateWithWhereUniqueWithoutPlayerInput>
    updateMany?: Enumerable<AchievementsAssignementUpdateManyWithWhereWithoutPlayerInput>
    deleteMany?: Enumerable<AchievementsAssignementScalarWhereInput>
  }

  export type AchievementsAssignementCreateNestedManyWithoutAchievementInput = {
    create?: XOR<Enumerable<AchievementsAssignementCreateWithoutAchievementInput>, Enumerable<AchievementsAssignementUncheckedCreateWithoutAchievementInput>>
    connectOrCreate?: Enumerable<AchievementsAssignementCreateOrConnectWithoutAchievementInput>
    createMany?: AchievementsAssignementCreateManyAchievementInputEnvelope
    connect?: Enumerable<AchievementsAssignementWhereUniqueInput>
  }

  export type AchievementsAssignementUncheckedCreateNestedManyWithoutAchievementInput = {
    create?: XOR<Enumerable<AchievementsAssignementCreateWithoutAchievementInput>, Enumerable<AchievementsAssignementUncheckedCreateWithoutAchievementInput>>
    connectOrCreate?: Enumerable<AchievementsAssignementCreateOrConnectWithoutAchievementInput>
    createMany?: AchievementsAssignementCreateManyAchievementInputEnvelope
    connect?: Enumerable<AchievementsAssignementWhereUniqueInput>
  }

  export type AchievementsAssignementUpdateManyWithoutAchievementNestedInput = {
    create?: XOR<Enumerable<AchievementsAssignementCreateWithoutAchievementInput>, Enumerable<AchievementsAssignementUncheckedCreateWithoutAchievementInput>>
    connectOrCreate?: Enumerable<AchievementsAssignementCreateOrConnectWithoutAchievementInput>
    upsert?: Enumerable<AchievementsAssignementUpsertWithWhereUniqueWithoutAchievementInput>
    createMany?: AchievementsAssignementCreateManyAchievementInputEnvelope
    set?: Enumerable<AchievementsAssignementWhereUniqueInput>
    disconnect?: Enumerable<AchievementsAssignementWhereUniqueInput>
    delete?: Enumerable<AchievementsAssignementWhereUniqueInput>
    connect?: Enumerable<AchievementsAssignementWhereUniqueInput>
    update?: Enumerable<AchievementsAssignementUpdateWithWhereUniqueWithoutAchievementInput>
    updateMany?: Enumerable<AchievementsAssignementUpdateManyWithWhereWithoutAchievementInput>
    deleteMany?: Enumerable<AchievementsAssignementScalarWhereInput>
  }

  export type AchievementsAssignementUncheckedUpdateManyWithoutAchievementNestedInput = {
    create?: XOR<Enumerable<AchievementsAssignementCreateWithoutAchievementInput>, Enumerable<AchievementsAssignementUncheckedCreateWithoutAchievementInput>>
    connectOrCreate?: Enumerable<AchievementsAssignementCreateOrConnectWithoutAchievementInput>
    upsert?: Enumerable<AchievementsAssignementUpsertWithWhereUniqueWithoutAchievementInput>
    createMany?: AchievementsAssignementCreateManyAchievementInputEnvelope
    set?: Enumerable<AchievementsAssignementWhereUniqueInput>
    disconnect?: Enumerable<AchievementsAssignementWhereUniqueInput>
    delete?: Enumerable<AchievementsAssignementWhereUniqueInput>
    connect?: Enumerable<AchievementsAssignementWhereUniqueInput>
    update?: Enumerable<AchievementsAssignementUpdateWithWhereUniqueWithoutAchievementInput>
    updateMany?: Enumerable<AchievementsAssignementUpdateManyWithWhereWithoutAchievementInput>
    deleteMany?: Enumerable<AchievementsAssignementScalarWhereInput>
  }

  export type AchievementsCreateNestedOneWithoutAchievements_assignementInput = {
    create?: XOR<AchievementsCreateWithoutAchievements_assignementInput, AchievementsUncheckedCreateWithoutAchievements_assignementInput>
    connectOrCreate?: AchievementsCreateOrConnectWithoutAchievements_assignementInput
    connect?: AchievementsWhereUniqueInput
  }

  export type RankingDataCreateNestedOneWithoutAchievements_assignementInput = {
    create?: XOR<RankingDataCreateWithoutAchievements_assignementInput, RankingDataUncheckedCreateWithoutAchievements_assignementInput>
    connectOrCreate?: RankingDataCreateOrConnectWithoutAchievements_assignementInput
    connect?: RankingDataWhereUniqueInput
  }

  export type AchievementsUpdateOneRequiredWithoutAchievements_assignementNestedInput = {
    create?: XOR<AchievementsCreateWithoutAchievements_assignementInput, AchievementsUncheckedCreateWithoutAchievements_assignementInput>
    connectOrCreate?: AchievementsCreateOrConnectWithoutAchievements_assignementInput
    upsert?: AchievementsUpsertWithoutAchievements_assignementInput
    connect?: AchievementsWhereUniqueInput
    update?: XOR<AchievementsUpdateWithoutAchievements_assignementInput, AchievementsUncheckedUpdateWithoutAchievements_assignementInput>
  }

  export type RankingDataUpdateOneRequiredWithoutAchievements_assignementNestedInput = {
    create?: XOR<RankingDataCreateWithoutAchievements_assignementInput, RankingDataUncheckedCreateWithoutAchievements_assignementInput>
    connectOrCreate?: RankingDataCreateOrConnectWithoutAchievements_assignementInput
    upsert?: RankingDataUpsertWithoutAchievements_assignementInput
    connect?: RankingDataWhereUniqueInput
    update?: XOR<RankingDataUpdateWithoutAchievements_assignementInput, RankingDataUncheckedUpdateWithoutAchievements_assignementInput>
  }

  export type GameCreateNestedOneWithoutGameHistoryInput = {
    create?: XOR<GameCreateWithoutGameHistoryInput, GameUncheckedCreateWithoutGameHistoryInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameHistoryInput
    connect?: GameWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGameHistoryInput = {
    create?: XOR<UserCreateWithoutGameHistoryInput, UserUncheckedCreateWithoutGameHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type GameUpdateOneRequiredWithoutGameHistoryNestedInput = {
    create?: XOR<GameCreateWithoutGameHistoryInput, GameUncheckedCreateWithoutGameHistoryInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameHistoryInput
    upsert?: GameUpsertWithoutGameHistoryInput
    connect?: GameWhereUniqueInput
    update?: XOR<GameUpdateWithoutGameHistoryInput, GameUncheckedUpdateWithoutGameHistoryInput>
  }

  export type UserUpdateOneRequiredWithoutGameHistoryNestedInput = {
    create?: XOR<UserCreateWithoutGameHistoryInput, UserUncheckedCreateWithoutGameHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameHistoryInput
    upsert?: UserUpsertWithoutGameHistoryInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutGameHistoryInput, UserUncheckedUpdateWithoutGameHistoryInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumStatusFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusFilter | Status
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumStatusWithAggregatesFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusWithAggregatesFilter | Status
    _count?: NestedIntFilter
    _min?: NestedEnumStatusFilter
    _max?: NestedEnumStatusFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumInviteStatusFilter = {
    equals?: InviteStatus
    in?: Enumerable<InviteStatus>
    notIn?: Enumerable<InviteStatus>
    not?: NestedEnumInviteStatusFilter | InviteStatus
  }

  export type NestedEnumInviteStatusWithAggregatesFilter = {
    equals?: InviteStatus
    in?: Enumerable<InviteStatus>
    notIn?: Enumerable<InviteStatus>
    not?: NestedEnumInviteStatusWithAggregatesFilter | InviteStatus
    _count?: NestedIntFilter
    _min?: NestedEnumInviteStatusFilter
    _max?: NestedEnumInviteStatusFilter
  }

  export type NestedEnumChanRolesFilter = {
    equals?: ChanRoles
    in?: Enumerable<ChanRoles>
    notIn?: Enumerable<ChanRoles>
    not?: NestedEnumChanRolesFilter | ChanRoles
  }

  export type NestedEnumChanRolesWithAggregatesFilter = {
    equals?: ChanRoles
    in?: Enumerable<ChanRoles>
    notIn?: Enumerable<ChanRoles>
    not?: NestedEnumChanRolesWithAggregatesFilter | ChanRoles
    _count?: NestedIntFilter
    _min?: NestedEnumChanRolesFilter
    _max?: NestedEnumChanRolesFilter
  }

  export type NestedEnumChanTypeFilter = {
    equals?: ChanType
    in?: Enumerable<ChanType>
    notIn?: Enumerable<ChanType>
    not?: NestedEnumChanTypeFilter | ChanType
  }

  export type NestedEnumChanTypeWithAggregatesFilter = {
    equals?: ChanType
    in?: Enumerable<ChanType>
    notIn?: Enumerable<ChanType>
    not?: NestedEnumChanTypeWithAggregatesFilter | ChanType
    _count?: NestedIntFilter
    _min?: NestedEnumChanTypeFilter
    _max?: NestedEnumChanTypeFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedEnumMemeberStatusTimeNullableFilter = {
    equals?: MemeberStatusTime | null
    in?: Enumerable<MemeberStatusTime> | null
    notIn?: Enumerable<MemeberStatusTime> | null
    not?: NestedEnumMemeberStatusTimeNullableFilter | MemeberStatusTime | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedEnumMemeberStatusTimeNullableWithAggregatesFilter = {
    equals?: MemeberStatusTime | null
    in?: Enumerable<MemeberStatusTime> | null
    notIn?: Enumerable<MemeberStatusTime> | null
    not?: NestedEnumMemeberStatusTimeNullableWithAggregatesFilter | MemeberStatusTime | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumMemeberStatusTimeNullableFilter
    _max?: NestedEnumMemeberStatusTimeNullableFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedEnumGameStatusFilter = {
    equals?: GameStatus
    in?: Enumerable<GameStatus>
    notIn?: Enumerable<GameStatus>
    not?: NestedEnumGameStatusFilter | GameStatus
  }

  export type NestedEnumGameStatusWithAggregatesFilter = {
    equals?: GameStatus
    in?: Enumerable<GameStatus>
    notIn?: Enumerable<GameStatus>
    not?: NestedEnumGameStatusWithAggregatesFilter | GameStatus
    _count?: NestedIntFilter
    _min?: NestedEnumGameStatusFilter
    _max?: NestedEnumGameStatusFilter
  }

  export type NestedEnumRankFilter = {
    equals?: Rank
    in?: Enumerable<Rank>
    notIn?: Enumerable<Rank>
    not?: NestedEnumRankFilter | Rank
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedEnumRankWithAggregatesFilter = {
    equals?: Rank
    in?: Enumerable<Rank>
    notIn?: Enumerable<Rank>
    not?: NestedEnumRankWithAggregatesFilter | Rank
    _count?: NestedIntFilter
    _min?: NestedEnumRankFilter
    _max?: NestedEnumRankFilter
  }

  export type FriendsTabCreateWithoutUserInput = {
    friendUser_id: string
  }

  export type FriendsTabUncheckedCreateWithoutUserInput = {
    friendUser_id: string
  }

  export type FriendsTabCreateOrConnectWithoutUserInput = {
    where: FriendsTabWhereUniqueInput
    create: XOR<FriendsTabCreateWithoutUserInput, FriendsTabUncheckedCreateWithoutUserInput>
  }

  export type FriendsTabCreateManyUserInputEnvelope = {
    data: Enumerable<FriendsTabCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type BlockTabCreateWithoutUserInput = {
    blockedUser_id: string
    uuid?: string
  }

  export type BlockTabUncheckedCreateWithoutUserInput = {
    blockedUser_id: string
    uuid?: string
  }

  export type BlockTabCreateOrConnectWithoutUserInput = {
    where: BlockTabWhereUniqueInput
    create: XOR<BlockTabCreateWithoutUserInput, BlockTabUncheckedCreateWithoutUserInput>
  }

  export type BlockTabCreateManyUserInputEnvelope = {
    data: Enumerable<BlockTabCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ChannelsJoinTabCreateWithoutUserInput = {
    channel_id: string
    channel_name: string
    role: ChanRoles
  }

  export type ChannelsJoinTabUncheckedCreateWithoutUserInput = {
    channel_id: string
    channel_name: string
    role: ChanRoles
  }

  export type ChannelsJoinTabCreateOrConnectWithoutUserInput = {
    where: ChannelsJoinTabWhereUniqueInput
    create: XOR<ChannelsJoinTabCreateWithoutUserInput, ChannelsJoinTabUncheckedCreateWithoutUserInput>
  }

  export type ChannelsJoinTabCreateManyUserInputEnvelope = {
    data: Enumerable<ChannelsJoinTabCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type GameHistoryTabCreateWithoutUserInput = {
    game: GameCreateNestedOneWithoutGameHistoryInput
  }

  export type GameHistoryTabUncheckedCreateWithoutUserInput = {
    game_id: string
  }

  export type GameHistoryTabCreateOrConnectWithoutUserInput = {
    where: GameHistoryTabWhereUniqueInput
    create: XOR<GameHistoryTabCreateWithoutUserInput, GameHistoryTabUncheckedCreateWithoutUserInput>
  }

  export type GameHistoryTabCreateManyUserInputEnvelope = {
    data: Enumerable<GameHistoryTabCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type RankingDataCreateWithoutUserInput = {
    games?: number
    wins?: number
    loses?: number
    draws?: number
    xp?: number
    winning_streak?: number
    losing_streak?: number
    points?: number
    rank?: Rank
    achievements_assignement?: AchievementsAssignementCreateNestedManyWithoutPlayerInput
  }

  export type RankingDataUncheckedCreateWithoutUserInput = {
    games?: number
    wins?: number
    loses?: number
    draws?: number
    xp?: number
    winning_streak?: number
    losing_streak?: number
    points?: number
    rank?: Rank
    achievements_assignement?: AchievementsAssignementUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type RankingDataCreateOrConnectWithoutUserInput = {
    where: RankingDataWhereUniqueInput
    create: XOR<RankingDataCreateWithoutUserInput, RankingDataUncheckedCreateWithoutUserInput>
  }

  export type RankingDataCreateManyUserInputEnvelope = {
    data: Enumerable<RankingDataCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    user_id: string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    user_id: string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: Enumerable<NotificationCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type FriendshipInvitesCreateWithoutSenderInput = {
    receiver_id: string
    status?: InviteStatus
    createdAt?: Date | string
  }

  export type FriendshipInvitesUncheckedCreateWithoutSenderInput = {
    receiver_id: string
    status?: InviteStatus
    createdAt?: Date | string
  }

  export type FriendshipInvitesCreateOrConnectWithoutSenderInput = {
    where: FriendshipInvitesWhereUniqueInput
    create: XOR<FriendshipInvitesCreateWithoutSenderInput, FriendshipInvitesUncheckedCreateWithoutSenderInput>
  }

  export type FriendshipInvitesCreateManySenderInputEnvelope = {
    data: Enumerable<FriendshipInvitesCreateManySenderInput>
    skipDuplicates?: boolean
  }

  export type GameInvitesCreateWithoutSenderInput = {
    receiver_id: string
    status?: InviteStatus
    validUntil: Date | string
  }

  export type GameInvitesUncheckedCreateWithoutSenderInput = {
    receiver_id: string
    status?: InviteStatus
    validUntil: Date | string
  }

  export type GameInvitesCreateOrConnectWithoutSenderInput = {
    where: GameInvitesWhereUniqueInput
    create: XOR<GameInvitesCreateWithoutSenderInput, GameInvitesUncheckedCreateWithoutSenderInput>
  }

  export type GameInvitesCreateManySenderInputEnvelope = {
    data: Enumerable<GameInvitesCreateManySenderInput>
    skipDuplicates?: boolean
  }

  export type PrivateMessageCreateWithoutSenderInput = {
    id?: string
    dateCreated?: Date | string
    content: string
    seen?: boolean
    receiver: UserCreateNestedOneWithoutMsgReceiverInput
    chatRoom: PrivateChatRoomCreateNestedOneWithoutMessagesInput
  }

  export type PrivateMessageUncheckedCreateWithoutSenderInput = {
    id?: string
    dateCreated?: Date | string
    content: string
    seen?: boolean
    chatRoom_id: string
    receiver_id: string
  }

  export type PrivateMessageCreateOrConnectWithoutSenderInput = {
    where: PrivateMessageWhereUniqueInput
    create: XOR<PrivateMessageCreateWithoutSenderInput, PrivateMessageUncheckedCreateWithoutSenderInput>
  }

  export type PrivateMessageCreateManySenderInputEnvelope = {
    data: Enumerable<PrivateMessageCreateManySenderInput>
    skipDuplicates?: boolean
  }

  export type PrivateMessageCreateWithoutReceiverInput = {
    id?: string
    dateCreated?: Date | string
    content: string
    seen?: boolean
    sender: UserCreateNestedOneWithoutMsgSenderInput
    chatRoom: PrivateChatRoomCreateNestedOneWithoutMessagesInput
  }

  export type PrivateMessageUncheckedCreateWithoutReceiverInput = {
    id?: string
    dateCreated?: Date | string
    content: string
    seen?: boolean
    chatRoom_id: string
    sender_id: string
  }

  export type PrivateMessageCreateOrConnectWithoutReceiverInput = {
    where: PrivateMessageWhereUniqueInput
    create: XOR<PrivateMessageCreateWithoutReceiverInput, PrivateMessageUncheckedCreateWithoutReceiverInput>
  }

  export type PrivateMessageCreateManyReceiverInputEnvelope = {
    data: Enumerable<PrivateMessageCreateManyReceiverInput>
    skipDuplicates?: boolean
  }

  export type PrivateChatRoomCreateWithoutSenderInput = {
    id: string
    lastUpdatedTime?: Date | string
    blocked?: boolean
    messages?: PrivateMessageCreateNestedManyWithoutChatRoomInput
    receiver: UserCreateNestedOneWithoutPrivateChatRoomReceiverInput
  }

  export type PrivateChatRoomUncheckedCreateWithoutSenderInput = {
    id: string
    receiver_id: string
    lastUpdatedTime?: Date | string
    blocked?: boolean
    messages?: PrivateMessageUncheckedCreateNestedManyWithoutChatRoomInput
  }

  export type PrivateChatRoomCreateOrConnectWithoutSenderInput = {
    where: PrivateChatRoomWhereUniqueInput
    create: XOR<PrivateChatRoomCreateWithoutSenderInput, PrivateChatRoomUncheckedCreateWithoutSenderInput>
  }

  export type PrivateChatRoomCreateManySenderInputEnvelope = {
    data: Enumerable<PrivateChatRoomCreateManySenderInput>
    skipDuplicates?: boolean
  }

  export type PrivateChatRoomCreateWithoutReceiverInput = {
    id: string
    lastUpdatedTime?: Date | string
    blocked?: boolean
    messages?: PrivateMessageCreateNestedManyWithoutChatRoomInput
    sender: UserCreateNestedOneWithoutPrivateChatRoomSenderInput
  }

  export type PrivateChatRoomUncheckedCreateWithoutReceiverInput = {
    id: string
    sender_id: string
    lastUpdatedTime?: Date | string
    blocked?: boolean
    messages?: PrivateMessageUncheckedCreateNestedManyWithoutChatRoomInput
  }

  export type PrivateChatRoomCreateOrConnectWithoutReceiverInput = {
    where: PrivateChatRoomWhereUniqueInput
    create: XOR<PrivateChatRoomCreateWithoutReceiverInput, PrivateChatRoomUncheckedCreateWithoutReceiverInput>
  }

  export type PrivateChatRoomCreateManyReceiverInputEnvelope = {
    data: Enumerable<PrivateChatRoomCreateManyReceiverInput>
    skipDuplicates?: boolean
  }

  export type FriendsTabUpsertWithWhereUniqueWithoutUserInput = {
    where: FriendsTabWhereUniqueInput
    update: XOR<FriendsTabUpdateWithoutUserInput, FriendsTabUncheckedUpdateWithoutUserInput>
    create: XOR<FriendsTabCreateWithoutUserInput, FriendsTabUncheckedCreateWithoutUserInput>
  }

  export type FriendsTabUpdateWithWhereUniqueWithoutUserInput = {
    where: FriendsTabWhereUniqueInput
    data: XOR<FriendsTabUpdateWithoutUserInput, FriendsTabUncheckedUpdateWithoutUserInput>
  }

  export type FriendsTabUpdateManyWithWhereWithoutUserInput = {
    where: FriendsTabScalarWhereInput
    data: XOR<FriendsTabUpdateManyMutationInput, FriendsTabUncheckedUpdateManyWithoutFriendsInput>
  }

  export type FriendsTabScalarWhereInput = {
    AND?: Enumerable<FriendsTabScalarWhereInput>
    OR?: Enumerable<FriendsTabScalarWhereInput>
    NOT?: Enumerable<FriendsTabScalarWhereInput>
    user_id?: StringFilter | string
    friendUser_id?: StringFilter | string
  }

  export type BlockTabUpsertWithWhereUniqueWithoutUserInput = {
    where: BlockTabWhereUniqueInput
    update: XOR<BlockTabUpdateWithoutUserInput, BlockTabUncheckedUpdateWithoutUserInput>
    create: XOR<BlockTabCreateWithoutUserInput, BlockTabUncheckedCreateWithoutUserInput>
  }

  export type BlockTabUpdateWithWhereUniqueWithoutUserInput = {
    where: BlockTabWhereUniqueInput
    data: XOR<BlockTabUpdateWithoutUserInput, BlockTabUncheckedUpdateWithoutUserInput>
  }

  export type BlockTabUpdateManyWithWhereWithoutUserInput = {
    where: BlockTabScalarWhereInput
    data: XOR<BlockTabUpdateManyMutationInput, BlockTabUncheckedUpdateManyWithoutBlockedUsersInput>
  }

  export type BlockTabScalarWhereInput = {
    AND?: Enumerable<BlockTabScalarWhereInput>
    OR?: Enumerable<BlockTabScalarWhereInput>
    NOT?: Enumerable<BlockTabScalarWhereInput>
    user_id?: StringFilter | string
    blockedUser_id?: StringFilter | string
    uuid?: StringFilter | string
  }

  export type ChannelsJoinTabUpsertWithWhereUniqueWithoutUserInput = {
    where: ChannelsJoinTabWhereUniqueInput
    update: XOR<ChannelsJoinTabUpdateWithoutUserInput, ChannelsJoinTabUncheckedUpdateWithoutUserInput>
    create: XOR<ChannelsJoinTabCreateWithoutUserInput, ChannelsJoinTabUncheckedCreateWithoutUserInput>
  }

  export type ChannelsJoinTabUpdateWithWhereUniqueWithoutUserInput = {
    where: ChannelsJoinTabWhereUniqueInput
    data: XOR<ChannelsJoinTabUpdateWithoutUserInput, ChannelsJoinTabUncheckedUpdateWithoutUserInput>
  }

  export type ChannelsJoinTabUpdateManyWithWhereWithoutUserInput = {
    where: ChannelsJoinTabScalarWhereInput
    data: XOR<ChannelsJoinTabUpdateManyMutationInput, ChannelsJoinTabUncheckedUpdateManyWithoutChannelsJoinedInput>
  }

  export type ChannelsJoinTabScalarWhereInput = {
    AND?: Enumerable<ChannelsJoinTabScalarWhereInput>
    OR?: Enumerable<ChannelsJoinTabScalarWhereInput>
    NOT?: Enumerable<ChannelsJoinTabScalarWhereInput>
    user_id?: StringFilter | string
    channel_id?: StringFilter | string
    channel_name?: StringFilter | string
    role?: EnumChanRolesFilter | ChanRoles
  }

  export type GameHistoryTabUpsertWithWhereUniqueWithoutUserInput = {
    where: GameHistoryTabWhereUniqueInput
    update: XOR<GameHistoryTabUpdateWithoutUserInput, GameHistoryTabUncheckedUpdateWithoutUserInput>
    create: XOR<GameHistoryTabCreateWithoutUserInput, GameHistoryTabUncheckedCreateWithoutUserInput>
  }

  export type GameHistoryTabUpdateWithWhereUniqueWithoutUserInput = {
    where: GameHistoryTabWhereUniqueInput
    data: XOR<GameHistoryTabUpdateWithoutUserInput, GameHistoryTabUncheckedUpdateWithoutUserInput>
  }

  export type GameHistoryTabUpdateManyWithWhereWithoutUserInput = {
    where: GameHistoryTabScalarWhereInput
    data: XOR<GameHistoryTabUpdateManyMutationInput, GameHistoryTabUncheckedUpdateManyWithoutGameHistoryInput>
  }

  export type GameHistoryTabScalarWhereInput = {
    AND?: Enumerable<GameHistoryTabScalarWhereInput>
    OR?: Enumerable<GameHistoryTabScalarWhereInput>
    NOT?: Enumerable<GameHistoryTabScalarWhereInput>
    game_id?: StringFilter | string
    user_id?: StringFilter | string
  }

  export type RankingDataUpsertWithWhereUniqueWithoutUserInput = {
    where: RankingDataWhereUniqueInput
    update: XOR<RankingDataUpdateWithoutUserInput, RankingDataUncheckedUpdateWithoutUserInput>
    create: XOR<RankingDataCreateWithoutUserInput, RankingDataUncheckedCreateWithoutUserInput>
  }

  export type RankingDataUpdateWithWhereUniqueWithoutUserInput = {
    where: RankingDataWhereUniqueInput
    data: XOR<RankingDataUpdateWithoutUserInput, RankingDataUncheckedUpdateWithoutUserInput>
  }

  export type RankingDataUpdateManyWithWhereWithoutUserInput = {
    where: RankingDataScalarWhereInput
    data: XOR<RankingDataUpdateManyMutationInput, RankingDataUncheckedUpdateManyWithoutRankingDataInput>
  }

  export type RankingDataScalarWhereInput = {
    AND?: Enumerable<RankingDataScalarWhereInput>
    OR?: Enumerable<RankingDataScalarWhereInput>
    NOT?: Enumerable<RankingDataScalarWhereInput>
    user_id?: StringFilter | string
    games?: IntFilter | number
    wins?: IntFilter | number
    loses?: IntFilter | number
    draws?: IntFilter | number
    xp?: FloatFilter | number
    winning_streak?: IntFilter | number
    losing_streak?: IntFilter | number
    points?: IntFilter | number
    rank?: EnumRankFilter | Rank
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutNotificationInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: Enumerable<NotificationScalarWhereInput>
    OR?: Enumerable<NotificationScalarWhereInput>
    NOT?: Enumerable<NotificationScalarWhereInput>
    notification_id?: StringFilter | string
    user_id?: StringFilter | string
  }

  export type FriendshipInvitesUpsertWithWhereUniqueWithoutSenderInput = {
    where: FriendshipInvitesWhereUniqueInput
    update: XOR<FriendshipInvitesUpdateWithoutSenderInput, FriendshipInvitesUncheckedUpdateWithoutSenderInput>
    create: XOR<FriendshipInvitesCreateWithoutSenderInput, FriendshipInvitesUncheckedCreateWithoutSenderInput>
  }

  export type FriendshipInvitesUpdateWithWhereUniqueWithoutSenderInput = {
    where: FriendshipInvitesWhereUniqueInput
    data: XOR<FriendshipInvitesUpdateWithoutSenderInput, FriendshipInvitesUncheckedUpdateWithoutSenderInput>
  }

  export type FriendshipInvitesUpdateManyWithWhereWithoutSenderInput = {
    where: FriendshipInvitesScalarWhereInput
    data: XOR<FriendshipInvitesUpdateManyMutationInput, FriendshipInvitesUncheckedUpdateManyWithoutFrendshipInvitesInput>
  }

  export type FriendshipInvitesScalarWhereInput = {
    AND?: Enumerable<FriendshipInvitesScalarWhereInput>
    OR?: Enumerable<FriendshipInvitesScalarWhereInput>
    NOT?: Enumerable<FriendshipInvitesScalarWhereInput>
    sender_id?: StringFilter | string
    receiver_id?: StringFilter | string
    status?: EnumInviteStatusFilter | InviteStatus
    createdAt?: DateTimeFilter | Date | string
  }

  export type GameInvitesUpsertWithWhereUniqueWithoutSenderInput = {
    where: GameInvitesWhereUniqueInput
    update: XOR<GameInvitesUpdateWithoutSenderInput, GameInvitesUncheckedUpdateWithoutSenderInput>
    create: XOR<GameInvitesCreateWithoutSenderInput, GameInvitesUncheckedCreateWithoutSenderInput>
  }

  export type GameInvitesUpdateWithWhereUniqueWithoutSenderInput = {
    where: GameInvitesWhereUniqueInput
    data: XOR<GameInvitesUpdateWithoutSenderInput, GameInvitesUncheckedUpdateWithoutSenderInput>
  }

  export type GameInvitesUpdateManyWithWhereWithoutSenderInput = {
    where: GameInvitesScalarWhereInput
    data: XOR<GameInvitesUpdateManyMutationInput, GameInvitesUncheckedUpdateManyWithoutGameInvitesInput>
  }

  export type GameInvitesScalarWhereInput = {
    AND?: Enumerable<GameInvitesScalarWhereInput>
    OR?: Enumerable<GameInvitesScalarWhereInput>
    NOT?: Enumerable<GameInvitesScalarWhereInput>
    sender_id?: StringFilter | string
    receiver_id?: StringFilter | string
    status?: EnumInviteStatusFilter | InviteStatus
    validUntil?: DateTimeFilter | Date | string
  }

  export type PrivateMessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: PrivateMessageWhereUniqueInput
    update: XOR<PrivateMessageUpdateWithoutSenderInput, PrivateMessageUncheckedUpdateWithoutSenderInput>
    create: XOR<PrivateMessageCreateWithoutSenderInput, PrivateMessageUncheckedCreateWithoutSenderInput>
  }

  export type PrivateMessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: PrivateMessageWhereUniqueInput
    data: XOR<PrivateMessageUpdateWithoutSenderInput, PrivateMessageUncheckedUpdateWithoutSenderInput>
  }

  export type PrivateMessageUpdateManyWithWhereWithoutSenderInput = {
    where: PrivateMessageScalarWhereInput
    data: XOR<PrivateMessageUpdateManyMutationInput, PrivateMessageUncheckedUpdateManyWithoutMsgSenderInput>
  }

  export type PrivateMessageScalarWhereInput = {
    AND?: Enumerable<PrivateMessageScalarWhereInput>
    OR?: Enumerable<PrivateMessageScalarWhereInput>
    NOT?: Enumerable<PrivateMessageScalarWhereInput>
    id?: StringFilter | string
    dateCreated?: DateTimeFilter | Date | string
    content?: StringFilter | string
    seen?: BoolFilter | boolean
    chatRoom_id?: StringFilter | string
    sender_id?: StringFilter | string
    receiver_id?: StringFilter | string
  }

  export type PrivateMessageUpsertWithWhereUniqueWithoutReceiverInput = {
    where: PrivateMessageWhereUniqueInput
    update: XOR<PrivateMessageUpdateWithoutReceiverInput, PrivateMessageUncheckedUpdateWithoutReceiverInput>
    create: XOR<PrivateMessageCreateWithoutReceiverInput, PrivateMessageUncheckedCreateWithoutReceiverInput>
  }

  export type PrivateMessageUpdateWithWhereUniqueWithoutReceiverInput = {
    where: PrivateMessageWhereUniqueInput
    data: XOR<PrivateMessageUpdateWithoutReceiverInput, PrivateMessageUncheckedUpdateWithoutReceiverInput>
  }

  export type PrivateMessageUpdateManyWithWhereWithoutReceiverInput = {
    where: PrivateMessageScalarWhereInput
    data: XOR<PrivateMessageUpdateManyMutationInput, PrivateMessageUncheckedUpdateManyWithoutMsgReceiverInput>
  }

  export type PrivateChatRoomUpsertWithWhereUniqueWithoutSenderInput = {
    where: PrivateChatRoomWhereUniqueInput
    update: XOR<PrivateChatRoomUpdateWithoutSenderInput, PrivateChatRoomUncheckedUpdateWithoutSenderInput>
    create: XOR<PrivateChatRoomCreateWithoutSenderInput, PrivateChatRoomUncheckedCreateWithoutSenderInput>
  }

  export type PrivateChatRoomUpdateWithWhereUniqueWithoutSenderInput = {
    where: PrivateChatRoomWhereUniqueInput
    data: XOR<PrivateChatRoomUpdateWithoutSenderInput, PrivateChatRoomUncheckedUpdateWithoutSenderInput>
  }

  export type PrivateChatRoomUpdateManyWithWhereWithoutSenderInput = {
    where: PrivateChatRoomScalarWhereInput
    data: XOR<PrivateChatRoomUpdateManyMutationInput, PrivateChatRoomUncheckedUpdateManyWithoutPrivateChatRoomSenderInput>
  }

  export type PrivateChatRoomScalarWhereInput = {
    AND?: Enumerable<PrivateChatRoomScalarWhereInput>
    OR?: Enumerable<PrivateChatRoomScalarWhereInput>
    NOT?: Enumerable<PrivateChatRoomScalarWhereInput>
    id?: StringFilter | string
    sender_id?: StringFilter | string
    receiver_id?: StringFilter | string
    lastUpdatedTime?: DateTimeFilter | Date | string
    blocked?: BoolFilter | boolean
  }

  export type PrivateChatRoomUpsertWithWhereUniqueWithoutReceiverInput = {
    where: PrivateChatRoomWhereUniqueInput
    update: XOR<PrivateChatRoomUpdateWithoutReceiverInput, PrivateChatRoomUncheckedUpdateWithoutReceiverInput>
    create: XOR<PrivateChatRoomCreateWithoutReceiverInput, PrivateChatRoomUncheckedCreateWithoutReceiverInput>
  }

  export type PrivateChatRoomUpdateWithWhereUniqueWithoutReceiverInput = {
    where: PrivateChatRoomWhereUniqueInput
    data: XOR<PrivateChatRoomUpdateWithoutReceiverInput, PrivateChatRoomUncheckedUpdateWithoutReceiverInput>
  }

  export type PrivateChatRoomUpdateManyWithWhereWithoutReceiverInput = {
    where: PrivateChatRoomScalarWhereInput
    data: XOR<PrivateChatRoomUpdateManyMutationInput, PrivateChatRoomUncheckedUpdateManyWithoutPrivateChatRoomReceiverInput>
  }

  export type UserCreateWithoutFrendshipInvitesInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabCreateNestedManyWithoutUserInput
    rankingData?: RankingDataCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    gameInvites?: GameInvitesCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutFrendshipInvitesInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabUncheckedCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabUncheckedCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabUncheckedCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabUncheckedCreateNestedManyWithoutUserInput
    rankingData?: RankingDataUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    gameInvites?: GameInvitesUncheckedCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageUncheckedCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageUncheckedCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomUncheckedCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutFrendshipInvitesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFrendshipInvitesInput, UserUncheckedCreateWithoutFrendshipInvitesInput>
  }

  export type UserUpsertWithoutFrendshipInvitesInput = {
    update: XOR<UserUpdateWithoutFrendshipInvitesInput, UserUncheckedUpdateWithoutFrendshipInvitesInput>
    create: XOR<UserCreateWithoutFrendshipInvitesInput, UserUncheckedCreateWithoutFrendshipInvitesInput>
  }

  export type UserUpdateWithoutFrendshipInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    gameInvites?: GameInvitesUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutFrendshipInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUncheckedUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUncheckedUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUncheckedUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUncheckedUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    gameInvites?: GameInvitesUncheckedUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUncheckedUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUncheckedUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUncheckedUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutFriendsInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    blockedUsers?: BlockTabCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabCreateNestedManyWithoutUserInput
    rankingData?: RankingDataCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutFriendsInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    blockedUsers?: BlockTabUncheckedCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabUncheckedCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabUncheckedCreateNestedManyWithoutUserInput
    rankingData?: RankingDataUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesUncheckedCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesUncheckedCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageUncheckedCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageUncheckedCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomUncheckedCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutFriendsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFriendsInput, UserUncheckedCreateWithoutFriendsInput>
  }

  export type UserUpsertWithoutFriendsInput = {
    update: XOR<UserUpdateWithoutFriendsInput, UserUncheckedUpdateWithoutFriendsInput>
    create: XOR<UserCreateWithoutFriendsInput, UserUncheckedCreateWithoutFriendsInput>
  }

  export type UserUpdateWithoutFriendsInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    blockedUsers?: BlockTabUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutFriendsInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    blockedUsers?: BlockTabUncheckedUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUncheckedUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUncheckedUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUncheckedUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUncheckedUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUncheckedUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUncheckedUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUncheckedUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutMsgSenderInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabCreateNestedManyWithoutUserInput
    rankingData?: RankingDataCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutMsgSenderInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabUncheckedCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabUncheckedCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabUncheckedCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabUncheckedCreateNestedManyWithoutUserInput
    rankingData?: RankingDataUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesUncheckedCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesUncheckedCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageUncheckedCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomUncheckedCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutMsgSenderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMsgSenderInput, UserUncheckedCreateWithoutMsgSenderInput>
  }

  export type UserCreateWithoutMsgReceiverInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabCreateNestedManyWithoutUserInput
    rankingData?: RankingDataCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageCreateNestedManyWithoutSenderInput
    privateChatRoomSender?: PrivateChatRoomCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutMsgReceiverInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabUncheckedCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabUncheckedCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabUncheckedCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabUncheckedCreateNestedManyWithoutUserInput
    rankingData?: RankingDataUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesUncheckedCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesUncheckedCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageUncheckedCreateNestedManyWithoutSenderInput
    privateChatRoomSender?: PrivateChatRoomUncheckedCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutMsgReceiverInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMsgReceiverInput, UserUncheckedCreateWithoutMsgReceiverInput>
  }

  export type PrivateChatRoomCreateWithoutMessagesInput = {
    id: string
    lastUpdatedTime?: Date | string
    blocked?: boolean
    sender: UserCreateNestedOneWithoutPrivateChatRoomSenderInput
    receiver: UserCreateNestedOneWithoutPrivateChatRoomReceiverInput
  }

  export type PrivateChatRoomUncheckedCreateWithoutMessagesInput = {
    id: string
    sender_id: string
    receiver_id: string
    lastUpdatedTime?: Date | string
    blocked?: boolean
  }

  export type PrivateChatRoomCreateOrConnectWithoutMessagesInput = {
    where: PrivateChatRoomWhereUniqueInput
    create: XOR<PrivateChatRoomCreateWithoutMessagesInput, PrivateChatRoomUncheckedCreateWithoutMessagesInput>
  }

  export type UserUpsertWithoutMsgSenderInput = {
    update: XOR<UserUpdateWithoutMsgSenderInput, UserUncheckedUpdateWithoutMsgSenderInput>
    create: XOR<UserCreateWithoutMsgSenderInput, UserUncheckedCreateWithoutMsgSenderInput>
  }

  export type UserUpdateWithoutMsgSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutMsgSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUncheckedUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUncheckedUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUncheckedUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUncheckedUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUncheckedUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUncheckedUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUncheckedUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUncheckedUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserUpsertWithoutMsgReceiverInput = {
    update: XOR<UserUpdateWithoutMsgReceiverInput, UserUncheckedUpdateWithoutMsgReceiverInput>
    create: XOR<UserCreateWithoutMsgReceiverInput, UserUncheckedCreateWithoutMsgReceiverInput>
  }

  export type UserUpdateWithoutMsgReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUpdateManyWithoutSenderNestedInput
    privateChatRoomSender?: PrivateChatRoomUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutMsgReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUncheckedUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUncheckedUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUncheckedUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUncheckedUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUncheckedUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUncheckedUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUncheckedUpdateManyWithoutSenderNestedInput
    privateChatRoomSender?: PrivateChatRoomUncheckedUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type PrivateChatRoomUpsertWithoutMessagesInput = {
    update: XOR<PrivateChatRoomUpdateWithoutMessagesInput, PrivateChatRoomUncheckedUpdateWithoutMessagesInput>
    create: XOR<PrivateChatRoomCreateWithoutMessagesInput, PrivateChatRoomUncheckedCreateWithoutMessagesInput>
  }

  export type PrivateChatRoomUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastUpdatedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    blocked?: BoolFieldUpdateOperationsInput | boolean
    sender?: UserUpdateOneRequiredWithoutPrivateChatRoomSenderNestedInput
    receiver?: UserUpdateOneRequiredWithoutPrivateChatRoomReceiverNestedInput
  }

  export type PrivateChatRoomUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    receiver_id?: StringFieldUpdateOperationsInput | string
    lastUpdatedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    blocked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PrivateMessageCreateWithoutChatRoomInput = {
    id?: string
    dateCreated?: Date | string
    content: string
    seen?: boolean
    sender: UserCreateNestedOneWithoutMsgSenderInput
    receiver: UserCreateNestedOneWithoutMsgReceiverInput
  }

  export type PrivateMessageUncheckedCreateWithoutChatRoomInput = {
    id?: string
    dateCreated?: Date | string
    content: string
    seen?: boolean
    sender_id: string
    receiver_id: string
  }

  export type PrivateMessageCreateOrConnectWithoutChatRoomInput = {
    where: PrivateMessageWhereUniqueInput
    create: XOR<PrivateMessageCreateWithoutChatRoomInput, PrivateMessageUncheckedCreateWithoutChatRoomInput>
  }

  export type PrivateMessageCreateManyChatRoomInputEnvelope = {
    data: Enumerable<PrivateMessageCreateManyChatRoomInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutPrivateChatRoomSenderInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabCreateNestedManyWithoutUserInput
    rankingData?: RankingDataCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageCreateNestedManyWithoutReceiverInput
    privateChatRoomReceiver?: PrivateChatRoomCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutPrivateChatRoomSenderInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabUncheckedCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabUncheckedCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabUncheckedCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabUncheckedCreateNestedManyWithoutUserInput
    rankingData?: RankingDataUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesUncheckedCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesUncheckedCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageUncheckedCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageUncheckedCreateNestedManyWithoutReceiverInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutPrivateChatRoomSenderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPrivateChatRoomSenderInput, UserUncheckedCreateWithoutPrivateChatRoomSenderInput>
  }

  export type UserCreateWithoutPrivateChatRoomReceiverInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabCreateNestedManyWithoutUserInput
    rankingData?: RankingDataCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomCreateNestedManyWithoutSenderInput
  }

  export type UserUncheckedCreateWithoutPrivateChatRoomReceiverInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabUncheckedCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabUncheckedCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabUncheckedCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabUncheckedCreateNestedManyWithoutUserInput
    rankingData?: RankingDataUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesUncheckedCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesUncheckedCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageUncheckedCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageUncheckedCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomUncheckedCreateNestedManyWithoutSenderInput
  }

  export type UserCreateOrConnectWithoutPrivateChatRoomReceiverInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPrivateChatRoomReceiverInput, UserUncheckedCreateWithoutPrivateChatRoomReceiverInput>
  }

  export type PrivateMessageUpsertWithWhereUniqueWithoutChatRoomInput = {
    where: PrivateMessageWhereUniqueInput
    update: XOR<PrivateMessageUpdateWithoutChatRoomInput, PrivateMessageUncheckedUpdateWithoutChatRoomInput>
    create: XOR<PrivateMessageCreateWithoutChatRoomInput, PrivateMessageUncheckedCreateWithoutChatRoomInput>
  }

  export type PrivateMessageUpdateWithWhereUniqueWithoutChatRoomInput = {
    where: PrivateMessageWhereUniqueInput
    data: XOR<PrivateMessageUpdateWithoutChatRoomInput, PrivateMessageUncheckedUpdateWithoutChatRoomInput>
  }

  export type PrivateMessageUpdateManyWithWhereWithoutChatRoomInput = {
    where: PrivateMessageScalarWhereInput
    data: XOR<PrivateMessageUpdateManyMutationInput, PrivateMessageUncheckedUpdateManyWithoutMessagesInput>
  }

  export type UserUpsertWithoutPrivateChatRoomSenderInput = {
    update: XOR<UserUpdateWithoutPrivateChatRoomSenderInput, UserUncheckedUpdateWithoutPrivateChatRoomSenderInput>
    create: XOR<UserCreateWithoutPrivateChatRoomSenderInput, UserUncheckedCreateWithoutPrivateChatRoomSenderInput>
  }

  export type UserUpdateWithoutPrivateChatRoomSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUpdateManyWithoutReceiverNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutPrivateChatRoomSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUncheckedUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUncheckedUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUncheckedUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUncheckedUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUncheckedUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUncheckedUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUncheckedUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUncheckedUpdateManyWithoutReceiverNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserUpsertWithoutPrivateChatRoomReceiverInput = {
    update: XOR<UserUpdateWithoutPrivateChatRoomReceiverInput, UserUncheckedUpdateWithoutPrivateChatRoomReceiverInput>
    create: XOR<UserCreateWithoutPrivateChatRoomReceiverInput, UserUncheckedCreateWithoutPrivateChatRoomReceiverInput>
  }

  export type UserUpdateWithoutPrivateChatRoomReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUpdateManyWithoutSenderNestedInput
  }

  export type UserUncheckedUpdateWithoutPrivateChatRoomReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUncheckedUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUncheckedUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUncheckedUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUncheckedUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUncheckedUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUncheckedUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUncheckedUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUncheckedUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type UserCreateWithoutBlockedUsersInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabCreateNestedManyWithoutUserInput
    rankingData?: RankingDataCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutBlockedUsersInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabUncheckedCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabUncheckedCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabUncheckedCreateNestedManyWithoutUserInput
    rankingData?: RankingDataUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesUncheckedCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesUncheckedCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageUncheckedCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageUncheckedCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomUncheckedCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutBlockedUsersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBlockedUsersInput, UserUncheckedCreateWithoutBlockedUsersInput>
  }

  export type UserUpsertWithoutBlockedUsersInput = {
    update: XOR<UserUpdateWithoutBlockedUsersInput, UserUncheckedUpdateWithoutBlockedUsersInput>
    create: XOR<UserCreateWithoutBlockedUsersInput, UserUncheckedCreateWithoutBlockedUsersInput>
  }

  export type UserUpdateWithoutBlockedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutBlockedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUncheckedUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUncheckedUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUncheckedUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUncheckedUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUncheckedUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUncheckedUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUncheckedUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUncheckedUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutChannelsJoinedInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabCreateNestedManyWithoutUserInput
    rankingData?: RankingDataCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutChannelsJoinedInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabUncheckedCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabUncheckedCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabUncheckedCreateNestedManyWithoutUserInput
    rankingData?: RankingDataUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesUncheckedCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesUncheckedCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageUncheckedCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageUncheckedCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomUncheckedCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutChannelsJoinedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChannelsJoinedInput, UserUncheckedCreateWithoutChannelsJoinedInput>
  }

  export type UserUpsertWithoutChannelsJoinedInput = {
    update: XOR<UserUpdateWithoutChannelsJoinedInput, UserUncheckedUpdateWithoutChannelsJoinedInput>
    create: XOR<UserCreateWithoutChannelsJoinedInput, UserUncheckedCreateWithoutChannelsJoinedInput>
  }

  export type UserUpdateWithoutChannelsJoinedInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutChannelsJoinedInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUncheckedUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUncheckedUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUncheckedUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUncheckedUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUncheckedUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUncheckedUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUncheckedUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUncheckedUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type MembersTabCreateWithoutChannelInput = {
    member_id: string
  }

  export type MembersTabUncheckedCreateWithoutChannelInput = {
    member_id: string
  }

  export type MembersTabCreateOrConnectWithoutChannelInput = {
    where: MembersTabWhereUniqueInput
    create: XOR<MembersTabCreateWithoutChannelInput, MembersTabUncheckedCreateWithoutChannelInput>
  }

  export type MembersTabCreateManyChannelInputEnvelope = {
    data: Enumerable<MembersTabCreateManyChannelInput>
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutChannelInput = {
    id?: string
    dateCreated?: Date | string
    sender_id: string
    content: string
    seen?: boolean
  }

  export type MessageUncheckedCreateWithoutChannelInput = {
    id?: string
    dateCreated?: Date | string
    sender_id: string
    content: string
    seen?: boolean
  }

  export type MessageCreateOrConnectWithoutChannelInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput>
  }

  export type MessageCreateManyChannelInputEnvelope = {
    data: Enumerable<MessageCreateManyChannelInput>
    skipDuplicates?: boolean
  }

  export type BannedMembersCreateWithoutChannelInput = {
    banned_id: string
    status?: MemeberStatusTime | null
    status_end_time?: Date | string | null
  }

  export type BannedMembersUncheckedCreateWithoutChannelInput = {
    banned_id: string
    status?: MemeberStatusTime | null
    status_end_time?: Date | string | null
  }

  export type BannedMembersCreateOrConnectWithoutChannelInput = {
    where: BannedMembersWhereUniqueInput
    create: XOR<BannedMembersCreateWithoutChannelInput, BannedMembersUncheckedCreateWithoutChannelInput>
  }

  export type BannedMembersCreateManyChannelInputEnvelope = {
    data: Enumerable<BannedMembersCreateManyChannelInput>
    skipDuplicates?: boolean
  }

  export type AdminMembersCreateWithoutChannelInput = {
    admin_id: string
  }

  export type AdminMembersUncheckedCreateWithoutChannelInput = {
    admin_id: string
  }

  export type AdminMembersCreateOrConnectWithoutChannelInput = {
    where: AdminMembersWhereUniqueInput
    create: XOR<AdminMembersCreateWithoutChannelInput, AdminMembersUncheckedCreateWithoutChannelInput>
  }

  export type AdminMembersCreateManyChannelInputEnvelope = {
    data: Enumerable<AdminMembersCreateManyChannelInput>
    skipDuplicates?: boolean
  }

  export type MutedMembersCreateWithoutChannelInput = {
    muted_id: string
    status?: MemeberStatusTime | null
    status_end_time?: Date | string | null
  }

  export type MutedMembersUncheckedCreateWithoutChannelInput = {
    muted_id: string
    status?: MemeberStatusTime | null
    status_end_time?: Date | string | null
  }

  export type MutedMembersCreateOrConnectWithoutChannelInput = {
    where: MutedMembersWhereUniqueInput
    create: XOR<MutedMembersCreateWithoutChannelInput, MutedMembersUncheckedCreateWithoutChannelInput>
  }

  export type MutedMembersCreateManyChannelInputEnvelope = {
    data: Enumerable<MutedMembersCreateManyChannelInput>
    skipDuplicates?: boolean
  }

  export type kickedMembersCreateWithoutChannelInput = {
    kicked_id: string
  }

  export type kickedMembersUncheckedCreateWithoutChannelInput = {
    kicked_id: string
  }

  export type kickedMembersCreateOrConnectWithoutChannelInput = {
    where: kickedMembersWhereUniqueInput
    create: XOR<kickedMembersCreateWithoutChannelInput, kickedMembersUncheckedCreateWithoutChannelInput>
  }

  export type kickedMembersCreateManyChannelInputEnvelope = {
    data: Enumerable<kickedMembersCreateManyChannelInput>
    skipDuplicates?: boolean
  }

  export type MembersTabUpsertWithWhereUniqueWithoutChannelInput = {
    where: MembersTabWhereUniqueInput
    update: XOR<MembersTabUpdateWithoutChannelInput, MembersTabUncheckedUpdateWithoutChannelInput>
    create: XOR<MembersTabCreateWithoutChannelInput, MembersTabUncheckedCreateWithoutChannelInput>
  }

  export type MembersTabUpdateWithWhereUniqueWithoutChannelInput = {
    where: MembersTabWhereUniqueInput
    data: XOR<MembersTabUpdateWithoutChannelInput, MembersTabUncheckedUpdateWithoutChannelInput>
  }

  export type MembersTabUpdateManyWithWhereWithoutChannelInput = {
    where: MembersTabScalarWhereInput
    data: XOR<MembersTabUpdateManyMutationInput, MembersTabUncheckedUpdateManyWithoutMembersInput>
  }

  export type MembersTabScalarWhereInput = {
    AND?: Enumerable<MembersTabScalarWhereInput>
    OR?: Enumerable<MembersTabScalarWhereInput>
    NOT?: Enumerable<MembersTabScalarWhereInput>
    channel_id?: StringFilter | string
    member_id?: StringFilter | string
  }

  export type MessageUpsertWithWhereUniqueWithoutChannelInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutChannelInput, MessageUncheckedUpdateWithoutChannelInput>
    create: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutChannelInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutChannelInput, MessageUncheckedUpdateWithoutChannelInput>
  }

  export type MessageUpdateManyWithWhereWithoutChannelInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutMessagesInput>
  }

  export type MessageScalarWhereInput = {
    AND?: Enumerable<MessageScalarWhereInput>
    OR?: Enumerable<MessageScalarWhereInput>
    NOT?: Enumerable<MessageScalarWhereInput>
    id?: StringFilter | string
    dateCreated?: DateTimeFilter | Date | string
    sender_id?: StringFilter | string
    receiver_id?: StringFilter | string
    content?: StringFilter | string
    seen?: BoolFilter | boolean
  }

  export type BannedMembersUpsertWithWhereUniqueWithoutChannelInput = {
    where: BannedMembersWhereUniqueInput
    update: XOR<BannedMembersUpdateWithoutChannelInput, BannedMembersUncheckedUpdateWithoutChannelInput>
    create: XOR<BannedMembersCreateWithoutChannelInput, BannedMembersUncheckedCreateWithoutChannelInput>
  }

  export type BannedMembersUpdateWithWhereUniqueWithoutChannelInput = {
    where: BannedMembersWhereUniqueInput
    data: XOR<BannedMembersUpdateWithoutChannelInput, BannedMembersUncheckedUpdateWithoutChannelInput>
  }

  export type BannedMembersUpdateManyWithWhereWithoutChannelInput = {
    where: BannedMembersScalarWhereInput
    data: XOR<BannedMembersUpdateManyMutationInput, BannedMembersUncheckedUpdateManyWithoutBannedUsersInput>
  }

  export type BannedMembersScalarWhereInput = {
    AND?: Enumerable<BannedMembersScalarWhereInput>
    OR?: Enumerable<BannedMembersScalarWhereInput>
    NOT?: Enumerable<BannedMembersScalarWhereInput>
    channel_id?: StringFilter | string
    banned_id?: StringFilter | string
    status?: EnumMemeberStatusTimeNullableFilter | MemeberStatusTime | null
    status_end_time?: DateTimeNullableFilter | Date | string | null
  }

  export type AdminMembersUpsertWithWhereUniqueWithoutChannelInput = {
    where: AdminMembersWhereUniqueInput
    update: XOR<AdminMembersUpdateWithoutChannelInput, AdminMembersUncheckedUpdateWithoutChannelInput>
    create: XOR<AdminMembersCreateWithoutChannelInput, AdminMembersUncheckedCreateWithoutChannelInput>
  }

  export type AdminMembersUpdateWithWhereUniqueWithoutChannelInput = {
    where: AdminMembersWhereUniqueInput
    data: XOR<AdminMembersUpdateWithoutChannelInput, AdminMembersUncheckedUpdateWithoutChannelInput>
  }

  export type AdminMembersUpdateManyWithWhereWithoutChannelInput = {
    where: AdminMembersScalarWhereInput
    data: XOR<AdminMembersUpdateManyMutationInput, AdminMembersUncheckedUpdateManyWithoutAdminstratorsInput>
  }

  export type AdminMembersScalarWhereInput = {
    AND?: Enumerable<AdminMembersScalarWhereInput>
    OR?: Enumerable<AdminMembersScalarWhereInput>
    NOT?: Enumerable<AdminMembersScalarWhereInput>
    channel_id?: StringFilter | string
    admin_id?: StringFilter | string
  }

  export type MutedMembersUpsertWithWhereUniqueWithoutChannelInput = {
    where: MutedMembersWhereUniqueInput
    update: XOR<MutedMembersUpdateWithoutChannelInput, MutedMembersUncheckedUpdateWithoutChannelInput>
    create: XOR<MutedMembersCreateWithoutChannelInput, MutedMembersUncheckedCreateWithoutChannelInput>
  }

  export type MutedMembersUpdateWithWhereUniqueWithoutChannelInput = {
    where: MutedMembersWhereUniqueInput
    data: XOR<MutedMembersUpdateWithoutChannelInput, MutedMembersUncheckedUpdateWithoutChannelInput>
  }

  export type MutedMembersUpdateManyWithWhereWithoutChannelInput = {
    where: MutedMembersScalarWhereInput
    data: XOR<MutedMembersUpdateManyMutationInput, MutedMembersUncheckedUpdateManyWithoutMutedMembersInput>
  }

  export type MutedMembersScalarWhereInput = {
    AND?: Enumerable<MutedMembersScalarWhereInput>
    OR?: Enumerable<MutedMembersScalarWhereInput>
    NOT?: Enumerable<MutedMembersScalarWhereInput>
    channel_id?: StringFilter | string
    muted_id?: StringFilter | string
    status?: EnumMemeberStatusTimeNullableFilter | MemeberStatusTime | null
    status_end_time?: DateTimeNullableFilter | Date | string | null
  }

  export type kickedMembersUpsertWithWhereUniqueWithoutChannelInput = {
    where: kickedMembersWhereUniqueInput
    update: XOR<kickedMembersUpdateWithoutChannelInput, kickedMembersUncheckedUpdateWithoutChannelInput>
    create: XOR<kickedMembersCreateWithoutChannelInput, kickedMembersUncheckedCreateWithoutChannelInput>
  }

  export type kickedMembersUpdateWithWhereUniqueWithoutChannelInput = {
    where: kickedMembersWhereUniqueInput
    data: XOR<kickedMembersUpdateWithoutChannelInput, kickedMembersUncheckedUpdateWithoutChannelInput>
  }

  export type kickedMembersUpdateManyWithWhereWithoutChannelInput = {
    where: kickedMembersScalarWhereInput
    data: XOR<kickedMembersUpdateManyMutationInput, kickedMembersUncheckedUpdateManyWithoutKickedMembersInput>
  }

  export type kickedMembersScalarWhereInput = {
    AND?: Enumerable<kickedMembersScalarWhereInput>
    OR?: Enumerable<kickedMembersScalarWhereInput>
    NOT?: Enumerable<kickedMembersScalarWhereInput>
    channel_id?: StringFilter | string
    kicked_id?: StringFilter | string
  }

  export type ChannelCreateWithoutMembersInput = {
    id?: string
    name: string
    dateCreated?: Date | string
    chann_type: ChanType
    owner_id: string
    password?: string | null
    limit_members: number
    messages?: MessageCreateNestedManyWithoutChannelInput
    bannedUsers?: BannedMembersCreateNestedManyWithoutChannelInput
    adminstrators?: AdminMembersCreateNestedManyWithoutChannelInput
    mutedMembers?: MutedMembersCreateNestedManyWithoutChannelInput
    kickedMembers?: kickedMembersCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    dateCreated?: Date | string
    chann_type: ChanType
    owner_id: string
    password?: string | null
    limit_members: number
    messages?: MessageUncheckedCreateNestedManyWithoutChannelInput
    bannedUsers?: BannedMembersUncheckedCreateNestedManyWithoutChannelInput
    adminstrators?: AdminMembersUncheckedCreateNestedManyWithoutChannelInput
    mutedMembers?: MutedMembersUncheckedCreateNestedManyWithoutChannelInput
    kickedMembers?: kickedMembersUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelCreateOrConnectWithoutMembersInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutMembersInput, ChannelUncheckedCreateWithoutMembersInput>
  }

  export type ChannelUpsertWithoutMembersInput = {
    update: XOR<ChannelUpdateWithoutMembersInput, ChannelUncheckedUpdateWithoutMembersInput>
    create: XOR<ChannelCreateWithoutMembersInput, ChannelUncheckedCreateWithoutMembersInput>
  }

  export type ChannelUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    chann_type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    owner_id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    limit_members?: IntFieldUpdateOperationsInput | number
    messages?: MessageUpdateManyWithoutChannelNestedInput
    bannedUsers?: BannedMembersUpdateManyWithoutChannelNestedInput
    adminstrators?: AdminMembersUpdateManyWithoutChannelNestedInput
    mutedMembers?: MutedMembersUpdateManyWithoutChannelNestedInput
    kickedMembers?: kickedMembersUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    chann_type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    owner_id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    limit_members?: IntFieldUpdateOperationsInput | number
    messages?: MessageUncheckedUpdateManyWithoutChannelNestedInput
    bannedUsers?: BannedMembersUncheckedUpdateManyWithoutChannelNestedInput
    adminstrators?: AdminMembersUncheckedUpdateManyWithoutChannelNestedInput
    mutedMembers?: MutedMembersUncheckedUpdateManyWithoutChannelNestedInput
    kickedMembers?: kickedMembersUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type ChannelCreateWithoutBannedUsersInput = {
    id?: string
    name: string
    dateCreated?: Date | string
    chann_type: ChanType
    owner_id: string
    password?: string | null
    limit_members: number
    members?: MembersTabCreateNestedManyWithoutChannelInput
    messages?: MessageCreateNestedManyWithoutChannelInput
    adminstrators?: AdminMembersCreateNestedManyWithoutChannelInput
    mutedMembers?: MutedMembersCreateNestedManyWithoutChannelInput
    kickedMembers?: kickedMembersCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateWithoutBannedUsersInput = {
    id?: string
    name: string
    dateCreated?: Date | string
    chann_type: ChanType
    owner_id: string
    password?: string | null
    limit_members: number
    members?: MembersTabUncheckedCreateNestedManyWithoutChannelInput
    messages?: MessageUncheckedCreateNestedManyWithoutChannelInput
    adminstrators?: AdminMembersUncheckedCreateNestedManyWithoutChannelInput
    mutedMembers?: MutedMembersUncheckedCreateNestedManyWithoutChannelInput
    kickedMembers?: kickedMembersUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelCreateOrConnectWithoutBannedUsersInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutBannedUsersInput, ChannelUncheckedCreateWithoutBannedUsersInput>
  }

  export type ChannelUpsertWithoutBannedUsersInput = {
    update: XOR<ChannelUpdateWithoutBannedUsersInput, ChannelUncheckedUpdateWithoutBannedUsersInput>
    create: XOR<ChannelCreateWithoutBannedUsersInput, ChannelUncheckedCreateWithoutBannedUsersInput>
  }

  export type ChannelUpdateWithoutBannedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    chann_type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    owner_id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    limit_members?: IntFieldUpdateOperationsInput | number
    members?: MembersTabUpdateManyWithoutChannelNestedInput
    messages?: MessageUpdateManyWithoutChannelNestedInput
    adminstrators?: AdminMembersUpdateManyWithoutChannelNestedInput
    mutedMembers?: MutedMembersUpdateManyWithoutChannelNestedInput
    kickedMembers?: kickedMembersUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateWithoutBannedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    chann_type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    owner_id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    limit_members?: IntFieldUpdateOperationsInput | number
    members?: MembersTabUncheckedUpdateManyWithoutChannelNestedInput
    messages?: MessageUncheckedUpdateManyWithoutChannelNestedInput
    adminstrators?: AdminMembersUncheckedUpdateManyWithoutChannelNestedInput
    mutedMembers?: MutedMembersUncheckedUpdateManyWithoutChannelNestedInput
    kickedMembers?: kickedMembersUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type ChannelCreateWithoutAdminstratorsInput = {
    id?: string
    name: string
    dateCreated?: Date | string
    chann_type: ChanType
    owner_id: string
    password?: string | null
    limit_members: number
    members?: MembersTabCreateNestedManyWithoutChannelInput
    messages?: MessageCreateNestedManyWithoutChannelInput
    bannedUsers?: BannedMembersCreateNestedManyWithoutChannelInput
    mutedMembers?: MutedMembersCreateNestedManyWithoutChannelInput
    kickedMembers?: kickedMembersCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateWithoutAdminstratorsInput = {
    id?: string
    name: string
    dateCreated?: Date | string
    chann_type: ChanType
    owner_id: string
    password?: string | null
    limit_members: number
    members?: MembersTabUncheckedCreateNestedManyWithoutChannelInput
    messages?: MessageUncheckedCreateNestedManyWithoutChannelInput
    bannedUsers?: BannedMembersUncheckedCreateNestedManyWithoutChannelInput
    mutedMembers?: MutedMembersUncheckedCreateNestedManyWithoutChannelInput
    kickedMembers?: kickedMembersUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelCreateOrConnectWithoutAdminstratorsInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutAdminstratorsInput, ChannelUncheckedCreateWithoutAdminstratorsInput>
  }

  export type ChannelUpsertWithoutAdminstratorsInput = {
    update: XOR<ChannelUpdateWithoutAdminstratorsInput, ChannelUncheckedUpdateWithoutAdminstratorsInput>
    create: XOR<ChannelCreateWithoutAdminstratorsInput, ChannelUncheckedCreateWithoutAdminstratorsInput>
  }

  export type ChannelUpdateWithoutAdminstratorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    chann_type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    owner_id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    limit_members?: IntFieldUpdateOperationsInput | number
    members?: MembersTabUpdateManyWithoutChannelNestedInput
    messages?: MessageUpdateManyWithoutChannelNestedInput
    bannedUsers?: BannedMembersUpdateManyWithoutChannelNestedInput
    mutedMembers?: MutedMembersUpdateManyWithoutChannelNestedInput
    kickedMembers?: kickedMembersUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateWithoutAdminstratorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    chann_type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    owner_id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    limit_members?: IntFieldUpdateOperationsInput | number
    members?: MembersTabUncheckedUpdateManyWithoutChannelNestedInput
    messages?: MessageUncheckedUpdateManyWithoutChannelNestedInput
    bannedUsers?: BannedMembersUncheckedUpdateManyWithoutChannelNestedInput
    mutedMembers?: MutedMembersUncheckedUpdateManyWithoutChannelNestedInput
    kickedMembers?: kickedMembersUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type ChannelCreateWithoutKickedMembersInput = {
    id?: string
    name: string
    dateCreated?: Date | string
    chann_type: ChanType
    owner_id: string
    password?: string | null
    limit_members: number
    members?: MembersTabCreateNestedManyWithoutChannelInput
    messages?: MessageCreateNestedManyWithoutChannelInput
    bannedUsers?: BannedMembersCreateNestedManyWithoutChannelInput
    adminstrators?: AdminMembersCreateNestedManyWithoutChannelInput
    mutedMembers?: MutedMembersCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateWithoutKickedMembersInput = {
    id?: string
    name: string
    dateCreated?: Date | string
    chann_type: ChanType
    owner_id: string
    password?: string | null
    limit_members: number
    members?: MembersTabUncheckedCreateNestedManyWithoutChannelInput
    messages?: MessageUncheckedCreateNestedManyWithoutChannelInput
    bannedUsers?: BannedMembersUncheckedCreateNestedManyWithoutChannelInput
    adminstrators?: AdminMembersUncheckedCreateNestedManyWithoutChannelInput
    mutedMembers?: MutedMembersUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelCreateOrConnectWithoutKickedMembersInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutKickedMembersInput, ChannelUncheckedCreateWithoutKickedMembersInput>
  }

  export type ChannelUpsertWithoutKickedMembersInput = {
    update: XOR<ChannelUpdateWithoutKickedMembersInput, ChannelUncheckedUpdateWithoutKickedMembersInput>
    create: XOR<ChannelCreateWithoutKickedMembersInput, ChannelUncheckedCreateWithoutKickedMembersInput>
  }

  export type ChannelUpdateWithoutKickedMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    chann_type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    owner_id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    limit_members?: IntFieldUpdateOperationsInput | number
    members?: MembersTabUpdateManyWithoutChannelNestedInput
    messages?: MessageUpdateManyWithoutChannelNestedInput
    bannedUsers?: BannedMembersUpdateManyWithoutChannelNestedInput
    adminstrators?: AdminMembersUpdateManyWithoutChannelNestedInput
    mutedMembers?: MutedMembersUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateWithoutKickedMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    chann_type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    owner_id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    limit_members?: IntFieldUpdateOperationsInput | number
    members?: MembersTabUncheckedUpdateManyWithoutChannelNestedInput
    messages?: MessageUncheckedUpdateManyWithoutChannelNestedInput
    bannedUsers?: BannedMembersUncheckedUpdateManyWithoutChannelNestedInput
    adminstrators?: AdminMembersUncheckedUpdateManyWithoutChannelNestedInput
    mutedMembers?: MutedMembersUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type ChannelCreateWithoutMutedMembersInput = {
    id?: string
    name: string
    dateCreated?: Date | string
    chann_type: ChanType
    owner_id: string
    password?: string | null
    limit_members: number
    members?: MembersTabCreateNestedManyWithoutChannelInput
    messages?: MessageCreateNestedManyWithoutChannelInput
    bannedUsers?: BannedMembersCreateNestedManyWithoutChannelInput
    adminstrators?: AdminMembersCreateNestedManyWithoutChannelInput
    kickedMembers?: kickedMembersCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateWithoutMutedMembersInput = {
    id?: string
    name: string
    dateCreated?: Date | string
    chann_type: ChanType
    owner_id: string
    password?: string | null
    limit_members: number
    members?: MembersTabUncheckedCreateNestedManyWithoutChannelInput
    messages?: MessageUncheckedCreateNestedManyWithoutChannelInput
    bannedUsers?: BannedMembersUncheckedCreateNestedManyWithoutChannelInput
    adminstrators?: AdminMembersUncheckedCreateNestedManyWithoutChannelInput
    kickedMembers?: kickedMembersUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelCreateOrConnectWithoutMutedMembersInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutMutedMembersInput, ChannelUncheckedCreateWithoutMutedMembersInput>
  }

  export type ChannelUpsertWithoutMutedMembersInput = {
    update: XOR<ChannelUpdateWithoutMutedMembersInput, ChannelUncheckedUpdateWithoutMutedMembersInput>
    create: XOR<ChannelCreateWithoutMutedMembersInput, ChannelUncheckedCreateWithoutMutedMembersInput>
  }

  export type ChannelUpdateWithoutMutedMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    chann_type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    owner_id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    limit_members?: IntFieldUpdateOperationsInput | number
    members?: MembersTabUpdateManyWithoutChannelNestedInput
    messages?: MessageUpdateManyWithoutChannelNestedInput
    bannedUsers?: BannedMembersUpdateManyWithoutChannelNestedInput
    adminstrators?: AdminMembersUpdateManyWithoutChannelNestedInput
    kickedMembers?: kickedMembersUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateWithoutMutedMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    chann_type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    owner_id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    limit_members?: IntFieldUpdateOperationsInput | number
    members?: MembersTabUncheckedUpdateManyWithoutChannelNestedInput
    messages?: MessageUncheckedUpdateManyWithoutChannelNestedInput
    bannedUsers?: BannedMembersUncheckedUpdateManyWithoutChannelNestedInput
    adminstrators?: AdminMembersUncheckedUpdateManyWithoutChannelNestedInput
    kickedMembers?: kickedMembersUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type ChannelCreateWithoutMessagesInput = {
    id?: string
    name: string
    dateCreated?: Date | string
    chann_type: ChanType
    owner_id: string
    password?: string | null
    limit_members: number
    members?: MembersTabCreateNestedManyWithoutChannelInput
    bannedUsers?: BannedMembersCreateNestedManyWithoutChannelInput
    adminstrators?: AdminMembersCreateNestedManyWithoutChannelInput
    mutedMembers?: MutedMembersCreateNestedManyWithoutChannelInput
    kickedMembers?: kickedMembersCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateWithoutMessagesInput = {
    id?: string
    name: string
    dateCreated?: Date | string
    chann_type: ChanType
    owner_id: string
    password?: string | null
    limit_members: number
    members?: MembersTabUncheckedCreateNestedManyWithoutChannelInput
    bannedUsers?: BannedMembersUncheckedCreateNestedManyWithoutChannelInput
    adminstrators?: AdminMembersUncheckedCreateNestedManyWithoutChannelInput
    mutedMembers?: MutedMembersUncheckedCreateNestedManyWithoutChannelInput
    kickedMembers?: kickedMembersUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelCreateOrConnectWithoutMessagesInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
  }

  export type ChannelUpsertWithoutMessagesInput = {
    update: XOR<ChannelUpdateWithoutMessagesInput, ChannelUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
  }

  export type ChannelUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    chann_type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    owner_id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    limit_members?: IntFieldUpdateOperationsInput | number
    members?: MembersTabUpdateManyWithoutChannelNestedInput
    bannedUsers?: BannedMembersUpdateManyWithoutChannelNestedInput
    adminstrators?: AdminMembersUpdateManyWithoutChannelNestedInput
    mutedMembers?: MutedMembersUpdateManyWithoutChannelNestedInput
    kickedMembers?: kickedMembersUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    chann_type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    owner_id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    limit_members?: IntFieldUpdateOperationsInput | number
    members?: MembersTabUncheckedUpdateManyWithoutChannelNestedInput
    bannedUsers?: BannedMembersUncheckedUpdateManyWithoutChannelNestedInput
    adminstrators?: AdminMembersUncheckedUpdateManyWithoutChannelNestedInput
    mutedMembers?: MutedMembersUncheckedUpdateManyWithoutChannelNestedInput
    kickedMembers?: kickedMembersUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type UserCreateWithoutNotificationInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabCreateNestedManyWithoutUserInput
    rankingData?: RankingDataCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutNotificationInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabUncheckedCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabUncheckedCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabUncheckedCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabUncheckedCreateNestedManyWithoutUserInput
    rankingData?: RankingDataUncheckedCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesUncheckedCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesUncheckedCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageUncheckedCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageUncheckedCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomUncheckedCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutNotificationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationInput, UserUncheckedCreateWithoutNotificationInput>
  }

  export type UserUpsertWithoutNotificationInput = {
    update: XOR<UserUpdateWithoutNotificationInput, UserUncheckedUpdateWithoutNotificationInput>
    create: XOR<UserCreateWithoutNotificationInput, UserUncheckedCreateWithoutNotificationInput>
  }

  export type UserUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUncheckedUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUncheckedUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUncheckedUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUncheckedUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUncheckedUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUncheckedUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUncheckedUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUncheckedUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUncheckedUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUncheckedUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type GameHistoryTabCreateWithoutGameInput = {
    user: UserCreateNestedOneWithoutGameHistoryInput
  }

  export type GameHistoryTabUncheckedCreateWithoutGameInput = {
    user_id: string
  }

  export type GameHistoryTabCreateOrConnectWithoutGameInput = {
    where: GameHistoryTabWhereUniqueInput
    create: XOR<GameHistoryTabCreateWithoutGameInput, GameHistoryTabUncheckedCreateWithoutGameInput>
  }

  export type GameHistoryTabCreateManyGameInputEnvelope = {
    data: Enumerable<GameHistoryTabCreateManyGameInput>
    skipDuplicates?: boolean
  }

  export type GameHistoryTabUpsertWithWhereUniqueWithoutGameInput = {
    where: GameHistoryTabWhereUniqueInput
    update: XOR<GameHistoryTabUpdateWithoutGameInput, GameHistoryTabUncheckedUpdateWithoutGameInput>
    create: XOR<GameHistoryTabCreateWithoutGameInput, GameHistoryTabUncheckedCreateWithoutGameInput>
  }

  export type GameHistoryTabUpdateWithWhereUniqueWithoutGameInput = {
    where: GameHistoryTabWhereUniqueInput
    data: XOR<GameHistoryTabUpdateWithoutGameInput, GameHistoryTabUncheckedUpdateWithoutGameInput>
  }

  export type GameHistoryTabUpdateManyWithWhereWithoutGameInput = {
    where: GameHistoryTabScalarWhereInput
    data: XOR<GameHistoryTabUpdateManyMutationInput, GameHistoryTabUncheckedUpdateManyWithoutGameHistoryInput>
  }

  export type UserCreateWithoutGameInvitesInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabCreateNestedManyWithoutUserInput
    rankingData?: RankingDataCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutGameInvitesInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabUncheckedCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabUncheckedCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabUncheckedCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabUncheckedCreateNestedManyWithoutUserInput
    rankingData?: RankingDataUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesUncheckedCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageUncheckedCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageUncheckedCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomUncheckedCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutGameInvitesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGameInvitesInput, UserUncheckedCreateWithoutGameInvitesInput>
  }

  export type UserUpsertWithoutGameInvitesInput = {
    update: XOR<UserUpdateWithoutGameInvitesInput, UserUncheckedUpdateWithoutGameInvitesInput>
    create: XOR<UserCreateWithoutGameInvitesInput, UserUncheckedCreateWithoutGameInvitesInput>
  }

  export type UserUpdateWithoutGameInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutGameInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUncheckedUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUncheckedUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUncheckedUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUncheckedUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUncheckedUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUncheckedUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUncheckedUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUncheckedUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type UserCreateWithoutRankingDataInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutRankingDataInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabUncheckedCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabUncheckedCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabUncheckedCreateNestedManyWithoutUserInput
    gameHistory?: GameHistoryTabUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesUncheckedCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesUncheckedCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageUncheckedCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageUncheckedCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomUncheckedCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutRankingDataInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRankingDataInput, UserUncheckedCreateWithoutRankingDataInput>
  }

  export type AchievementsAssignementCreateWithoutPlayerInput = {
    achievement: AchievementsCreateNestedOneWithoutAchievements_assignementInput
  }

  export type AchievementsAssignementUncheckedCreateWithoutPlayerInput = {
    achievement_id: number
  }

  export type AchievementsAssignementCreateOrConnectWithoutPlayerInput = {
    where: AchievementsAssignementWhereUniqueInput
    create: XOR<AchievementsAssignementCreateWithoutPlayerInput, AchievementsAssignementUncheckedCreateWithoutPlayerInput>
  }

  export type AchievementsAssignementCreateManyPlayerInputEnvelope = {
    data: Enumerable<AchievementsAssignementCreateManyPlayerInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutRankingDataInput = {
    update: XOR<UserUpdateWithoutRankingDataInput, UserUncheckedUpdateWithoutRankingDataInput>
    create: XOR<UserCreateWithoutRankingDataInput, UserUncheckedCreateWithoutRankingDataInput>
  }

  export type UserUpdateWithoutRankingDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutRankingDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUncheckedUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUncheckedUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUncheckedUpdateManyWithoutUserNestedInput
    gameHistory?: GameHistoryTabUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUncheckedUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUncheckedUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUncheckedUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUncheckedUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUncheckedUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type AchievementsAssignementUpsertWithWhereUniqueWithoutPlayerInput = {
    where: AchievementsAssignementWhereUniqueInput
    update: XOR<AchievementsAssignementUpdateWithoutPlayerInput, AchievementsAssignementUncheckedUpdateWithoutPlayerInput>
    create: XOR<AchievementsAssignementCreateWithoutPlayerInput, AchievementsAssignementUncheckedCreateWithoutPlayerInput>
  }

  export type AchievementsAssignementUpdateWithWhereUniqueWithoutPlayerInput = {
    where: AchievementsAssignementWhereUniqueInput
    data: XOR<AchievementsAssignementUpdateWithoutPlayerInput, AchievementsAssignementUncheckedUpdateWithoutPlayerInput>
  }

  export type AchievementsAssignementUpdateManyWithWhereWithoutPlayerInput = {
    where: AchievementsAssignementScalarWhereInput
    data: XOR<AchievementsAssignementUpdateManyMutationInput, AchievementsAssignementUncheckedUpdateManyWithoutAchievements_assignementInput>
  }

  export type AchievementsAssignementScalarWhereInput = {
    AND?: Enumerable<AchievementsAssignementScalarWhereInput>
    OR?: Enumerable<AchievementsAssignementScalarWhereInput>
    NOT?: Enumerable<AchievementsAssignementScalarWhereInput>
    achievement_id?: IntFilter | number
    player_id?: StringFilter | string
  }

  export type AchievementsAssignementCreateWithoutAchievementInput = {
    player: RankingDataCreateNestedOneWithoutAchievements_assignementInput
  }

  export type AchievementsAssignementUncheckedCreateWithoutAchievementInput = {
    player_id: string
  }

  export type AchievementsAssignementCreateOrConnectWithoutAchievementInput = {
    where: AchievementsAssignementWhereUniqueInput
    create: XOR<AchievementsAssignementCreateWithoutAchievementInput, AchievementsAssignementUncheckedCreateWithoutAchievementInput>
  }

  export type AchievementsAssignementCreateManyAchievementInputEnvelope = {
    data: Enumerable<AchievementsAssignementCreateManyAchievementInput>
    skipDuplicates?: boolean
  }

  export type AchievementsAssignementUpsertWithWhereUniqueWithoutAchievementInput = {
    where: AchievementsAssignementWhereUniqueInput
    update: XOR<AchievementsAssignementUpdateWithoutAchievementInput, AchievementsAssignementUncheckedUpdateWithoutAchievementInput>
    create: XOR<AchievementsAssignementCreateWithoutAchievementInput, AchievementsAssignementUncheckedCreateWithoutAchievementInput>
  }

  export type AchievementsAssignementUpdateWithWhereUniqueWithoutAchievementInput = {
    where: AchievementsAssignementWhereUniqueInput
    data: XOR<AchievementsAssignementUpdateWithoutAchievementInput, AchievementsAssignementUncheckedUpdateWithoutAchievementInput>
  }

  export type AchievementsAssignementUpdateManyWithWhereWithoutAchievementInput = {
    where: AchievementsAssignementScalarWhereInput
    data: XOR<AchievementsAssignementUpdateManyMutationInput, AchievementsAssignementUncheckedUpdateManyWithoutAchievements_assignementInput>
  }

  export type AchievementsCreateWithoutAchievements_assignementInput = {
    name: string
    description: string
    image: string
  }

  export type AchievementsUncheckedCreateWithoutAchievements_assignementInput = {
    achievement_id?: number
    name: string
    description: string
    image: string
  }

  export type AchievementsCreateOrConnectWithoutAchievements_assignementInput = {
    where: AchievementsWhereUniqueInput
    create: XOR<AchievementsCreateWithoutAchievements_assignementInput, AchievementsUncheckedCreateWithoutAchievements_assignementInput>
  }

  export type RankingDataCreateWithoutAchievements_assignementInput = {
    games?: number
    wins?: number
    loses?: number
    draws?: number
    xp?: number
    winning_streak?: number
    losing_streak?: number
    points?: number
    rank?: Rank
    user: UserCreateNestedOneWithoutRankingDataInput
  }

  export type RankingDataUncheckedCreateWithoutAchievements_assignementInput = {
    user_id: string
    games?: number
    wins?: number
    loses?: number
    draws?: number
    xp?: number
    winning_streak?: number
    losing_streak?: number
    points?: number
    rank?: Rank
  }

  export type RankingDataCreateOrConnectWithoutAchievements_assignementInput = {
    where: RankingDataWhereUniqueInput
    create: XOR<RankingDataCreateWithoutAchievements_assignementInput, RankingDataUncheckedCreateWithoutAchievements_assignementInput>
  }

  export type AchievementsUpsertWithoutAchievements_assignementInput = {
    update: XOR<AchievementsUpdateWithoutAchievements_assignementInput, AchievementsUncheckedUpdateWithoutAchievements_assignementInput>
    create: XOR<AchievementsCreateWithoutAchievements_assignementInput, AchievementsUncheckedCreateWithoutAchievements_assignementInput>
  }

  export type AchievementsUpdateWithoutAchievements_assignementInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type AchievementsUncheckedUpdateWithoutAchievements_assignementInput = {
    achievement_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type RankingDataUpsertWithoutAchievements_assignementInput = {
    update: XOR<RankingDataUpdateWithoutAchievements_assignementInput, RankingDataUncheckedUpdateWithoutAchievements_assignementInput>
    create: XOR<RankingDataCreateWithoutAchievements_assignementInput, RankingDataUncheckedCreateWithoutAchievements_assignementInput>
  }

  export type RankingDataUpdateWithoutAchievements_assignementInput = {
    games?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    draws?: IntFieldUpdateOperationsInput | number
    xp?: FloatFieldUpdateOperationsInput | number
    winning_streak?: IntFieldUpdateOperationsInput | number
    losing_streak?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    rank?: EnumRankFieldUpdateOperationsInput | Rank
    user?: UserUpdateOneRequiredWithoutRankingDataNestedInput
  }

  export type RankingDataUncheckedUpdateWithoutAchievements_assignementInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    games?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    draws?: IntFieldUpdateOperationsInput | number
    xp?: FloatFieldUpdateOperationsInput | number
    winning_streak?: IntFieldUpdateOperationsInput | number
    losing_streak?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    rank?: EnumRankFieldUpdateOperationsInput | Rank
  }

  export type GameCreateWithoutGameHistoryInput = {
    id?: string
    dateCreated?: Date | string
    gameStatus: GameStatus
    player1_id: string
    player2_id: string
    player1_pts: number
    player2_pts: number
  }

  export type GameUncheckedCreateWithoutGameHistoryInput = {
    id?: string
    dateCreated?: Date | string
    gameStatus: GameStatus
    player1_id: string
    player2_id: string
    player1_pts: number
    player2_pts: number
  }

  export type GameCreateOrConnectWithoutGameHistoryInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutGameHistoryInput, GameUncheckedCreateWithoutGameHistoryInput>
  }

  export type UserCreateWithoutGameHistoryInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabCreateNestedManyWithoutUserInput
    rankingData?: RankingDataCreateNestedManyWithoutUserInput
    notification?: NotificationCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutGameHistoryInput = {
    id?: string
    login: string
    email: string
    firstName: string
    lastName: string
    dateJoined?: Date | string
    updated?: Date | string
    avatar?: string
    status?: Status
    tfa?: boolean
    otp_verified?: boolean
    otp_base32?: string | null
    realStatus?: boolean
    friends?: FriendsTabUncheckedCreateNestedManyWithoutUserInput
    blockedUsers?: BlockTabUncheckedCreateNestedManyWithoutUserInput
    channelsJoined?: ChannelsJoinTabUncheckedCreateNestedManyWithoutUserInput
    rankingData?: RankingDataUncheckedCreateNestedManyWithoutUserInput
    notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    frendshipInvites?: FriendshipInvitesUncheckedCreateNestedManyWithoutSenderInput
    gameInvites?: GameInvitesUncheckedCreateNestedManyWithoutSenderInput
    MsgSender?: PrivateMessageUncheckedCreateNestedManyWithoutSenderInput
    MsgReceiver?: PrivateMessageUncheckedCreateNestedManyWithoutReceiverInput
    privateChatRoomSender?: PrivateChatRoomUncheckedCreateNestedManyWithoutSenderInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutGameHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGameHistoryInput, UserUncheckedCreateWithoutGameHistoryInput>
  }

  export type GameUpsertWithoutGameHistoryInput = {
    update: XOR<GameUpdateWithoutGameHistoryInput, GameUncheckedUpdateWithoutGameHistoryInput>
    create: XOR<GameCreateWithoutGameHistoryInput, GameUncheckedCreateWithoutGameHistoryInput>
  }

  export type GameUpdateWithoutGameHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    gameStatus?: EnumGameStatusFieldUpdateOperationsInput | GameStatus
    player1_id?: StringFieldUpdateOperationsInput | string
    player2_id?: StringFieldUpdateOperationsInput | string
    player1_pts?: IntFieldUpdateOperationsInput | number
    player2_pts?: IntFieldUpdateOperationsInput | number
  }

  export type GameUncheckedUpdateWithoutGameHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    gameStatus?: EnumGameStatusFieldUpdateOperationsInput | GameStatus
    player1_id?: StringFieldUpdateOperationsInput | string
    player2_id?: StringFieldUpdateOperationsInput | string
    player1_pts?: IntFieldUpdateOperationsInput | number
    player2_pts?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpsertWithoutGameHistoryInput = {
    update: XOR<UserUpdateWithoutGameHistoryInput, UserUncheckedUpdateWithoutGameHistoryInput>
    create: XOR<UserCreateWithoutGameHistoryInput, UserUncheckedCreateWithoutGameHistoryInput>
  }

  export type UserUpdateWithoutGameHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUpdateManyWithoutUserNestedInput
    notification?: NotificationUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutGameHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateJoined?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | Status
    tfa?: BoolFieldUpdateOperationsInput | boolean
    otp_verified?: BoolFieldUpdateOperationsInput | boolean
    otp_base32?: NullableStringFieldUpdateOperationsInput | string | null
    realStatus?: BoolFieldUpdateOperationsInput | boolean
    friends?: FriendsTabUncheckedUpdateManyWithoutUserNestedInput
    blockedUsers?: BlockTabUncheckedUpdateManyWithoutUserNestedInput
    channelsJoined?: ChannelsJoinTabUncheckedUpdateManyWithoutUserNestedInput
    rankingData?: RankingDataUncheckedUpdateManyWithoutUserNestedInput
    notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    frendshipInvites?: FriendshipInvitesUncheckedUpdateManyWithoutSenderNestedInput
    gameInvites?: GameInvitesUncheckedUpdateManyWithoutSenderNestedInput
    MsgSender?: PrivateMessageUncheckedUpdateManyWithoutSenderNestedInput
    MsgReceiver?: PrivateMessageUncheckedUpdateManyWithoutReceiverNestedInput
    privateChatRoomSender?: PrivateChatRoomUncheckedUpdateManyWithoutSenderNestedInput
    privateChatRoomReceiver?: PrivateChatRoomUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type FriendsTabCreateManyUserInput = {
    friendUser_id: string
  }

  export type BlockTabCreateManyUserInput = {
    blockedUser_id: string
    uuid?: string
  }

  export type ChannelsJoinTabCreateManyUserInput = {
    channel_id: string
    channel_name: string
    role: ChanRoles
  }

  export type GameHistoryTabCreateManyUserInput = {
    game_id: string
  }

  export type RankingDataCreateManyUserInput = {
    games?: number
    wins?: number
    loses?: number
    draws?: number
    xp?: number
    winning_streak?: number
    losing_streak?: number
    points?: number
    rank?: Rank
  }

  export type NotificationCreateManyUserInput = {
    user_id: string
  }

  export type FriendshipInvitesCreateManySenderInput = {
    receiver_id: string
    status?: InviteStatus
    createdAt?: Date | string
  }

  export type GameInvitesCreateManySenderInput = {
    receiver_id: string
    status?: InviteStatus
    validUntil: Date | string
  }

  export type PrivateMessageCreateManySenderInput = {
    id?: string
    dateCreated?: Date | string
    content: string
    seen?: boolean
    chatRoom_id: string
    receiver_id: string
  }

  export type PrivateMessageCreateManyReceiverInput = {
    id?: string
    dateCreated?: Date | string
    content: string
    seen?: boolean
    chatRoom_id: string
    sender_id: string
  }

  export type PrivateChatRoomCreateManySenderInput = {
    id: string
    receiver_id: string
    lastUpdatedTime?: Date | string
    blocked?: boolean
  }

  export type PrivateChatRoomCreateManyReceiverInput = {
    id: string
    sender_id: string
    lastUpdatedTime?: Date | string
    blocked?: boolean
  }

  export type FriendsTabUpdateWithoutUserInput = {
    friendUser_id?: StringFieldUpdateOperationsInput | string
  }

  export type FriendsTabUncheckedUpdateWithoutUserInput = {
    friendUser_id?: StringFieldUpdateOperationsInput | string
  }

  export type FriendsTabUncheckedUpdateManyWithoutFriendsInput = {
    friendUser_id?: StringFieldUpdateOperationsInput | string
  }

  export type BlockTabUpdateWithoutUserInput = {
    blockedUser_id?: StringFieldUpdateOperationsInput | string
    uuid?: StringFieldUpdateOperationsInput | string
  }

  export type BlockTabUncheckedUpdateWithoutUserInput = {
    blockedUser_id?: StringFieldUpdateOperationsInput | string
    uuid?: StringFieldUpdateOperationsInput | string
  }

  export type BlockTabUncheckedUpdateManyWithoutBlockedUsersInput = {
    blockedUser_id?: StringFieldUpdateOperationsInput | string
    uuid?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelsJoinTabUpdateWithoutUserInput = {
    channel_id?: StringFieldUpdateOperationsInput | string
    channel_name?: StringFieldUpdateOperationsInput | string
    role?: EnumChanRolesFieldUpdateOperationsInput | ChanRoles
  }

  export type ChannelsJoinTabUncheckedUpdateWithoutUserInput = {
    channel_id?: StringFieldUpdateOperationsInput | string
    channel_name?: StringFieldUpdateOperationsInput | string
    role?: EnumChanRolesFieldUpdateOperationsInput | ChanRoles
  }

  export type ChannelsJoinTabUncheckedUpdateManyWithoutChannelsJoinedInput = {
    channel_id?: StringFieldUpdateOperationsInput | string
    channel_name?: StringFieldUpdateOperationsInput | string
    role?: EnumChanRolesFieldUpdateOperationsInput | ChanRoles
  }

  export type GameHistoryTabUpdateWithoutUserInput = {
    game?: GameUpdateOneRequiredWithoutGameHistoryNestedInput
  }

  export type GameHistoryTabUncheckedUpdateWithoutUserInput = {
    game_id?: StringFieldUpdateOperationsInput | string
  }

  export type GameHistoryTabUncheckedUpdateManyWithoutGameHistoryInput = {
    game_id?: StringFieldUpdateOperationsInput | string
  }

  export type RankingDataUpdateWithoutUserInput = {
    games?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    draws?: IntFieldUpdateOperationsInput | number
    xp?: FloatFieldUpdateOperationsInput | number
    winning_streak?: IntFieldUpdateOperationsInput | number
    losing_streak?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    rank?: EnumRankFieldUpdateOperationsInput | Rank
    achievements_assignement?: AchievementsAssignementUpdateManyWithoutPlayerNestedInput
  }

  export type RankingDataUncheckedUpdateWithoutUserInput = {
    games?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    draws?: IntFieldUpdateOperationsInput | number
    xp?: FloatFieldUpdateOperationsInput | number
    winning_streak?: IntFieldUpdateOperationsInput | number
    losing_streak?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    rank?: EnumRankFieldUpdateOperationsInput | Rank
    achievements_assignement?: AchievementsAssignementUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type RankingDataUncheckedUpdateManyWithoutRankingDataInput = {
    games?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    draws?: IntFieldUpdateOperationsInput | number
    xp?: FloatFieldUpdateOperationsInput | number
    winning_streak?: IntFieldUpdateOperationsInput | number
    losing_streak?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    rank?: EnumRankFieldUpdateOperationsInput | Rank
  }

  export type NotificationUpdateWithoutUserInput = {
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyWithoutNotificationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type FriendshipInvitesUpdateWithoutSenderInput = {
    receiver_id?: StringFieldUpdateOperationsInput | string
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendshipInvitesUncheckedUpdateWithoutSenderInput = {
    receiver_id?: StringFieldUpdateOperationsInput | string
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendshipInvitesUncheckedUpdateManyWithoutFrendshipInvitesInput = {
    receiver_id?: StringFieldUpdateOperationsInput | string
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameInvitesUpdateWithoutSenderInput = {
    receiver_id?: StringFieldUpdateOperationsInput | string
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameInvitesUncheckedUpdateWithoutSenderInput = {
    receiver_id?: StringFieldUpdateOperationsInput | string
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameInvitesUncheckedUpdateManyWithoutGameInvitesInput = {
    receiver_id?: StringFieldUpdateOperationsInput | string
    status?: EnumInviteStatusFieldUpdateOperationsInput | InviteStatus
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrivateMessageUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    receiver?: UserUpdateOneRequiredWithoutMsgReceiverNestedInput
    chatRoom?: PrivateChatRoomUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type PrivateMessageUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    chatRoom_id?: StringFieldUpdateOperationsInput | string
    receiver_id?: StringFieldUpdateOperationsInput | string
  }

  export type PrivateMessageUncheckedUpdateManyWithoutMsgSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    chatRoom_id?: StringFieldUpdateOperationsInput | string
    receiver_id?: StringFieldUpdateOperationsInput | string
  }

  export type PrivateMessageUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    sender?: UserUpdateOneRequiredWithoutMsgSenderNestedInput
    chatRoom?: PrivateChatRoomUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type PrivateMessageUncheckedUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    chatRoom_id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
  }

  export type PrivateMessageUncheckedUpdateManyWithoutMsgReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    chatRoom_id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
  }

  export type PrivateChatRoomUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastUpdatedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    blocked?: BoolFieldUpdateOperationsInput | boolean
    messages?: PrivateMessageUpdateManyWithoutChatRoomNestedInput
    receiver?: UserUpdateOneRequiredWithoutPrivateChatRoomReceiverNestedInput
  }

  export type PrivateChatRoomUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiver_id?: StringFieldUpdateOperationsInput | string
    lastUpdatedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    blocked?: BoolFieldUpdateOperationsInput | boolean
    messages?: PrivateMessageUncheckedUpdateManyWithoutChatRoomNestedInput
  }

  export type PrivateChatRoomUncheckedUpdateManyWithoutPrivateChatRoomSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiver_id?: StringFieldUpdateOperationsInput | string
    lastUpdatedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    blocked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PrivateChatRoomUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastUpdatedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    blocked?: BoolFieldUpdateOperationsInput | boolean
    messages?: PrivateMessageUpdateManyWithoutChatRoomNestedInput
    sender?: UserUpdateOneRequiredWithoutPrivateChatRoomSenderNestedInput
  }

  export type PrivateChatRoomUncheckedUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    lastUpdatedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    blocked?: BoolFieldUpdateOperationsInput | boolean
    messages?: PrivateMessageUncheckedUpdateManyWithoutChatRoomNestedInput
  }

  export type PrivateChatRoomUncheckedUpdateManyWithoutPrivateChatRoomReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    lastUpdatedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    blocked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PrivateMessageCreateManyChatRoomInput = {
    id?: string
    dateCreated?: Date | string
    content: string
    seen?: boolean
    sender_id: string
    receiver_id: string
  }

  export type PrivateMessageUpdateWithoutChatRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    sender?: UserUpdateOneRequiredWithoutMsgSenderNestedInput
    receiver?: UserUpdateOneRequiredWithoutMsgReceiverNestedInput
  }

  export type PrivateMessageUncheckedUpdateWithoutChatRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    sender_id?: StringFieldUpdateOperationsInput | string
    receiver_id?: StringFieldUpdateOperationsInput | string
  }

  export type PrivateMessageUncheckedUpdateManyWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
    sender_id?: StringFieldUpdateOperationsInput | string
    receiver_id?: StringFieldUpdateOperationsInput | string
  }

  export type MembersTabCreateManyChannelInput = {
    member_id: string
  }

  export type MessageCreateManyChannelInput = {
    id?: string
    dateCreated?: Date | string
    sender_id: string
    content: string
    seen?: boolean
  }

  export type BannedMembersCreateManyChannelInput = {
    banned_id: string
    status?: MemeberStatusTime | null
    status_end_time?: Date | string | null
  }

  export type AdminMembersCreateManyChannelInput = {
    admin_id: string
  }

  export type MutedMembersCreateManyChannelInput = {
    muted_id: string
    status?: MemeberStatusTime | null
    status_end_time?: Date | string | null
  }

  export type kickedMembersCreateManyChannelInput = {
    kicked_id: string
  }

  export type MembersTabUpdateWithoutChannelInput = {
    member_id?: StringFieldUpdateOperationsInput | string
  }

  export type MembersTabUncheckedUpdateWithoutChannelInput = {
    member_id?: StringFieldUpdateOperationsInput | string
  }

  export type MembersTabUncheckedUpdateManyWithoutMembersInput = {
    member_id?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUpdateWithoutChannelInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    sender_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageUncheckedUpdateWithoutChannelInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    sender_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageUncheckedUpdateManyWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    sender_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    seen?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BannedMembersUpdateWithoutChannelInput = {
    banned_id?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMemeberStatusTimeFieldUpdateOperationsInput | MemeberStatusTime | null
    status_end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BannedMembersUncheckedUpdateWithoutChannelInput = {
    banned_id?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMemeberStatusTimeFieldUpdateOperationsInput | MemeberStatusTime | null
    status_end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BannedMembersUncheckedUpdateManyWithoutBannedUsersInput = {
    banned_id?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMemeberStatusTimeFieldUpdateOperationsInput | MemeberStatusTime | null
    status_end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AdminMembersUpdateWithoutChannelInput = {
    admin_id?: StringFieldUpdateOperationsInput | string
  }

  export type AdminMembersUncheckedUpdateWithoutChannelInput = {
    admin_id?: StringFieldUpdateOperationsInput | string
  }

  export type AdminMembersUncheckedUpdateManyWithoutAdminstratorsInput = {
    admin_id?: StringFieldUpdateOperationsInput | string
  }

  export type MutedMembersUpdateWithoutChannelInput = {
    muted_id?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMemeberStatusTimeFieldUpdateOperationsInput | MemeberStatusTime | null
    status_end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MutedMembersUncheckedUpdateWithoutChannelInput = {
    muted_id?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMemeberStatusTimeFieldUpdateOperationsInput | MemeberStatusTime | null
    status_end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MutedMembersUncheckedUpdateManyWithoutMutedMembersInput = {
    muted_id?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMemeberStatusTimeFieldUpdateOperationsInput | MemeberStatusTime | null
    status_end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type kickedMembersUpdateWithoutChannelInput = {
    kicked_id?: StringFieldUpdateOperationsInput | string
  }

  export type kickedMembersUncheckedUpdateWithoutChannelInput = {
    kicked_id?: StringFieldUpdateOperationsInput | string
  }

  export type kickedMembersUncheckedUpdateManyWithoutKickedMembersInput = {
    kicked_id?: StringFieldUpdateOperationsInput | string
  }

  export type GameHistoryTabCreateManyGameInput = {
    user_id: string
  }

  export type GameHistoryTabUpdateWithoutGameInput = {
    user?: UserUpdateOneRequiredWithoutGameHistoryNestedInput
  }

  export type GameHistoryTabUncheckedUpdateWithoutGameInput = {
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type AchievementsAssignementCreateManyPlayerInput = {
    achievement_id: number
  }

  export type AchievementsAssignementUpdateWithoutPlayerInput = {
    achievement?: AchievementsUpdateOneRequiredWithoutAchievements_assignementNestedInput
  }

  export type AchievementsAssignementUncheckedUpdateWithoutPlayerInput = {
    achievement_id?: IntFieldUpdateOperationsInput | number
  }

  export type AchievementsAssignementUncheckedUpdateManyWithoutAchievements_assignementInput = {
    achievement_id?: IntFieldUpdateOperationsInput | number
  }

  export type AchievementsAssignementCreateManyAchievementInput = {
    player_id: string
  }

  export type AchievementsAssignementUpdateWithoutAchievementInput = {
    player?: RankingDataUpdateOneRequiredWithoutAchievements_assignementNestedInput
  }

  export type AchievementsAssignementUncheckedUpdateWithoutAchievementInput = {
    player_id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}