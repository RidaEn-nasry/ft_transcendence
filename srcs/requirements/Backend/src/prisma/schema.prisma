// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//PascalCase
enum Status {
  Online
  Offline
  Idle
  DoNotDisturb
  InGame
}

enum ChanRoles {
  Admin
  Owner
  Member
}

enum ChanType {
  Public
  Private
  Secret
}

enum GameStatus {
  OnGoing
  Finished
}

enum Rank {
  Novice
  Veteran
  Rif_Rebellion
  Master
  Sahara_Tuareg
}

enum MemeberStatusTime {
  Permanent
  Temporary
}

enum InviteStatus {
  Pending
  Accepted
  Rejected
}

// type  attributes att functions
model User {
  id             String            @id @default(uuid())
  login          String            @unique
  email          String            @unique
  firstName      String
  lastName       String
  dateJoined     DateTime          @default(now())
  updated        DateTime          @updatedAt()
  avatar         String            @default("/app/public/default.png")
  status         Status            @default(Online)
  tfa            Boolean           @default(false)
  otp_verified   Boolean           @default(false)
  otp_base32     String?
  friends        FriendsTab[]      @relation("friendsTabRelation")
  blockedUsers   BlockTab[]        @relation("blockTabRelation")
  channelsJoined ChannelsJoinTab[] @relation("channelsJoinTabRelation")
  gameHistory    GameHistoryTab[]  @relation("gameHistoryRelation")
  rankingData    RankingData[]     @relation("rankingDataRelation")
  notification   Notification[]    @relation("notificationRelation")

  frendshipInvites FriendshipInvites[] @relation("friendshipInvitesRelation")
  gameInvites      GameInvites[]       @relation("gameInvitesRelation")
  // relation to chat 
  MsgSender        PrivateMessage[]    @relation("privateMessageRelationSender")
  MsgReceiver      PrivateMessage[]    @relation("privateChatRoomRelationReceiver")

  // relation to privatchatroom
  privateChatRoomSender   PrivateChatRoom[] @relation("senderRelation")
  privateChatRoomReceiver PrivateChatRoom[] @relation("receiverRelation")

  realStatus Boolean @default(false)
}

model FriendshipInvites {
  sender_id   String
  receiver_id String
  sender      User         @relation("friendshipInvitesRelation", fields: [sender_id], references: [id])
  status      InviteStatus @default(Pending)
  createdAt   DateTime     @default(now())

  @@unique([sender_id, receiver_id])
}

model FriendsTab {
  user_id       String
  user          User   @relation("friendsTabRelation", fields: [user_id], references: [id])
  friendUser_id String

  @@unique([user_id, friendUser_id])
}

model PrivateMessage {
  id          String          @id @default(uuid())
  dateCreated DateTime        @default(now())
  content     String //not empty
  seen        Boolean         @default(false)
  chatRoom_id String
  sender      User            @relation("privateMessageRelationSender", fields: [sender_id], references: [id])
  sender_id   String
  receiver_id String
  receiver    User            @relation("privateChatRoomRelationReceiver", fields: [receiver_id], references: [id])
  chatRoom    PrivateChatRoom @relation("privateChatRoomRelation", fields: [chatRoom_id], references: [id], onDelete: Cascade)
  // chatRoom PrivateChatRoom @relation("privateChatRoomRelation", fields: [chatRoom_id], references: [id])
}

model PrivateChatRoom {
  id              String           @id
  sender_id       String
  receiver_id     String
  messages        PrivateMessage[] @relation("privateChatRoomRelation")
  // adding this to be able to sort the chat rooms by newest message
  lastUpdatedTime DateTime         @default(now())
  sender          User             @relation("senderRelation", fields: [sender_id], references: [id]) //
  receiver        User             @relation("receiverRelation", fields: [receiver_id], references: [id]) // receiver        User                  @relation("privateChatRoomRelation", fields: [receiver_id], references: [id])
  blocked         Boolean          @default(false)
}

model BlockTab {
  user_id        String
  user           User   @relation("blockTabRelation", fields: [user_id], references: [id])
  blockedUser_id String
  uuid           String @unique  @default(uuid())
  // we need to change the blocktab pk , as a user can block user while he is blocked by him
  
}

model ChannelsJoinTab {
  user_id      String
  user         User      @relation("channelsJoinTabRelation", fields: [user_id], references: [id])
  channel_id   String
  channel_name String
  role         ChanRoles

  @@unique([user_id, channel_id])
}

model Channel {
  id            String          @id @default(uuid())
  name          String          @unique
  dateCreated   DateTime        @default(now())
  chann_type    ChanType
  owner_id      String
  password      String?
  limit_members Int
  members       MembersTab[]    @relation("membersTabRelation")
  messages      Message[]       @relation("channelMessageRelation")
  bannedUsers   BannedMembers[] @relation("bannedMembersRelation")
  adminstrators AdminMembers[]  @relation("adminMembersRelation")
  mutedMembers  MutedMembers[]  @relation("mutedMembersRelation")
  kickedMembers kickedMembers[] @relation("kickedMembersRelation")
}

model MembersTab {
  channel_id String
  channel    Channel @relation("membersTabRelation", fields: [channel_id], references: [id])
  member_id  String

  @@unique([channel_id, member_id])
}

model BannedMembers {
  channel_id      String
  channel         Channel            @relation("bannedMembersRelation", fields: [channel_id], references: [id])
  banned_id       String
  status          MemeberStatusTime?
  status_end_time DateTime?

  @@unique([channel_id, banned_id])
}

model AdminMembers {
  channel_id String
  channel    Channel @relation("adminMembersRelation", fields: [channel_id], references: [id])
  admin_id   String

  @@unique([channel_id, admin_id])
}

model kickedMembers {
  channel_id String
  channel    Channel @relation("kickedMembersRelation", fields: [channel_id], references: [id])
  kicked_id  String

  @@unique([channel_id, kicked_id])
}

model MutedMembers {
  channel_id      String
  channel         Channel            @relation("mutedMembersRelation", fields: [channel_id], references: [id])
  muted_id        String
  status          MemeberStatusTime?
  status_end_time DateTime?

  @@unique([channel_id, muted_id])
}

model Message {
  id          String   @id @default(uuid())
  dateCreated DateTime @default(now())
  sender_id   String
  receiver_id String
  channel     Channel  @relation("channelMessageRelation", fields: [receiver_id], references: [id])
  content     String //not empty
  seen        Boolean  @default(false)
}

model Notification {
  notification_id String @id @default(uuid())
  user_id         String
  user            User   @relation("notificationRelation", fields: [notification_id], references: [id])
  // invite_data InviteData[] @relation("InviteDataRelation")
}

model Game {
  id          String           @id @default(uuid())
  dateCreated DateTime         @default(now())
  gameStatus  GameStatus
  player1_id  String
  player2_id  String
  player1_pts Int
  player2_pts Int
  // gameHistory GameHistoryTab[] @relation("gameHistoryRelation")
  gameHistory GameHistoryTab[] @relation("gameHistoryRelation")
}

model GameInvites {
  sender_id   String
  receiver_id String
  sender      User         @relation("gameInvitesRelation", fields: [sender_id], references: [id])
  status      InviteStatus @default(Pending)
  validUntil  DateTime
  roomId      String

  @@unique([sender_id, receiver_id])
}

model RankingData {
  user_id                  String                    @unique
  user                     User                      @relation("rankingDataRelation", fields: [user_id], references: [id])
  games                    Int                       @default(0)
  wins                     Int                       @default(0)
  loses                    Int                       @default(0)
  draws                    Int                       @default(0)
  xp                       Float                     @default(0)
  winning_streak           Int                       @default(0)
  losing_streak            Int                       @default(0)
  points                   Int                       @default(0)
  rank                     Rank                      @default(Novice)
  achievements_assignement AchievementsAssignement[]
}

model Achievements {
  achievement_id           Int                       @id @default(autoincrement())
  name                     String
  description              String
  image                    String                   
  achievements_assignement AchievementsAssignement[] @relation("achievementsAssignementRelation")
}

model AchievementsAssignement {
  // assignement_id String    @id @default(uuid())
  achievement_id Int
  achievement    Achievements @relation("achievementsAssignementRelation", fields: [achievement_id], references: [achievement_id])
  player_id      String
  player         RankingData  @relation(fields: [player_id], references: [user_id])

  @@unique([achievement_id, player_id])
}

model GameHistoryTab {
  game_id String
  game    Game   @relation("gameHistoryRelation", fields: [game_id], references: [id])
  user_id String @id
  user    User   @relation("gameHistoryRelation", fields: [user_id], references: [id])
}
