generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//PascalCase
enum Status {
  Online
  Offline
  Idle
  DoNotDisturb
  InGame
}

enum ChanRoles {
  Admin
  Owner
  Member
}

enum ChanType {
  Public
  Private
  Secret
}

enum GameStatus {
  OnGoing
  Finished
}
    
enum Rank {
  Novice
  Intermediate
  Advanced
  Master
}

// type  attributes att functions
model User {
  id              String            @id @default(uuid())
  login           String            @unique
  email           String            @unique
  firstName       String
  lastName        String
  password        String
  dateJoined      DateTime          @default(now())
  updated         DateTime          @updatedAt()
  avatar          String            @default("<ralative_path>")
  status          Status 
  friends         FriendsTab[]      @relation("friendRelation")
  blockedUsers    BlockTab[]        @relation("blockRelation")
  channelsJoined  ChannelsJoinTab[] @relation("channelsJoinedRelation")
  gameHistory     GameHistoryTab[]  @relation("playerGameHistoryRelation")
  rankingData     RankingData[]     @relation("rankingDataRelation")
  notification    Notification[]    @relation("NotificationRelation")
  // @@
}

model FriendsTab {
  user_id       String
  user          User      @relation("friendRelation", fields: [user_id], references: [id])
  friendUser_id String
  // friendUinviteStringInvite      Message[] @relation("privateMessageRelation")
  @@unique([user_id, friendUser_id])
}

model BlockTab {
  user_id         String
  user            User    @relation("blockRelation", fields: [user_id], references: [id])
  blockedUser_id  String

  @@unique([user_id, blockedUser_id])
}

model ChannelsJoinTab {
  user_id       String
  user          User    @relation("channelsJoinedRelation", fields: [user_id], references: [id])
  channel_id    String  @unique()
  channel_name  String  
  role          ChanRoles
  
  @@index([channel_id], name: "channel_id") 
}


model Channel {
  id              String            @id @default(uuid())
  name            String            @unique
  dateCreated     DateTime          @default(now())
  chann_type      ChanType
  owner_id        String            
  password        String?
  limit_members   Int
  members         MembersTab[]      @relation("membersRelation")
  messages        Message[]         @relation("messageRelation")
  bannedUsers     BannedUsers[]     @relation("bannedUsersRelation")
  // @@
}

model MembersTab {
  channel_id  String 
  channel     Channel @relation("membersRelation", fields: [channel_id], references: [id])
  user_id     String
  role        ChanRoles

  @@unique([channel_id, user_id])
}

model BannedUsers {
  channel_id  String
  channel     Channel @relation("bannedUsersRelation", fields: [channel_id], references: [id])
  user_id     String
  reason      String

  @@unique([channel_id, user_id])
}

model Message {
  id          String    @id @default(uuid())
  dateCreated DateTime  @default(now())
  sender_id   String
  receiver_id String
  channel     Channel   @relation("messageRelation", fields: [receiver_id], references: [id])
  content     String //not empty
  seen        Boolean @default(false)

}

model Notification {
notification_id String @id @default(uuid())
user_id String
user  User @relation("NotificationRelation", fields: [notification_id], references: [id])
// invite_data InviteData[] @relation("InviteDataRelation")

}

model InviteData {
  invite_id String @id @default(uuid()) 
  // invite_type

}

model Game {
  id          String          @id @default(uuid())
  dateCreated DateTime        @default(now())
  gameStatus  GameStatus
  player1_id  String
  player2_id  String
  player1_pts Int
  player2_pts Int   
  gameHistory GameHistoryTab[] @relation("gameHistoryRelation")
}

model  RankingData {
  user_id                  String                     @unique
  user                     User                       @relation("rankingDataRelation", fields: [user_id], references: [id])
  wins                     Int                        @default(0)
  loses                    Int                        @default(0)
  draws                    Int                        @default(0)
  level                    Int                        @default(0)
  rank                     Rank                       @default(Novice)
  achievements_assignement AchievementsAssignement[]  @relation("PlayerAchievementsRelation")
}
model Achievements {
  achievement_id           Int                        @id @default(autoincrement())
  name                     String
  description              String
  achievements_assignement AchievementsAssignement[] @relation("AchievementsAssignementRelation")
  // @@
}

model AchievementsAssignement {
  achievement_id  Int
  achievement     Achievements @relation("AchievementsAssignementRelation", fields: [achievement_id], references: [achievement_id])
  player_id       String
  player          RankingData  @relation("PlayerAchievementsRelation", fields: [player_id], references: [user_id])

  
  @@id([achievement_id, player_id])
}
model GameHistoryTab {
  game_id       String
  game          Game    @relation("gameHistoryRelation", fields: [game_id], references: [id])
  user_id       String  @id
  user          User    @relation("playerGameHistoryRelation", fields: [user_id], references: [id])
  // @@
}




















